{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 Algobook","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u2014 \u044d\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0448\u0430\u0433\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u042d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u043e\u0447\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0437\u0430\u0434\u0430\u0447\u0430\u043c, \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0434\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"#_1","title":"\u041e \u0447\u0451\u043c \u044d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442","text":"<p>\u041a\u0430\u043a \u0432\u044b \u0443\u0436\u0435 \u043f\u043e\u043d\u044f\u043b\u0438, \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c. \u0417\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c, \u044f \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0441\u044c \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432, \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u0434\u0435\u0441\u044c. \u041e\u0434\u043d\u0430\u043a\u043e \u044f \u0441\u0442\u0440\u0435\u043c\u043b\u044e\u0441\u044c \u0441\u043e\u0431\u0440\u0430\u0442\u044c, \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0430 \u044d\u0442\u0443 \u0442\u0435\u043c\u0443 \u0438\u0437 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0440\u0430\u0437\u0431\u0438\u0442\u044b\u0445 \u043f\u043e \u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0440\u0443\u0431\u0440\u0438\u043a\u0430\u043c. \u0410 \u0442\u0430\u043a\u0436\u0435, \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python.</p> <p>\u0412\u0441\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0434\u0435\u0441\u044c, \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0434 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 MIT. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a\u043e \u043c\u043d\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e. \u041c\u043e\u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043d\u0438\u0436\u0435.</p> <p>https://t.me/gorschal</p>"},{"location":"#_2","title":"\u041f\u043e\u043c\u043e\u0449\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0443","text":"<p>\u0412\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0439 <code>pull request</code> \u0432 \u043d\u0430\u0448 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. </p> <p>\u0411\u0443\u0434\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d \u0437\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e\u0433\u043e, \u043f\u043e\u043c\u043e\u0449\u044c \u0441 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u0451\u0441\u0442\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0435\u0439.</p> <p>\u041e\u0434\u043d\u0430\u043a\u043e, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0435 \u043d\u0430\u043c \u00ab\u0437\u0432\u0435\u0437\u0434\u0443\u00bb \u043d\u0430 <code>GitHub</code> \u0438\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043d\u0430\u0441 \u0432 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445, \u044d\u0442\u043e \u0443\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0432\u043a\u043b\u0430\u0434\u043e\u043c \u0432 \u043d\u0430\u0448\u0443 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443.</p> <p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0438\u043c \u0432\u0430\u0441 \u0437\u0430 \u0432\u0430\u0448\u0443 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443!</p>"},{"location":"#_3","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Igor Gorschal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"md/1ddp/","title":"\u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u0430\u044f DP (1D DP)","text":"<p>1D DP - \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0433\u0434\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.</p>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0414\u041d\u041a/\u0420\u041d\u041a, \u043f\u043e\u0438\u0441\u043a \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432, \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u043d\u0434\u043e\u0432)</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 (\u043f\u043e\u0438\u0441\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a)</li> <li>\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 (\u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0445 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u0441\u043a\u043e\u043f\u0438\u0438)</li> <li>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0439)</li> </ol>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b","text":"<ol> <li>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0443 (\u043e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435).</li> <li>\u0420\u0435\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435: \u0424\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u043c, \u043a\u0430\u043a \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445.</li> <li>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.</li> <li>\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 (\u043e\u0431\u044b\u0447\u043d\u043e \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e).</li> <li>\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438: \u0427\u0430\u0441\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u0441\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.</li> </ol>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438: \u0427\u0438\u0441\u043b\u0430 \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438","text":"<p>\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0439 DP - \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0443\u043c\u043c\u043e\u0439 \u0434\u0432\u0443\u0445 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445.</p>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#python","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 Python","text":"<pre><code>def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n    dp = [0] * (n + 1)\n    dp[0] = 0  # \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\n    dp[1] = 1  # \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\n\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]  # \u0420\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\n\n    return dp[n]\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nprint(fibonacci(10))  # \u0412\u044b\u0432\u043e\u0434: 55\n</code></pre>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_4","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f (\u0441 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0435\u0439 \u043f\u0430\u043c\u044f\u0442\u0438)","text":"<pre><code>def fibonacci_optimized(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    prev_prev = 0  # F(n-2)\n    prev = 1       # F(n-1)\n\n    for _ in range(2, n + 1):\n        current = prev + prev_prev\n        prev_prev, prev = prev, current  # \u0421\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n    return prev\n\nprint(fibonacci_optimized(10))  # \u0412\u044b\u0432\u043e\u0434: 55\n</code></pre>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_5","title":"\u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: \u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u043a\u0443\u0437\u043d\u0435\u0447\u0438\u043a\u0435","text":"<p>\u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u041a\u0443\u0437\u043d\u0435\u0447\u0438\u043a \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 1 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u044b\u0433\u0430\u0442\u044c \u043d\u0430 +1 \u0438\u043b\u0438 +2. \u0421\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u0438 N?</p>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_6","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>def count_ways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2  # 1+1 \u0438\u043b\u0438 2\n\n    dp = [0] * (n + 1)\n    dp[1] = 1  # \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\n    dp[2] = 2  # \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\n\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]  # \u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e i-1 \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u044b\u0436\u043e\u043a +1\n                                       # \u043f\u043b\u044e\u0441 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e i-2 \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u044b\u0436\u043e\u043a +2\n\n    return dp[n]\n\nprint(count_ways(5))  # \u0412\u044b\u0432\u043e\u0434: 8 (1111, 112, 121, 211, 22, 1112, 1121, 1211, ...)\n</code></pre>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/1ddp/#_7","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b","text":"<ol> <li>\u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u0430\u044f DP \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439.</li> <li>\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u043e \\(O(n)\\), \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \\(O(n)\\) \u0438\u043b\u0438 \\(O(1)\\) \u043f\u0440\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438.</li> <li>\u0412\u0430\u0436\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0438 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438.</li> </ol>","tags":["\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430"]},{"location":"md/abstract_factory/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Abstract Factory (\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430)","text":"<p>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430 \u2014 \u044d\u0442\u043e \u043f\u043e\u0440\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u044f\u0441\u044c \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438","text":"<ol> <li>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430 - \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430 - \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0439 \u0444\u0430\u0431\u0440\u0438\u043a\u0438, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b</li> <li>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 - \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430</li> <li>\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 - \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0431\u0440\u0438\u043a\u043e\u0439</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#_2","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430","text":"<ul> <li>\u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b</li> <li>\u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0443 \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432</li> <li>\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u0447\u0435\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438/\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#_4","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<ul> <li>\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432</li> <li>\u041c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#1-ui","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 UI \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b\nclass Button(ABC):\n    @abstractmethod\n    def render(self):\n        pass\n\nclass Checkbox(ABC):\n    @abstractmethod\n    def render(self):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0434\u043b\u044f Windows\nclass WindowsButton(Button):\n    def render(self):\n        return \"Windows Button\"\n\nclass WindowsCheckbox(Checkbox):\n    def render(self):\n        return \"Windows Checkbox\"\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0434\u043b\u044f MacOS\nclass MacOSButton(Button):\n    def render(self):\n        return \"MacOS Button\"\n\nclass MacOSCheckbox(Checkbox):\n    def render(self):\n        return \"MacOS Checkbox\"\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430\nclass GUIFactory(ABC):\n    @abstractmethod\n    def create_button(self) -&gt; Button:\n        pass\n\n    @abstractmethod\n    def create_checkbox(self) -&gt; Checkbox:\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438\nclass WindowsFactory(GUIFactory):\n    def create_button(self) -&gt; Button:\n        return WindowsButton()\n\n    def create_checkbox(self) -&gt; Checkbox:\n        return WindowsCheckbox()\n\nclass MacOSFactory(GUIFactory):\n    def create_button(self) -&gt; Button:\n        return MacOSButton()\n\n    def create_checkbox(self) -&gt; Checkbox:\n        return MacOSCheckbox()\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\ndef client_code(factory: GUIFactory):\n    button = factory.create_button()\n    checkbox = factory.create_checkbox()\n\n    print(button.render())\n    print(checkbox.render())\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nprint(\"Windows UI:\")\nclient_code(WindowsFactory())\n\nprint(\"\\nMacOS UI:\")\nclient_code(MacOSFactory())\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u041c\u0435\u0431\u0435\u043b\u044c \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b\nclass Chair(ABC):\n    @abstractmethod\n    def sit_on(self):\n        pass\n\nclass Sofa(ABC):\n    @abstractmethod\n    def lie_on(self):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0432 \u0441\u0442\u0438\u043b\u0435 \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u0430\u043d\u0441\u043a\u0438\u0439\nclass VictorianChair(Chair):\n    def sit_on(self):\n        return \"\u0421\u0438\u0434\u0438\u043c \u043d\u0430 \u0432\u0438\u043a\u0442\u043e\u0440\u0438\u0430\u043d\u0441\u043a\u043e\u043c \u0441\u0442\u0443\u043b\u0435\"\n\nclass VictorianSofa(Sofa):\n    def lie_on(self):\n        return \"\u041b\u0435\u0436\u0438\u043c \u043d\u0430 \u0432\u0438\u043a\u0442\u043e\u0440\u0438\u0430\u043d\u0441\u043a\u043e\u043c \u0434\u0438\u0432\u0430\u043d\u0435\"\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0432 \u0441\u0442\u0438\u043b\u0435 \u041c\u043e\u0434\u0435\u0440\u043d\nclass ModernChair(Chair):\n    def sit_on(self):\n        return \"\u0421\u0438\u0434\u0438\u043c \u043d\u0430 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u0441\u0442\u0443\u043b\u0435\"\n\nclass ModernSofa(Sofa):\n    def lie_on(self):\n        return \"\u041b\u0435\u0436\u0438\u043c \u043d\u0430 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u0434\u0438\u0432\u0430\u043d\u0435\"\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430\nclass FurnitureFactory(ABC):\n    @abstractmethod\n    def create_chair(self) -&gt; Chair:\n        pass\n\n    @abstractmethod\n    def create_sofa(self) -&gt; Sofa:\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438\nclass VictorianFurnitureFactory(FurnitureFactory):\n    def create_chair(self) -&gt; Chair:\n        return VictorianChair()\n\n    def create_sofa(self) -&gt; Sofa:\n        return VictorianSofa()\n\nclass ModernFurnitureFactory(FurnitureFactory):\n    def create_chair(self) -&gt; Chair:\n        return ModernChair()\n\n    def create_sofa(self) -&gt; Sofa:\n        return ModernSofa()\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\ndef furnish_room(factory: FurnitureFactory):\n    chair = factory.create_chair()\n    sofa = factory.create_sofa()\n\n    print(chair.sit_on())\n    print(sofa.lie_on())\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nprint(\"\u0412\u0438\u043a\u0442\u043e\u0440\u0438\u0430\u043d\u0441\u043a\u0430\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u0430:\")\nfurnish_room(VictorianFurnitureFactory())\n\nprint(\"\\n\u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u0430:\")\nfurnish_room(ModernFurnitureFactory())\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0420\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b\nclass Document(ABC):\n    @abstractmethod\n    def open(self):\n        pass\n\nclass Spreadsheet(ABC):\n    @abstractmethod\n    def calculate(self):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0434\u043b\u044f Microsoft Office\nclass WordDocument(Document):\n    def open(self):\n        return \"Opening Word document\"\n\nclass ExcelSpreadsheet(Spreadsheet):\n    def calculate(self):\n        return \"Calculating in Excel\"\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0434\u043b\u044f Google Docs\nclass GoogleDoc(Document):\n    def open(self):\n        return \"Opening Google Doc\"\n\nclass GoogleSheet(Spreadsheet):\n    def calculate(self):\n        return \"Calculating in Google Sheets\"\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430\nclass OfficeSuiteFactory(ABC):\n    @abstractmethod\n    def create_document(self) -&gt; Document:\n        pass\n\n    @abstractmethod\n    def create_spreadsheet(self) -&gt; Spreadsheet:\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438\nclass MicrosoftOfficeFactory(OfficeSuiteFactory):\n    def create_document(self) -&gt; Document:\n        return WordDocument()\n\n    def create_spreadsheet(self) -&gt; Spreadsheet:\n        return ExcelSpreadsheet()\n\nclass GoogleDocsFactory(OfficeSuiteFactory):\n    def create_document(self) -&gt; Document:\n        return GoogleDoc()\n\n    def create_spreadsheet(self) -&gt; Spreadsheet:\n        return GoogleSheet()\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\ndef work_with_documents(factory: OfficeSuiteFactory):\n    doc = factory.create_document()\n    sheet = factory.create_spreadsheet()\n\n    print(doc.open())\n    print(sheet.calculate())\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nprint(\"Microsoft Office:\")\nwork_with_documents(MicrosoftOfficeFactory())\n\nprint(\"\\nGoogle Docs:\")\nwork_with_documents(GoogleDocsFactory())\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/abstract_factory/#_5","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Abstract Factory \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043a\u043e\u0433\u0434\u0430 \u0432\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f, \u043a\u043e\u043c\u043f\u043e\u043d\u0443\u044e\u0442\u0441\u044f \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b, \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432. \u041e\u043d \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0431\u043e\u0440 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/","title":"Adapter (\u0410\u0434\u0430\u043f\u0442\u0435\u0440)","text":"<p>Adapter (\u0410\u0434\u0430\u043f\u0442\u0435\u0440) - \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0441 \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435. \u041e\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u043c\u043e\u0441\u0442 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c.</p> <p>\u0410\u0434\u0430\u043f\u0442\u0435\u0440 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430:</p> <ul> <li>\u041d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441, \u043d\u043e \u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u043c\u0443</li> <li>\u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0430\u0435\u0442 \u0441 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438 \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b</li> <li>\u041d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#_1","title":"\u0422\u0438\u043f\u044b \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u043e\u0432","text":"<ol> <li>\u0410\u0434\u0430\u043f\u0442\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435)</li> <li>\u0410\u0434\u0430\u043f\u0442\u0435\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e)</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#1","title":"1. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430","text":"<pre><code># \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\nclass Target:\n    def request(self) -&gt; str:\n        return \"\u0426\u0435\u043b\u0435\u0432\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\"\n\n# \u041a\u043b\u0430\u0441\u0441 \u0441 \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c\nclass Adaptee:\n    def specific_request(self) -&gt; str:\n        return \".\u0435\u0438\u043d\u0435\u0434\u0435\u043f\u043e\u0432 \u0435\u043e\u043d\u043e\u043c\u0438\u0441 \u044f\u0430\u043c\u0430\u0414\"\n\n# \u0410\u0434\u0430\u043f\u0442\u0435\u0440, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0449\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Adaptee \u0432 Target\nclass Adapter(Target):\n    def __init__(self, adaptee: Adaptee) -&gt; None:\n        self.adaptee = adaptee\n\n    def request(self) -&gt; str:\n        return f\"\u0410\u0434\u0430\u043f\u0442\u0435\u0440: (\u041f\u0415\u0420\u0415\u0412\u0415\u0414\u0415\u041d\u041e) {self.adaptee.specific_request()[::-1]}\"\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\ndef client_code(target: Target) -&gt; None:\n    print(target.request(), end=\"\")\n\nif __name__ == \"__main__\":\n    print(\"\u041a\u043b\u0438\u0435\u043d\u0442: \u042f \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0441 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 Target:\")\n    target = Target()\n    client_code(target)\n    print(\"\\n\")\n\n    adaptee = Adaptee()\n    print(\"\u041a\u043b\u0438\u0435\u043d\u0442: \u0423 Adaptee \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u042f \u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e:\")\n    print(f\"Adaptee: {adaptee.specific_request()}\", end=\"\\n\\n\")\n\n    print(\"\u041a\u043b\u0438\u0435\u043d\u0442: \u041d\u043e \u044f \u043c\u043e\u0433\u0443 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0438\u043c \u0447\u0435\u0440\u0435\u0437 Adapter:\")\n    adapter = Adapter(adaptee)\n    client_code(adapter)\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u041a\u043b\u0438\u0435\u043d\u0442: \u042f \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0441 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 Target:\n\u0426\u0435\u043b\u0435\u0432\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\n\n\u041a\u043b\u0438\u0435\u043d\u0442: \u0423 Adaptee \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u042f \u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e:\nAdaptee: .\u0435\u0438\u043d\u0435\u0434\u0435\u043f\u043e\u0432 \u0435\u043e\u043d\u043e\u043c\u0438\u0441 \u044f\u0430\u043c\u0430\u0414\n\n\u041a\u043b\u0438\u0435\u043d\u0442: \u041d\u043e \u044f \u043c\u043e\u0433\u0443 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0438\u043c \u0447\u0435\u0440\u0435\u0437 Adapter:\n\u0410\u0434\u0430\u043f\u0442\u0435\u0440: (\u041f\u0415\u0420\u0415\u0412\u0415\u0414\u0415\u041d\u041e) \u0414\u0430\u043c\u0438\u044f \u0441\u0438\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#2","title":"2. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438","text":"<pre><code># \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439\nclass PaymentProcessor:\n    def pay(self, amount: float) -&gt; None:\n        pass\n\n# \u0421\u0442\u0430\u0440\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441 \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c\nclass LegacyPaymentSystem:\n    def make_payment(self, dollars: int, cents: int) -&gt; None:\n        print(f\"\u041e\u043f\u043b\u0430\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 Legacy \u0441\u0438\u0441\u0442\u0435\u043c\u0443: {dollars} \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0438 {cents} \u0446\u0435\u043d\u0442\u043e\u0432\")\n\n# \u0410\u0434\u0430\u043f\u0442\u0435\u0440 \u0434\u043b\u044f \u0441\u0442\u0430\u0440\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\nclass LegacyPaymentAdapter(PaymentProcessor):\n    def __init__(self, legacy_system: LegacyPaymentSystem):\n        self.legacy_system = legacy_system\n\n    def pay(self, amount: float) -&gt; None:\n        dollars = int(amount)\n        cents = int((amount - dollars) * 100)\n        self.legacy_system.make_payment(dollars, cents)\n\n# \u041d\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u0430\u044f \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u043c\nclass ModernPaymentSystem(PaymentProcessor):\n    def pay(self, amount: float) -&gt; None:\n        print(f\"\u041e\u043f\u043b\u0430\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 Modern \u0441\u0438\u0441\u0442\u0435\u043c\u0443: {amount:.2f} USD\")\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\ndef process_payment(processor: PaymentProcessor, amount: float):\n    processor.pay(amount)\n\nif __name__ == \"__main__\":\n    modern_system = ModernPaymentSystem()\n    legacy_system = LegacyPaymentSystem()\n    legacy_adapter = LegacyPaymentAdapter(legacy_system)\n\n    print(\"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Modern \u0441\u0438\u0441\u0442\u0435\u043c\u0443:\")\n    process_payment(modern_system, 123.45)\n\n    print(\"\\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Legacy \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0447\u0435\u0440\u0435\u0437 \u0430\u0434\u0430\u043f\u0442\u0435\u0440:\")\n    process_payment(legacy_adapter, 123.45)\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Modern \u0441\u0438\u0441\u0442\u0435\u043c\u0443:\n\u041e\u043f\u043b\u0430\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 Modern \u0441\u0438\u0441\u0442\u0435\u043c\u0443: 123.45 USD\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Legacy \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0447\u0435\u0440\u0435\u0437 \u0430\u0434\u0430\u043f\u0442\u0435\u0440:\n\u041e\u043f\u043b\u0430\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 Legacy \u0441\u0438\u0441\u0442\u0435\u043c\u0443: 123 \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0438 45 \u0446\u0435\u043d\u0442\u043e\u0432\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#3","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 (\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435)","text":"<pre><code># \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\nclass MediaPlayer:\n    def play(self, audio_type: str, file_name: str) -&gt; None:\n        pass\n\n# \u0410\u0434\u0430\u043f\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 1\nclass AdvancedMediaPlayer:\n    def play_vlc(self, file_name: str) -&gt; None:\n        print(f\"\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 VLC \u0444\u0430\u0439\u043b\u0430: {file_name}\")\n\n    def play_mp4(self, file_name: str) -&gt; None:\n        print(f\"\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 MP4 \u0444\u0430\u0439\u043b\u0430: {file_name}\")\n\n# \u0410\u0434\u0430\u043f\u0442\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435)\nclass MediaAdapter(MediaPlayer, AdvancedMediaPlayer):\n    def play(self, audio_type: str, file_name: str) -&gt; None:\n        if audio_type == \"vlc\":\n            self.play_vlc(file_name)\n        elif audio_type == \"mp4\":\n            self.play_mp4(file_name)\n        else:\n            raise ValueError(f\"\u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442: {audio_type}\")\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MediaPlayer\nclass AudioPlayer(MediaPlayer):\n    def play(self, audio_type: str, file_name: str) -&gt; None:\n        if audio_type == \"mp3\":\n            print(f\"\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 MP3 \u0444\u0430\u0439\u043b\u0430: {file_name}\")\n        elif audio_type in [\"vlc\", \"mp4\"]:\n            adapter = MediaAdapter()\n            adapter.play(audio_type, file_name)\n        else:\n            raise ValueError(f\"\u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442: {audio_type}\")\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\nif __name__ == \"__main__\":\n    player = AudioPlayer()\n\n    player.play(\"mp3\", \"song.mp3\")\n    player.play(\"mp4\", \"movie.mp4\")\n    player.play(\"vlc\", \"series.vlc\")\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 MP3 \u0444\u0430\u0439\u043b\u0430: song.mp3\n\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 MP4 \u0444\u0430\u0439\u043b\u0430: movie.mp4\n\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 VLC \u0444\u0430\u0439\u043b\u0430: series.vlc\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u044b</li> <li>\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0438 \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438/\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u044b \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430)</li> </ul> <p>\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:</p> <ul> <li>\u0423\u0441\u043b\u043e\u0436\u043d\u044f\u0435\u0442 \u043a\u043e\u0434 \u0438\u0437-\u0437\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432</li> <li>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0438 \u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/adapter/#adapter_1","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Adapter?","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441, \u043d\u043e \u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u0430\u0448\u0438\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u043c</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438 \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043d\u043e impractical \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432</li> </ul> <p>Adapter \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u043f\u0440\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 legacy-\u043a\u043e\u0434\u0430 \u0438\u043b\u0438 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438, \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u0430\u0448\u0438\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/apriori_algorithm/","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c Apriori","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c Apriori - \u044d\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u0432 \u043d\u0430\u0431\u043e\u0440\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0432 1994 \u0433\u043e\u0434\u0443. \u041e\u043d \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u0440\u044b\u043d\u043e\u0447\u043d\u044b\u0445 \u043a\u043e\u0440\u0437\u0438\u043d (<code>market basket analysis</code>) \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0435\u043c\u044b\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432.</p>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f (\u0430\u043d\u0430\u043b\u0438\u0437 \u0440\u044b\u043d\u043e\u0447\u043d\u044b\u0445 \u043a\u043e\u0440\u0437\u0438\u043d, \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0442\u043e\u0432\u0430\u0440\u043e\u0432)</li> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043a\u0430\u043a \u0432 Amazon)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0439 \u0441\u0438\u043c\u043f\u0442\u043e\u043c\u043e\u0432 \u0438 \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439)</li> <li>\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 (\u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0441\u0430\u0439\u0442\u0430\u0445)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0445\u0435\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)</li> </ol>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u0438\u044f","text":"<ol> <li> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 (Support) - \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445    $ Support(X)$ = (\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \\(X\\)) / (\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439)</p> </li> <li> <p>\u0414\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e\u0441\u0442\u044c (Confidence) - \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \\(Y\\) \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \\(X\\)    $ Confidence(X \u2192 Y) = Support(X \u222a Y) / Support(X) $</p> </li> <li> <p>\u041b\u0438\u0444\u0442 (Lift) - \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0449\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \\(Y\\) \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \\(X\\), \u0447\u0435\u043c \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f    $ Lift(X \u2192 Y) = Confidence(X \u2192 Y) / Support(Y) $</p> </li> </ol>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#apriori_1","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 Apriori","text":"<ol> <li>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (itemsets) \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430</li> <li>\u041e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u043e\u0432, \u043d\u0435 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435</li> <li>\u041f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0443\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b</li> </ol>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Python","text":"","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043d\u0443\u043b\u044f","text":"<pre><code>from itertools import combinations\n\ndef apriori(transactions, min_support):\n    # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    items = set()\n    for transaction in transactions:\n        for item in transaction:\n            items.add(frozenset([item]))\n    items = list(items)\n\n    # \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u043e\u0445\u043e\u0434 - \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    item_counts = {}\n    for item in items:\n        for transaction in transactions:\n            if item.issubset(transaction):\n                item_counts[item] = item_counts.get(item, 0) + 1\n\n    # \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435\n    num_transactions = len(transactions)\n    frequent_items = {}\n    for item, count in item_counts.items():\n        support = count / num_transactions\n        if support &gt;= min_support:\n            frequent_items[item] = support\n\n    # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n    k = 2\n    current_frequent_items = frequent_items\n    all_frequent_items = {}\n    all_frequent_items.update(current_frequent_items)\n\n    while current_frequent_items:\n        # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432\n        itemsets = list(current_frequent_items.keys())\n        candidates = set()\n        for i in range(len(itemsets)):\n            for j in range(i+1, len(itemsets)):\n                candidate = itemsets[i].union(itemsets[j])\n                if len(candidate) == k:\n                    candidates.add(candidate)\n\n        # \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432\n        candidate_counts = {}\n        for candidate in candidates:\n            for transaction in transactions:\n                if candidate.issubset(transaction):\n                    candidate_counts[candidate] = candidate_counts.get(candidate, 0) + 1\n\n        # \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432\n        current_frequent_items = {}\n        for candidate, count in candidate_counts.items():\n            support = count / num_transactions\n            if support &gt;= min_support:\n                current_frequent_items[candidate] = support\n\n        all_frequent_items.update(current_frequent_items)\n        k += 1\n\n    return all_frequent_items\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ntransactions = [\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435'],\n    ['\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u0445\u043b\u0435\u0431', '\u043a\u043e\u043b\u0430'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435']\n]\n\n# \u0417\u0430\u043f\u0443\u0441\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\nmin_support = 0.5\nfrequent_itemsets = apriori(transactions, min_support)\n\n# \u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\nprint(\"\u0427\u0430\u0441\u0442\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435\", min_support)\nfor itemset, support in frequent_itemsets.items():\n    print(f\"{tuple(itemset)}: {support:.2f}\")\n</code></pre>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#2-mlxtend","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 mlxtend","text":"<p>\u0411\u043e\u043b\u0435\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443:</p> <pre><code>from mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\nimport pandas as pd\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndataset = [\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435'],\n    ['\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u0445\u043b\u0435\u0431', '\u043a\u043e\u043b\u0430'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435']\n]\n\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nte = TransactionEncoder()\nte_ary = te.fit(dataset).transform(dataset)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\n\n# \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432\nfrequent_itemsets = apriori(df, min_support=0.5, use_colnames=True)\nprint(\"\u0427\u0430\u0441\u0442\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b:\")\nprint(frequent_itemsets)\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b\nrules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.7)\nprint(\"\\n\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430:\")\nprint(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])\n</code></pre>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","text":"<pre><code>import matplotlib.pyplot as plt\nimport networkx as nx\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0430\nG = nx.DiGraph()\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0437\u043b\u043e\u0432 \u0438 \u0440\u0435\u0431\u0435\u0440\nfor _, rule in rules.iterrows():\n    G.add_edge(', '.join(rule['antecedents']),\n               ', '.join(rule['consequents']),\n               weight=rule['lift'])\n\n# \u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0430\nplt.figure(figsize=(10, 6))\npos = nx.spring_layout(G, k=0.5)\nnx.draw(G, pos, with_labels=True,\n        node_size=3000, node_color='skyblue',\n        font_size=10, font_weight='bold',\n        edge_color='gray', width=[d['weight']*0.5 for (u, v, d) in G.edges(data=True)])\nedge_labels = {(u, v): f\"Lift: {d['weight']:.2f}\" for u, v, d in G.edges(data=True)}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\nplt.title(\"\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 (\u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u0442\u0440\u0435\u043b\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438\u0444\u0442\u0443)\")\nplt.show()\n</code></pre>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#apriori_2","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 Apriori","text":"<ol> <li>Hash-based itemset counting - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0445\u0435\u0448-\u0442\u0430\u0431\u043b\u0438\u0446 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430</li> <li>Transaction reduction - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b</li> <li>Partitioning - \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432 \u043f\u0430\u043c\u044f\u0442\u0438</li> <li>Sampling - \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u044b\u0431\u043e\u0440\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430</li> </ol>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/apriori_algorithm/#_3","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430","text":"<ol> <li>\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u044b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c</li> <li>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432</li> <li>\u0412\u044b\u0441\u043e\u043a\u0438\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0427\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a \u0432\u044b\u0431\u043e\u0440\u0443 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438</li> </ol> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c Apriori \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u0436\u043d\u043e\u0439 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0442\u0435\u0445\u043d\u0438\u043a\u043e\u0439 \u0432 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b, \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a FP-Growth.</p>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b"]},{"location":"md/astar/","title":"A* (A-star)","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c A* (\u043f\u0440\u043e\u0438\u0437\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u0430\u043a \"\u0410-\u0437\u0432\u0435\u0437\u0434\u0430\") - \u044d\u0442\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0443\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0442\u043e\u0447\u043a\u0430\u043c\u0438 \u043d\u0430 \u0433\u0440\u0430\u0444\u0435. \u041e\u043d \u0441\u043e\u0447\u0435\u0442\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0414\u0435\u0439\u043a\u0441\u0442\u0440\u044b (\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0435\u0433\u043e \u043f\u0443\u0442\u0438) \u0438 \u0436\u0430\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u043c\u0443 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044e (\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d).</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/astar/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 (\u043f\u043e\u0438\u0441\u043a \u043f\u0443\u0442\u0438 \u0434\u043b\u044f NPC \u0432 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f\u0445 \u0438\u043b\u0438 RPG)</li> <li>\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430 (\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u0440\u043e\u0431\u043e\u0442\u043e\u0432)</li> <li>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0441\u043a\u043b\u0430\u0434\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432 GPS-\u043d\u0430\u0432\u0438\u0433\u0430\u0442\u043e\u0440\u0430\u0445)</li> <li>\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0445 \u0434\u0440\u043e\u043d\u0430\u0445)</li> <li>\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 (\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432 GPS-\u043d\u0430\u0432\u0438\u0433\u0430\u0442\u043e\u0440\u0430\u0445)</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/astar/#a","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b A*","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c A* \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0443\u0442\u0438 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0434\u043e \u0446\u0435\u043b\u0438. \u041e\u043d \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \\(f(n)\\) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \\(n\\):</p> \\[ f(n) = g(n) + h(n) \\] <p>\u0413\u0434\u0435:</p> <ul> <li>\\(g(n)\\) - \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0443\u0442\u0438 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b n</li> <li>\\(h(n)\\) - \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u044b n \u0434\u043e \u0446\u0435\u043b\u0438</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/astar/#a-python","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 A* \u043d\u0430 Python","text":"<p>\u0412\u043e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 A* \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0443\u0442\u0438 \u043d\u0430 \u0441\u0435\u0442\u043a\u0435:</p> <pre><code>import heapq\nfrom typing import List, Tuple, Dict, Optional\n\nclass Node:\n    def __init__(self, position: Tuple[int, int], parent: Optional['Node'] = None):\n        self.position = position\n        self.parent = parent\n        self.g = 0  # \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u0438\n        self.h = 0  # \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e \u0446\u0435\u043b\u0438\n        self.f = 0  # \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c: f = g + h\n\n    def __eq__(self, other):\n        return self.position == other.position\n\n    def __lt__(self, other):\n        return self.f &lt; other.f\n\n    def __repr__(self):\n        return f\"Node({self.position}, g={self.g}, h={self.h}, f={self.f})\"\n\ndef heuristic(a: Tuple[int, int], b: Tuple[int, int]) -&gt; float:\n    \"\"\"\u041c\u0430\u043d\u0445\u044d\u0442\u0442\u0435\u043d\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0447\u043a\u0430\u043c\u0438 a \u0438 b\"\"\"\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef a_star(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -&gt; List[Tuple[int, int]]:\n    \"\"\"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c A* \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0443\u0442\u0438 \u043d\u0430 \u0441\u0435\u0442\u043a\u0435\n\n    Args:\n        grid: 2D \u0441\u043f\u0438\u0441\u043e\u043a, \u0433\u0434\u0435 0 - \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430, 1 - \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\n        start: \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 (\u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u0442\u043e\u043b\u0431\u0435\u0446)\n        end: \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 (\u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u0442\u043e\u043b\u0431\u0435\u0446)\n\n    Returns:\n        \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043f\u0443\u0442\u0438 \u043e\u0442 start \u0434\u043e end\n    \"\"\"\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0443\u0437\u043b\u044b\n    start_node = Node(start)\n    end_node = Node(end)\n\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043a\u0438\n    open_list = []\n    closed_list = []\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n    heapq.heappush(open_list, start_node)\n\n    # \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f (\u0432\u0432\u0435\u0440\u0445, \u0432\u043d\u0438\u0437, \u0432\u043b\u0435\u0432\u043e, \u0432\u043f\u0440\u0430\u0432\u043e)\n    movements = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    # \u041f\u043e\u043a\u0430 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u043f\u0443\u0441\u0442\n    while open_list:\n        # \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0443\u0437\u0435\u043b \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0439 f\n        current_node = heapq.heappop(open_list)\n\n        # \u0415\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u0446\u0435\u043b\u0438\n        if current_node == end_node:\n            path = []\n            current = current_node\n            while current is not None:\n                path.append(current.position)\n                current = current.parent\n            return path[::-1]  # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043f\u0443\u0442\u044c \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430\n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0443\u0437\u0435\u043b \u0432 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n        closed_list.append(current_node)\n\n        # \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u0443\u0437\u043b\u044b\n        for movement in movements:\n            node_position = (\n                current_node.position[0] + movement[0],\n                current_node.position[1] + movement[1]\n            )\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0441\u043e\u0441\u0435\u0434\u043d\u044f\u044f \u043a\u043b\u0435\u0442\u043a\u0430 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u0441\u0435\u0442\u043a\u0438\n            if (node_position[0] &lt; 0 or node_position[0] &gt;= len(grid) or\n                node_position[1] &lt; 0 or node_position[1] &gt;= len(grid[0])):\n                continue\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043a\u043b\u0435\u0442\u043a\u0430 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0430 (\u043d\u0435 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435)\n            if grid[node_position[0]][node_position[1]] != 0:\n                continue\n\n            # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0443\u0437\u0435\u043b\n            new_node = Node(node_position, current_node)\n\n            # \u0415\u0441\u043b\u0438 \u0443\u0437\u0435\u043b \u0443\u0436\u0435 \u0432 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c\n            if new_node in closed_list:\n                continue\n\n            # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438\n            new_node.g = current_node.g + 1\n            new_node.h = heuristic(new_node.position, end_node.position)\n            new_node.f = new_node.g + new_node.h\n\n            # \u0415\u0441\u043b\u0438 \u043d\u043e\u0432\u044b\u0439 \u0443\u0437\u0435\u043b \u0443\u0436\u0435 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u0441 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c\n            if any(open_node for open_node in open_list if open_node == new_node and open_node.g &lt;= new_node.g):\n                continue\n\n            # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0443\u0437\u0435\u043b \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n            heapq.heappush(open_list, new_node)\n\n    # \u0415\u0441\u043b\u0438 \u043f\u0443\u0442\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\n    return []\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nif __name__ == \"__main__\":\n    # 0 - \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430, 1 - \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\n    grid = [\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n\n    start = (0, 0)\n    end = (7, 6)\n\n    path = a_star(grid, start, end)\n    print(\"\u041d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c:\")\n    for position in path:\n        print(position)\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/astar/#_2","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0438","text":"<p>\u0414\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u043d\u0430 \u0441\u0435\u0442\u043a\u0435:</p> <pre><code>def print_grid_with_path(grid, path):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if (i, j) == path[0]:\n                print(\"S\", end=\" \")  # Start\n            elif (i, j) == path[-1]:\n                print(\"E\", end=\" \")  # End\n            elif (i, j) in path:\n                print(\"*\", end=\" \")  # Path\n            else:\n                print(grid[i][j], end=\" \")\n        print()\n\n# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nprint(\"\\n\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0438:\")\nprint_grid_with_path(grid, path)\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/astar/#_3","title":"\u0412\u0430\u0436\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f","text":"<ol> <li> <p>\u042d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 (\u043d\u0435 \u043f\u0435\u0440\u0435\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u0446\u0435\u043b\u0438) \u0434\u043b\u044f \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0430\u043d\u0445\u044d\u0442\u0442\u0435\u043d\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0441\u0435\u0442\u043e\u043a \u0441 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\u043c \u0432 4 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445.</p> </li> <li> <p>\u0414\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c, \u0432\u043a\u043b\u044e\u0447\u0438\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a <code>movements</code> \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0432 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0427\u0435\u0431\u044b\u0448\u0435\u0432\u0430).</p> </li> <li> <p>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0432\u043e\u0438\u0447\u043d\u0443\u044e \u043a\u0443\u0447\u0443, \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435).</p> </li> <li> <p>\u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0435\u0442\u043a\u0438 - \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u0435\u0442\u043e\u043a, \u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a IDA* \u0438\u043b\u0438 Jump Point Search.</p> </li> </ol> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c A* \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0438\u0433\u0440\u0430\u0445, \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0435 \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0441\u0432\u043e\u0435\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0443\u0442\u0438.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/automatic_differentiation/","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Automatic Differentiation, AD)","text":"<p>\u0412 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0439 \u0430\u043b\u0433\u0435\u0431\u0440\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0442\u0430\u043a\u0436\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0435 \u043a\u0430\u043a \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439.</p> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2014 \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u0438 \u0432\u0430\u0436\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0442\u0430\u043a \u0438 \u0438\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u2014 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0438\u043b\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0435\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f.</p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0438 \u0447\u0438\u0441\u0442\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c, \u043d\u0438 \u0447\u0438\u0441\u0442\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0435\u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438. \u041e\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044f\u0445, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \"\u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439\" \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e, \u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u044b\u043c\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442.</p> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u0442\u043e\u043c \u0444\u0430\u043a\u0442\u0435, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u043e\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435, \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c, \u0441\u0438\u043d\u0443\u0441 \u0438 \u043a\u043e\u0441\u0438\u043d\u0443\u0441. \u041f\u0440\u0438 \u043c\u043d\u043e\u0433\u043e\u043a\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043a \u044d\u0442\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0447\u0430\u0441\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u044f \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0447\u0435\u043c \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435.</p>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a \u0432 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 TensorFlow \u0438 PyTorch)</li> <li>\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0440\u0430\u0441\u0447\u0451\u0442 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0430\u044d\u0440\u043e\u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0435)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f \u0440\u0438\u0441\u043a\u043e\u0432 \u0438 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439)</li> <li>\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0442\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f)</li> <li>\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (\u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0445\u0438\u043c\u0438\u0438, \u0431\u0438\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0434\u0440.)</li> </ol>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#ad","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b AD","text":"<ol> <li> <p>\u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u041b\u044e\u0431\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435, \u0442\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0442.\u0434.), \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> </li> <li> <p>\u041f\u0440\u0430\u0432\u0438\u043b\u043e \u0446\u0435\u043f\u0438 (chain rule): \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> </li> <li> <p>\u0414\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0440\u0435\u0436\u0438\u043c\u0430:</p> </li> <li>\u041f\u0440\u044f\u043c\u043e\u0439 \u0440\u0435\u0436\u0438\u043c (forward mode)</li> <li>\u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c (reverse mode)</li> </ol>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 Python","text":"","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#1-autograd","title":"1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>autograd</code>","text":"<pre><code>import autograd.numpy as np\nfrom autograd import grad\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e\ndef f(x):\n    return x**2 + 3*x + 5\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439\ndf_dx = grad(f)\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u0432 \u0442\u043e\u0447\u043a\u0435 x=2.0\nx = 2.0\nprint(f\"f({x}) = {f(x)}\")  # f(2.0) = 15.0\nprint(f\"f'({x}) = {df_dx(x)}\")  # f'(2.0) = 7.0\n</code></pre>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#2-pytorch","title":"2. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 PyTorch","text":"<pre><code>import torch\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u043d\u0437\u043e\u0440 \u0441 require_grad=True \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\nx = torch.tensor(2.0, requires_grad=True)\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e\ny = x**2 + 3*x + 5\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\ny.backward()\n\nprint(f\"f({x.item()}) = {y.item()}\")  # f(2.0) = 15.0\nprint(f\"f'({x.item()}) = {x.grad.item()}\")  # f'(2.0) = 7.0\n</code></pre>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#3-tensorflow","title":"3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 TensorFlow","text":"<pre><code>import tensorflow as tf\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\nx = tf.Variable(2.0)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c GradientTape \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\nwith tf.GradientTape() as tape:\n    y = x**2 + 3*x + 5\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\ndy_dx = tape.gradient(y, x)\n\nprint(f\"f({x.numpy()}) = {y.numpy()}\")  # f(2.0) = 15.0\nprint(f\"f'({x.numpy()}) = {dy_dx.numpy()}\")  # f'(2.0) = 7.0\n</code></pre>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#4-ad","title":"4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e AD (\u043f\u0440\u044f\u043c\u043e\u0439 \u0440\u0435\u0436\u0438\u043c)","text":"<pre><code>class Var:\n    def __init__(self, value, derivative=0):\n        self.value = value\n        self.derivative = derivative  # \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0430\u044f \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443\n\n    def __add__(self, other):\n        other = other if isinstance(other, Var) else Var(other, 0)\n        return Var(self.value + other.value, self.derivative + other.derivative)\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Var) else Var(other, 0)\n        return Var(self.value * other.value,\n                  self.derivative * other.value + self.value * other.derivative)\n\n    def __pow__(self, power):\n        return Var(self.value ** power,\n                  power * self.value ** (power - 1) * self.derivative)\n\n    def __repr__(self):\n        return f\"Var(value={self.value}, derivative={self.derivative})\"\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nx = Var(2.0, derivative=1.0)  # \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0430\u044f \u043f\u043e \u0441\u0435\u0431\u0435 \u0440\u0430\u0432\u043d\u0430 1\ny = x**2 + 3*x + 5\n\nprint(y)  # Var(value=15.0, derivative=7.0)\n</code></pre>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#5","title":"5. \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043d\u043e\u0433\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","text":"<pre><code>from autograd import grad\nimport autograd.numpy as np\n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0432\u0443\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndef f(x, y):\n    return x**2 * y + np.sin(y)\n\n# \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443 (df/dx)\ndf_dx = grad(f, 0)\n\n# \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u043f\u043e \u0432\u0442\u043e\u0440\u043e\u043c\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0443 (df/dy)\ndf_dy = grad(f, 1)\n\nx, y = 2.0, 3.0\nprint(f\"f({x}, {y}) = {f(x, y)}\")  # f(2.0, 3.0) = 11.141120008\nprint(f\"\u2202f/\u2202x = {df_dx(x, y)}\")  # \u2202f/\u2202x = 12.0\nprint(f\"\u2202f/\u2202y = {df_dy(x, y)}\")  # \u2202f/\u2202y = 3.989992497\n</code></pre>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/automatic_differentiation/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ol> <li>\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f: \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 (\u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a \u0438 \u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438)</li> <li>\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435: \u041e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445</li> <li>\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0427\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c</li> <li>\u0424\u0438\u043d\u0430\u043d\u0441\u044b: \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \"\u0433\u0440\u0435\u043a\u043e\u0432\" \u0432 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432</li> </ol> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0447\u0435\u0442\u0430\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e (\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c) \u0438 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e (\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c) \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u043d\u0435\u0437\u0430\u043c\u0435\u043d\u0438\u043c\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0438 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u0445.</p>","tags":["\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"]},{"location":"md/batch_updates/","title":"Batch Updates","text":"<p>Batch Updates (\u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f) - \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443 (\u043f\u0430\u043a\u0435\u0442) \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434, \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u0448\u0438\u0440\u043e\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445.</p>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u043c \u0441\u043f\u0443\u0441\u043a\u0435)  </li> <li>\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u0433\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438)  </li> <li>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (\u043c\u0430\u0441\u0441\u043e\u0432\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0432\u0435\u043d\u0442\u0430\u0440\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u043e\u043a \u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436)  </li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432 \u0440\u0430\u0437\u043e\u043c)  </li> <li>IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438)  </li> </ol>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#batch-updates_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Batch Updates","text":"<ol> <li>\u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0412\u043c\u0435\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043c\u0435\u043b\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043e\u043d\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u0438\u043d \u043f\u0430\u043a\u0435\u0442.</li> <li>\u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432: \u0423\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c (\u0431\u0430\u0437\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u0438\u0441\u043a\u0443, \u0441\u0435\u0442\u0438).</li> <li>\u0410\u0442\u043e\u043c\u0430\u0440\u043d\u043e\u0441\u0442\u044c: \u041f\u0430\u043a\u0435\u0442 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0435\u0434\u0438\u043d\u0430\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f.</li> <li>\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u044d\u0448\u0430, \u0431\u0443\u0444\u0435\u0440\u043e\u0432 \u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.</li> </ol>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#_2","title":"\u041e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#1","title":"1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u044f\u044e\u0442 \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0435 \u0432\u0441\u0442\u0430\u0432\u043a\u0438, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</p>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#2","title":"2. \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043f\u0443\u0441\u043a\u0430 (mini-batch gradient descent).</p>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#3-","title":"3. \u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 API-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</p>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#4","title":"4. \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0417\u0430\u043f\u0438\u0441\u044c \u043b\u043e\u0433\u043e\u0432 \u043d\u0435 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443, \u0430 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438.</p>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#5","title":"5. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","text":"<p>\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439.</p>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python","text":"","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#1-sqlite","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0432 SQLite","text":"<pre><code>import sqlite3\nimport time\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\nconn = sqlite3.connect(':memory:')\nconn.execute('CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)')\n\n# \u0421\u043f\u043e\u0441\u043e\u0431 1: \u041c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u0439 - \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438\nstart = time.time()\nfor i in range(1000):\n    conn.execute(f\"INSERT INTO users (name, age) VALUES ('User{i}', {i%100})\")\nconn.commit()\nprint(f\"\u041f\u043e \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438: {time.time() - start:.4f} \u0441\u0435\u043a\")\n\n# \u0421\u043f\u043e\u0441\u043e\u0431 2: \u0411\u044b\u0441\u0442\u0440\u044b\u0439 - \u043f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430\nconn.execute('DELETE FROM users')  # \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443\nstart = time.time()\ndata = [(f'User{i}', i%100) for i in range(1000)]\nconn.executemany(\"INSERT INTO users (name, age) VALUES (?, ?)\", data)\nconn.commit()\nprint(f\"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430: {time.time() - start:.4f} \u0441\u0435\u043a\")\n\nconn.close()\n</code></pre>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#2-pytorch","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 (PyTorch)","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nX = torch.randn(10000, 10)  # 10000 samples, 10 features\ny = torch.randint(0, 2, (10000,)).float()  # Binary classification\n\ndataset = TensorDataset(X, y)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c DataLoader \u0441 \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439\nbatch_size = 64\nloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n\n# \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\nmodel = nn.Sequential(\n    nn.Linear(10, 5),\n    nn.ReLU(),\n    nn.Linear(5, 1),\n    nn.Sigmoid()\n)\n\ncriterion = nn.BCELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438\nfor epoch in range(5):\n    for batch_X, batch_y in loader:\n        optimizer.zero_grad()\n        outputs = model(batch_X)\n        loss = criterion(outputs.squeeze(), batch_y)\n        loss.backward()\n        optimizer.step()\n    print(f'Epoch {epoch+1}, Loss: {loss.item():.4f}')\n</code></pre>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#3-http-aiohttp","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e aiohttp","text":"<pre><code>import aiohttp\nimport asyncio\n\nasync def fetch(session, url):\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def batch_fetch(urls, batch_size=10):\n    connector = aiohttp.TCPConnector(limit=batch_size)\n    async with aiohttp.ClientSession(connector=connector) as session:\n        tasks = [fetch(session, url) for url in urls]\n        return await asyncio.gather(*tasks)\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nurls = ['https://httpbin.org/get?id=' + str(i) for i in range(50)]\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b\nloop = asyncio.get_event_loop()\nresults = loop.run_until_complete(batch_fetch(urls))\nprint(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e {len(results)} \u043e\u0442\u0432\u0435\u0442\u043e\u0432\")\n</code></pre>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#4-opencv","title":"\u041f\u0440\u0438\u043c\u0435\u0440 4: \u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 OpenCV","text":"<pre><code>import cv2\nimport numpy as np\nimport os\nimport time\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\nos.makedirs('test_images', exist_ok=True)\nfor i in range(100):\n    img = np.random.randint(0, 256, (100, 100, 3), dtype=np.uint8)\n    cv2.imwrite(f'test_images/img_{i}.png', img)\n\n# \u0421\u043f\u043e\u0441\u043e\u0431 1: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443\nstart = time.time()\nfor i in range(100):\n    img = cv2.imread(f'test_images/img_{i}.png')\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    cv2.imwrite(f'test_images/gray_{i}.png', gray)\nprint(f\"\u041f\u043e \u043e\u0434\u043d\u043e\u043c\u0443: {time.time() - start:.4f} \u0441\u0435\u043a\")\n\n# \u0421\u043f\u043e\u0441\u043e\u0431 2: \u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430\nstart = time.time()\nimages = [cv2.imread(f'test_images/img_{i}.png') for i in range(100)]\ngray_images = [cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) for img in images]\nfor i, gray in enumerate(gray_images):\n    cv2.imwrite(f'test_images/batch_gray_{i}.png', gray)\nprint(f\"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430: {time.time() - start:.4f} \u0441\u0435\u043a\")\n</code></pre>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/batch_updates/#batch-updates_2","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f Batch Updates","text":"<ol> <li>\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430: \u0421\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0430\u043a\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043d\u0435\u0445\u0432\u0430\u0442\u043a\u0443 \u043f\u0430\u043c\u044f\u0442\u0438, \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 - \u043d\u0435 \u0434\u0430\u0441\u0442 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430.</li> <li>\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0430\u043a\u0435\u0442\u043e\u0432.</li> <li>\u0411\u0443\u0444\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f: \u041d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0431\u0443\u0444\u0435\u0440\u0435 \u0434\u043e \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430.</li> <li>\u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0441\u0442\u044c: \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ol>","tags":["IoT-\u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/bidirectional_a_star/","title":"\u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a","text":"<p>\u0414\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0435\u0433\u043e \u043f\u0443\u0442\u0438 \u0432 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0435. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0434\u0432\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e: \u043e\u0434\u0438\u043d \u2014 \u0432 \u043f\u0440\u044f\u043c\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b, \u0434\u0440\u0443\u0433\u043e\u0439 \u2014 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0442 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b. \u041f\u043e\u0438\u0441\u043a \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0438 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u043e\u0438\u0441\u043a\u0430, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0430. \u0412 \u0442\u0430\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0431\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u0441 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u043c \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u044f \\(b\\), \u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u0446\u0435\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \\(d\\). \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u043e\u0438\u0441\u043a\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \\(O(bd/2)\\), \u0438 \u0441\u0443\u043c\u043c\u0430 \u044d\u0442\u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u043f\u043e\u0438\u0441\u043a \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \\(O(bd)\\), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u0446\u0435\u043b\u0438.</p> <p>\u042d\u043d\u0434\u0440\u044e \u0413\u043e\u043b\u0434\u0431\u0435\u0440\u0433 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0414\u0435\u0439\u043a\u0441\u0442\u0440\u044b.</p> <p>\u0412 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435 \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430, \u043a\u0430\u043a \u0438 \u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435 A*, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043e \u0446\u0435\u043b\u0438 (\u0432 \u043f\u0440\u044f\u043c\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0435) \u0438\u043b\u0438 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 (\u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0435).</p> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0438 \u0432\u043d\u0435\u0434\u0440\u0451\u043d \u0410\u0439\u0440\u043e\u0439 \u041f\u043e\u043b\u043e\u043c. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 A*, \u0434\u0435\u0440\u0435\u0432\u044c\u044f \u043f\u043e\u0438\u0441\u043a\u0430, \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0438\u0437 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u0443\u0437\u043b\u043e\u0432, \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.</p> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c BHFFA \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 de Champeaux \u0443\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u0442 \u044d\u0442\u043e\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a. \u0420\u0435\u0448\u0435\u043d\u0438\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 A* \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a\u0438, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u043c. \u042d\u0442\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0436\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u043e \u0434\u043b\u044f \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 BHFFA2, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0434\u0435 \u0428\u0430\u043c\u043f\u043e.</p> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c BHFFA2, \u043f\u043e\u043c\u0438\u043c\u043e \u043f\u0440\u043e\u0447\u0435\u0433\u043e, \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c BHFFA.</p>","tags":["\u0413\u0440\u0430\u0444\u044b","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430"]},{"location":"md/bidirectional_a_star/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0413\u0440\u0430\u0444\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u0445 \u0442\u0438\u043f\u0430 Google Maps \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438)</li> <li>\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u0430\u0445)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u043f\u043e\u0438\u0441\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044f\u0445 \u0414\u041d\u041a \u0438\u043b\u0438 \u0431\u0435\u043b\u043a\u043e\u0432)</li> <li>\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445)</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0438 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0432 NLP)</li> </ol>","tags":["\u0413\u0440\u0430\u0444\u044b","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430"]},{"location":"md/bidirectional_a_star/#_3","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"python<pre><code>from __future__ import annotations\n\nimport time\nfrom math import sqrt\n\n# (1)!\nHEURISTIC = 0\n\ngrid = [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0],  # (2)!\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0, 0],\n    [1, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0],\n]\n\ndelta = [[-1, 0], [0, -1], [1, 0], [0, 1]]  # (3)!\n\nTPosition = tuple[int, int]\n\n\nclass Node:\n    def __init__(\n        self,\n        pos_x: int,\n        pos_y: int,\n        goal_x: int,\n        goal_y: int,\n        g_cost: int,\n        parent: Node | None,\n    ) -&gt; None:\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.pos = (pos_y, pos_x)\n        self.goal_x = goal_x\n        self.goal_y = goal_y\n        self.g_cost = g_cost\n        self.parent = parent\n        self.h_cost = self.calculate_heuristic()\n        self.f_cost = self.g_cost + self.h_cost\n\n    def calculate_heuristic(self) -&gt; float:\n        # (4)!\n        dy = self.pos_x - self.goal_x\n        dx = self.pos_y - self.goal_y\n        if HEURISTIC == 1:\n            return abs(dx) + abs(dy)\n        else:\n            return sqrt(dy**2 + dx**2)\n\n    def __lt__(self, other: Node) -&gt; bool:\n        return self.f_cost &lt; other.f_cost\n\n\nclass AStar:\n    def __init__(self, start: TPosition, goal: TPosition):\n        self.start = Node(start[1], start[0], goal[1], goal[0], 0, None)\n        self.target = Node(goal[1], goal[0], goal[1], goal[0], 99999, None)\n\n        self.open_nodes = [self.start]\n        self.closed_nodes: list[Node] = []\n\n        self.reached = False\n\n    def search(self) -&gt; list[TPosition]:\n        while self.open_nodes:\n            # (5)!\n            self.open_nodes.sort()\n            current_node = self.open_nodes.pop(0)\n\n            if current_node.pos == self.target.pos:\n                return self.retrace_path(current_node)\n\n            self.closed_nodes.append(current_node)\n            successors = self.get_successors(current_node)\n\n            for child_node in successors:\n                if child_node in self.closed_nodes:\n                    continue\n\n                if child_node not in self.open_nodes:\n                    self.open_nodes.append(child_node)\n                else:\n                    # (6)!\n                    better_node = self.open_nodes.pop(self.open_nodes.index(child_node))\n\n                    if child_node.g_cost &lt; better_node.g_cost:\n                        self.open_nodes.append(child_node)\n                    else:\n                        self.open_nodes.append(better_node)\n\n        return [self.start.pos]\n\n    def get_successors(self, parent: Node) -&gt; list[Node]:\n        # (7)!\n        successors = []\n        for action in delta:\n            pos_x = parent.pos_x + action[1]\n            pos_y = parent.pos_y + action[0]\n            if not (0 &lt;= pos_x &lt;= len(grid[0]) - 1 and 0 &lt;= pos_y &lt;= len(grid) - 1):\n                continue\n\n            if grid[pos_y][pos_x] != 0:\n                continue\n\n            successors.append(\n                Node(\n                    pos_x,\n                    pos_y,\n                    self.target.pos_y,\n                    self.target.pos_x,\n                    parent.g_cost + 1,\n                    parent,\n                )\n            )\n        return successors\n\n    def retrace_path(self, node: Node | None) -&gt; list[TPosition]:\n        # (8)!\n        current_node = node\n        path = []\n        while current_node is not None:\n            path.append((current_node.pos_y, current_node.pos_x))\n            current_node = current_node.parent\n        path.reverse()\n        return path\n\n\nclass BidirectionalAStar:\n    def __init__(self, start: TPosition, goal: TPosition) -&gt; None:\n        self.fwd_astar = AStar(start, goal)\n        self.bwd_astar = AStar(goal, start)\n        self.reached = False\n\n    def search(self) -&gt; list[TPosition]:\n        while self.fwd_astar.open_nodes or self.bwd_astar.open_nodes:\n            self.fwd_astar.open_nodes.sort()\n            self.bwd_astar.open_nodes.sort()\n            current_fwd_node = self.fwd_astar.open_nodes.pop(0)\n            current_bwd_node = self.bwd_astar.open_nodes.pop(0)\n\n            if current_bwd_node.pos == current_fwd_node.pos:\n                return self.retrace_bidirectional_path(\n                    current_fwd_node, current_bwd_node\n                )\n\n            self.fwd_astar.closed_nodes.append(current_fwd_node)\n            self.bwd_astar.closed_nodes.append(current_bwd_node)\n\n            self.fwd_astar.target = current_bwd_node\n            self.bwd_astar.target = current_fwd_node\n\n            successors = {\n                self.fwd_astar: self.fwd_astar.get_successors(current_fwd_node),\n                self.bwd_astar: self.bwd_astar.get_successors(current_bwd_node),\n            }\n\n            for astar in [self.fwd_astar, self.bwd_astar]:\n                for child_node in successors[astar]:\n                    if child_node in astar.closed_nodes:\n                        continue\n\n                    if child_node not in astar.open_nodes:\n                        astar.open_nodes.append(child_node)\n                    else:\n                        # (9)!\n                        better_node = astar.open_nodes.pop(\n                            astar.open_nodes.index(child_node)\n                        )\n\n                        if child_node.g_cost &lt; better_node.g_cost:\n                            astar.open_nodes.append(child_node)\n                        else:\n                            astar.open_nodes.append(better_node)\n\n        return [self.fwd_astar.start.pos]\n\n    def retrace_bidirectional_path(\n        self, fwd_node: Node, bwd_node: Node\n    ) -&gt; list[TPosition]:\n        fwd_path = self.fwd_astar.retrace_path(fwd_node)\n        bwd_path = self.bwd_astar.retrace_path(bwd_node)\n        bwd_path.pop()\n        bwd_path.reverse()\n        path = fwd_path + bwd_path\n        return path\n</code></pre> <ol> <li> <p><code>1</code> \u0434\u043b\u044f <code>manhattan</code>, <code>0</code> \u0434\u043b\u044f <code>euclidean</code></p> </li> <li> <p><code>0</code> - \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043f\u0443\u0442\u044c, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a <code>1</code> - \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u044f</p> </li> <li> <p>\u0412\u0432\u0435\u0440\u0445, \u0432\u043b\u0435\u0432\u043e, \u0432\u043d\u0438\u0437, \u0432\u043f\u0440\u0430\u0432\u043e</p> </li> <li> <p>\u042d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u043b\u044f <code>A*</code></p> </li> <li> <p>\u041e\u0442\u043a\u0440\u044b\u0442\u044b\u0435 \u0443\u0437\u043b\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>lt</code></p> </li> <li> <p>\u0418\u0437\u0432\u043b\u0435\u043a\u0438\u0442\u0435 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0443\u0442\u044c</p> </li> <li> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (\u043a\u0430\u043a \u0432 \u0441\u0435\u0442\u043a\u0435, \u0442\u0430\u043a \u0438 \u0432 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445)</p> </li> <li> <p>\u041f\u0440\u043e\u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u043f\u0443\u0442\u044c \u043e\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043a \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\u043c \u0432\u043f\u043b\u043e\u0442\u044c \u0434\u043e \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0443\u0437\u043b\u0430</p> </li> <li> <p>\u0418\u0437\u0432\u043b\u0435\u043a\u0438\u0442\u0435 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0443\u0442\u044c</p> </li> </ol>","tags":["\u0413\u0440\u0430\u0444\u044b","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430"]},{"location":"md/bridge/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Bridge (\u041c\u043e\u0441\u0442)","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Bridge (\u041c\u043e\u0441\u0442) - \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0430 \u0434\u0432\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 - \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f","text":"<p>\u041c\u043e\u0441\u0442 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0435\u0439, \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 (\u0438\u043b\u0438 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e \u043a\u043b\u0430\u0441\u0441\u043e\u0432) \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#bridge_1","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Bridge?","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0430\u0441\u0441 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0432 \u0434\u0432\u0443\u0445 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u044f\u0445 (\u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#_2","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430","text":"<pre><code>           \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f\n          /          \\\nRefinedAbstractionA   RefinedAbstractionB\n         |             |\n    \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f      \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n       /    \\\nConcreteImplementationA ConcreteImplementationB\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u0424\u0438\u0433\u0443\u0440\u044b \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0438\u0445 \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f (Implementation)\nclass Renderer(ABC):\n    @abstractmethod\n    def render_circle(self, radius):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 (Concrete Implementations)\nclass VectorRenderer(Renderer):\n    def render_circle(self, radius):\n        print(f\"Drawing a circle of radius {radius} using vector graphics\")\n\nclass RasterRenderer(Renderer):\n    def render_circle(self, radius):\n        print(f\"Drawing a circle of radius {radius} using pixels\")\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f (Abstraction)\nclass Shape:\n    def __init__(self, renderer):\n        self.renderer = renderer\n\n    def draw(self): pass\n    def resize(self, factor): pass\n\n# \u0423\u0442\u043e\u0447\u043d\u0435\u043d\u043d\u0430\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f (Refined Abstraction)\nclass Circle(Shape):\n    def __init__(self, renderer, radius):\n        super().__init__(renderer)\n        self.radius = radius\n\n    def draw(self):\n        self.renderer.render_circle(self.radius)\n\n    def resize(self, factor):\n        self.radius *= factor\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\nif __name__ == \"__main__\":\n    raster = RasterRenderer()\n    vector = VectorRenderer()\n\n    circle1 = Circle(raster, 5)\n    circle1.draw()\n    circle1.resize(2)\n    circle1.draw()\n\n    circle2 = Circle(vector, 10)\n    circle2.draw()\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>Drawing a circle of radius 5 using pixels\nDrawing a circle of radius 10 using pixels\nDrawing a circle of radius 10 using vector graphics\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043f\u0443\u043b\u044c\u0442\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f (\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430)\nclass Device(ABC):\n    @property\n    @abstractmethod\n    def is_enabled(self):\n        pass\n\n    @abstractmethod\n    def enable(self):\n        pass\n\n    @abstractmethod\n    def disable(self):\n        pass\n\n    @abstractmethod\n    def get_volume(self):\n        pass\n\n    @abstractmethod\n    def set_volume(self, percent):\n        pass\n\n    @abstractmethod\n    def get_channel(self):\n        pass\n\n    @abstractmethod\n    def set_channel(self, channel):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\nclass TV(Device):\n    def __init__(self):\n        self._on = False\n        self._volume = 50\n        self._channel = 1\n\n    @property\n    def is_enabled(self):\n        return self._on\n\n    def enable(self):\n        self._on = True\n\n    def disable(self):\n        self._on = False\n\n    def get_volume(self):\n        return self._volume\n\n    def set_volume(self, percent):\n        self._volume = percent\n\n    def get_channel(self):\n        return self._channel\n\n    def set_channel(self, channel):\n        self._channel = channel\n\nclass Radio(Device):\n    def __init__(self):\n        self._on = False\n        self._volume = 30\n        self._channel = 101.5\n\n    @property\n    def is_enabled(self):\n        return self._on\n\n    def enable(self):\n        self._on = True\n\n    def disable(self):\n        self._on = False\n\n    def get_volume(self):\n        return self._volume\n\n    def set_volume(self, percent):\n        self._volume = percent\n\n    def get_channel(self):\n        return self._channel\n\n    def set_channel(self, channel):\n        self._channel = channel\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f (\u043f\u0443\u043b\u044c\u0442\u044b)\nclass Remote:\n    def __init__(self, device: Device):\n        self._device = device\n\n    def toggle_power(self):\n        if self._device.is_enabled:\n            self._device.disable()\n        else:\n            self._device.enable()\n\n    def volume_down(self):\n        self._device.set_volume(self._device.get_volume() - 10)\n\n    def volume_up(self):\n        self._device.set_volume(self._device.get_volume() + 10)\n\n    def channel_down(self):\n        self._device.set_channel(self._device.get_channel() - 1)\n\n    def channel_up(self):\n        self._device.set_channel(self._device.get_channel() + 1)\n\n# \u0423\u0442\u043e\u0447\u043d\u0435\u043d\u043d\u0430\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f (\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u043b\u044c\u0442)\nclass AdvancedRemote(Remote):\n    def mute(self):\n        self._device.set_volume(0)\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\nif __name__ == \"__main__\":\n    tv = TV()\n    remote = Remote(tv)\n    remote.toggle_power()\n    remote.volume_up()\n    remote.channel_up()\n    print(f\"TV: channel={tv.get_channel()}, volume={tv.get_volume()}\")\n\n    radio = Radio()\n    advanced_remote = AdvancedRemote(radio)\n    advanced_remote.toggle_power()\n    advanced_remote.mute()\n    print(f\"Radio: channel={radio.get_channel()}, volume={radio.get_volume()}\")\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>TV: channel=2, volume=60\nRadio: channel=101.5, volume=0\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#bridge_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 Bridge","text":"<ul> <li>\u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0445 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e</li> <li>\u0423\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432 (\u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439)</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043a\u0440\u044b\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/bridge/#_3","title":"\u041e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432","text":"<ul> <li>Adapter \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u043c\u0438, \u0430 Bridge \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0437\u0430\u0440\u0430\u043d\u0435\u0435</li> <li>Abstract Factory \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Bridge \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439</li> <li>Strategy \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 Bridge, \u043d\u043e \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0430 Bridge - \u043d\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435</li> </ul> <p>Bridge \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u043e\u0441\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043f\u0440\u0438 \u0438\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Builder (\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c)","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Builder (\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c) - \u044d\u0442\u043e \u043f\u043e\u0440\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u043e. \u041e\u043d \u043e\u0442\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0442 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u0447\u0442\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#builder_1","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Builder?","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435)</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u043e\u0442 \u0435\u0433\u043e \u0447\u0430\u0441\u0442\u0435\u0439</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430\u0434 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#builder_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Builder","text":"<ol> <li>Product - \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442</li> <li>Builder - \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u0435\u0439 Product</li> <li>ConcreteBuilder - \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Builder, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0438 Product</li> <li>Director - \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0448\u0430\u0433\u043e\u0432 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f (\u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0445)</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#1-builder","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Builder","text":"<pre><code># Product - \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0441\u0442\u0440\u043e\u0438\u043c\nclass Pizza:\n    def __init__(self):\n        self.dough = None\n        self.sauce = None\n        self.topping = None\n\n    def __str__(self):\n        return f\"\u041f\u0438\u0446\u0446\u0430 \u0441 \u0442\u0435\u0441\u0442\u043e\u043c: {self.dough}, \u0441\u043e\u0443\u0441\u043e\u043c: {self.sauce} \u0438 \u043d\u0430\u0447\u0438\u043d\u043a\u043e\u0439: {self.topping}\"\n\n# Abstract Builder\nclass PizzaBuilder:\n    def __init__(self):\n        self.pizza = Pizza()\n\n    def set_dough(self, dough):\n        self.pizza.dough = dough\n\n    def set_sauce(self, sauce):\n        self.pizza.sauce = sauce\n\n    def set_topping(self, topping):\n        self.pizza.topping = topping\n\n    def get_pizza(self):\n        return self.pizza\n\n# Concrete Builder\nclass MargheritaBuilder(PizzaBuilder):\n    def build_dough(self):\n        self.set_dough(\"\u0442\u043e\u043d\u043a\u043e\u0435\")\n\n    def build_sauce(self):\n        self.set_sauce(\"\u0442\u043e\u043c\u0430\u0442\u043d\u044b\u0439\")\n\n    def build_topping(self):\n        self.set_topping(\"\u043c\u043e\u0446\u0430\u0440\u0435\u043b\u043b\u0430 \u0438 \u0431\u0430\u0437\u0438\u043b\u0438\u043a\")\n\n# Director\nclass Waiter:\n    def __init__(self):\n        self.builder = None\n\n    def construct_pizza(self, builder):\n        self.builder = builder\n        self.builder.build_dough()\n        self.builder.build_sauce()\n        self.builder.build_topping()\n\n    def get_pizza(self):\n        return self.builder.get_pizza()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nwaiter = Waiter()\nmargherita_builder = MargheritaBuilder()\nwaiter.construct_pizza(margherita_builder)\npizza = waiter.get_pizza()\nprint(pizza)  # \u041f\u0438\u0446\u0446\u0430 \u0441 \u0442\u0435\u0441\u0442\u043e\u043c: \u0442\u043e\u043d\u043a\u043e\u0435, \u0441\u043e\u0443\u0441\u043e\u043c: \u0442\u043e\u043c\u0430\u0442\u043d\u044b\u0439 \u0438 \u043d\u0430\u0447\u0438\u043d\u043a\u043e\u0439: \u043c\u043e\u0446\u0430\u0440\u0435\u043b\u043b\u0430 \u0438 \u0431\u0430\u0437\u0438\u043b\u0438\u043a\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#2-builder-director","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Builder (\u0431\u0435\u0437 Director)","text":"<pre><code>class Computer:\n    def __init__(self):\n        self.cpu = None\n        self.ram = None\n        self.storage = None\n\n    def __str__(self):\n        return f\"Computer: CPU={self.cpu}, RAM={self.ram}, Storage={self.storage}\"\n\nclass ComputerBuilder:\n    def __init__(self):\n        self.computer = Computer()\n\n    def add_cpu(self, cpu):\n        self.computer.cpu = cpu\n        return self  # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c self \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0432\u044b\u0437\u043e\u0432\u043e\u0432\n\n    def add_ram(self, ram):\n        self.computer.ram = ram\n        return self\n\n    def add_storage(self, storage):\n        self.computer.storage = storage\n        return self\n\n    def build(self):\n        return self.computer\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nbuilder = ComputerBuilder()\ncomputer = builder.add_cpu(\"Intel i7\").add_ram(\"16GB\").add_storage(\"512GB SSD\").build()\nprint(computer)  # Computer: CPU=Intel i7, RAM=16GB, Storage=512GB SSD\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#3-builder","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: Builder \u0441 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","text":"<pre><code>class User:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n        self.phone = None\n        self.address = None\n\n    def __str__(self):\n        return f\"User: {self.username}, email: {self.email}, phone: {self.phone}, address: {self.address}\"\n\nclass UserBuilder:\n    def __init__(self, username, email):\n        self.user = User(username, email)\n\n    def set_phone(self, phone):\n        self.user.phone = phone\n        return self\n\n    def set_address(self, address):\n        self.user.address = address\n        return self\n\n    def build(self):\n        return self.user\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nuser1 = UserBuilder(\"john_doe\", \"john@example.com\").build()\nprint(user1)  # User: john_doe, email: john@example.com, phone: None, address: None\n\nuser2 = UserBuilder(\"jane_doe\", \"jane@example.com\").set_phone(\"123456789\").build()\nprint(user2)  # User: jane_doe, email: jane@example.com, phone: 123456789, address: None\n\nuser3 = UserBuilder(\"bob_smith\", \"bob@example.com\").set_phone(\"987654321\").set_address(\"123 Main St\").build()\nprint(user3)  # User: bob_smith, email: bob@example.com, phone: 987654321, address: 123 Main St\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#builder_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Builder","text":"<ul> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430</li> <li>\u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f</li> <li>\u0414\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u043d\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430\u0434 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u043e</li> <li>\u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/builder/#builder_4","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 Builder","text":"<ul> <li>\u0423\u0441\u043b\u043e\u0436\u043d\u044f\u0435\u0442 \u043a\u043e\u0434 \u0438\u0437-\u0437\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432</li> <li>\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u043c \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> </ul> <p>Builder \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043a\u043e\u0433\u0434\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e\u0448\u0430\u0433\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/check_cycle/","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0433\u0440\u0430\u0444\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0446\u0438\u043a\u043b\u043e\u0432","text":"<p>\u0414\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043b\u0438 \u043e\u043d \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0446\u0438\u043a\u043b. \u0421\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0446\u0438\u043a\u043b\u044b, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d. \u041f\u043e\u0438\u0441\u043a \u0432\u0441\u0435\u0445 \u0446\u0438\u043a\u043b\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.</p>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438 (\u0430\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0441\u0431\u043e\u0440\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Makefile)</li> <li>\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445 \u0438\u043b\u0438 \u0441\u0445\u0435\u043c\u0430\u0445)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u043e\u0432 \u0432 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0445 \u0441\u0445\u0435\u043c\u0430\u0445 \u0438\u043b\u0438 \u0446\u0435\u043f\u043e\u0447\u043a\u0430\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u043e\u043a)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0432 \u043f\u0438\u0449\u0435\u0432\u044b\u0445 \u0446\u0435\u043f\u044f\u0445 \u0438\u043b\u0438 \u043c\u0435\u0442\u0430\u0431\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0443\u0442\u044f\u0445)</li> <li>\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 (\u0430\u043d\u0430\u043b\u0438\u0437 \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0432\u044f\u0437\u0435\u0439 \u0432 \u0433\u0440\u0430\u0444\u0430\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439)</li> </ol>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#_3","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0446\u0438\u043a\u043b\u043e\u0432","text":"<ol> <li>\u041f\u043e\u0438\u0441\u043a \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443 (DFS) \u2013 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434.</li> <li>\u0422\u043e\u043f\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u2013 \u0435\u0441\u043b\u0438 \u0433\u0440\u0430\u0444 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043f\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c.</li> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c Union-Find (Disjoint Set Union, DSU) \u2013 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u043d\u0435\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u0444\u043e\u0432.</li> </ol>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#1-dfs","title":"1. \u041f\u043e\u0438\u0441\u043a \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443 (DFS) \u0434\u043b\u044f \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c:</p> <ul> <li>\u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043a\u0430\u043a <code>\u043f\u043e\u0441\u0435\u0449\u0435\u043d\u043d\u044b\u0435</code> (<code>visited</code>) \u0438 <code>\u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u043c \u043e\u0431\u0445\u043e\u0434\u0435</code> (<code>rec_stack</code>).</li> <li>\u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u043e\u0431\u0445\u043e\u0434\u0435 \u043c\u044b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c \u0432\u0435\u0440\u0448\u0438\u043d\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u0436\u0435 \u0432 <code>rec_stack</code>, \u0437\u043d\u0430\u0447\u0438\u0442, \u0435\u0441\u0442\u044c \u0446\u0438\u043a\u043b.</li> </ul>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<pre><code>from collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.vertices = vertices\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n\n    def is_cyclic_util(self, v, visited, rec_stack):\n        visited[v] = True\n        rec_stack[v] = True\n\n        for neighbor in self.graph[v]:\n            if not visited[neighbor]:\n                if self.is_cyclic_util(neighbor, visited, rec_stack):\n                    return True\n            elif rec_stack[neighbor]:\n                return True\n\n        rec_stack[v] = False\n        return False\n\n    def is_cyclic(self):\n        visited = [False] * self.vertices\n        rec_stack = [False] * self.vertices\n\n        for node in range(self.vertices):\n            if not visited[node]:\n                if self.is_cyclic_util(node, visited, rec_stack):\n                    return True\n        return False\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\ng = Graph(4)\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 0)  # &lt;- \u0446\u0438\u043a\u043b (2 \u2192 0 \u2192 1 \u2192 2)\ng.add_edge(2, 3)\n\nif g.is_cyclic():\n    print(\"\u0413\u0440\u0430\u0444 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u043a\u043b!\")\nelse:\n    print(\"\u0413\u0440\u0430\u0444 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439.\")\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u0413\u0440\u0430\u0444 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u043a\u043b!\n</code></pre>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#2-union-find","title":"2. \u041f\u043e\u0438\u0441\u043a \u0446\u0438\u043a\u043b\u043e\u0432 \u0432 \u043d\u0435\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0435 (Union-Find)","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c:</p> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 Disjoint Set Union (DSU).</li> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043b\u0438 \u0435\u0433\u043e \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043e\u0434\u043d\u043e\u043c\u0443 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443.</li> <li>\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u0446\u0438\u043a\u043b.</li> </ul>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#python_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<pre><code>class UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return True  # \u041d\u0430\u0439\u0434\u0435\u043d \u0446\u0438\u043a\u043b!\n        self.parent[root_x] = root_y\n        return False\n\ndef has_cycle_undirected(edges, num_vertices):\n    uf = UnionFind(num_vertices)\n    for u, v in edges:\n        if uf.union(u, v):\n            return True\n    return False\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nedges = [(0, 1), (1, 2), (2, 3), (3, 0)]  # \u0426\u0438\u043a\u043b: 0 \u2192 1 \u2192 2 \u2192 3 \u2192 0\nif has_cycle_undirected(edges, 4):\n    print(\"\u0413\u0440\u0430\u0444 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u043a\u043b!\")\nelse:\n    print(\"\u0413\u0440\u0430\u0444 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439.\")\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u0413\u0440\u0430\u0444 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u043a\u043b!\n</code></pre>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#3-kahns-algorithm","title":"3. \u0422\u043e\u043f\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 (Kahn\u2019s algorithm)","text":"<p>\u0415\u0441\u043b\u0438 \u0433\u0440\u0430\u0444 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439 (DAG), \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043f\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435 \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u2014 \u0435\u0441\u0442\u044c \u0446\u0438\u043a\u043b.</p>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/check_cycle/#python_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<pre><code>from collections import deque\n\ndef is_cyclic_topological_sort(graph, num_vertices):\n    in_degree = [0] * num_vertices\n    for u in graph:\n        for v in graph[u]:\n            in_degree[v] += 1\n\n    queue = deque([v for v in range(num_vertices) if in_degree[v] == 0])\n    count = 0\n\n    while queue:\n        u = queue.popleft()\n        count += 1\n        for v in graph[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                queue.append(v)\n\n    return count != num_vertices  # \u0415\u0441\u043b\u0438 count &lt; num_vertices \u2192 \u0435\u0441\u0442\u044c \u0446\u0438\u043a\u043b\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\ngraph = {0: [1, 2], 1: [2], 2: [3], 3: [0]}  # \u0426\u0438\u043a\u043b: 0 \u2192 1 \u2192 2 \u2192 3 \u2192 0\nif is_cyclic_topological_sort(graph, 4):\n    print(\"\u0413\u0440\u0430\u0444 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u043a\u043b!\")\nelse:\n    print(\"\u0413\u0440\u0430\u0444 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439.\")\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u0413\u0440\u0430\u0444 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0438\u043a\u043b!\n</code></pre>","tags":["\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438","\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438"]},{"location":"md/composite/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Composite (\u041a\u043e\u043c\u043f\u043e\u043d\u043e\u0432\u0449\u0438\u043a)","text":"<p>Composite - \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0430 \u0437\u0430\u0442\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0435\u0439 \u0442\u0430\u043a, \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f: \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0435\u0434\u0438\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0442\u0430\u043a \u0438 \u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#_1","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u043b\u0438 \u0435\u0434\u0438\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a \u0441 \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438, \u0442\u0430\u043a \u0438 \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#_2","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430","text":"<pre><code>Component (\u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439)\n\u2502\n\u251c\u2500\u2500 Leaf (\u043b\u0438\u0441\u0442)\n\u2514\u2500\u2500 Composite (\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0442)\n    \u251c\u2500\u2500 children: Component[]\n    \u2514\u2500\u2500 operation()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b","text":"<pre><code>from abc import ABC, abstractmethod\nfrom typing import List\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\nclass Graphic(ABC):\n    @abstractmethod\n    def draw(self):\n        pass\n\n    @abstractmethod\n    def add(self, graphic):\n        pass\n\n    @abstractmethod\n    def remove(self, graphic):\n        pass\n\n    @abstractmethod\n    def get_child(self, index):\n        pass\n\n# \u041b\u0438\u0441\u0442 (\u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442)\nclass Circle(Graphic):\n    def draw(self):\n        print(\"\u0420\u0438\u0441\u0443\u0435\u043c \u043a\u0440\u0443\u0433\")\n\n    def add(self, graphic):\n        raise NotImplementedError(\"\u041d\u0435\u043b\u044c\u0437\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043a\u0440\u0443\u0433\u0443\")\n\n    def remove(self, graphic):\n        raise NotImplementedError(\"\u041d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u043a\u0440\u0443\u0433\u0430\")\n\n    def get_child(self, index):\n        raise NotImplementedError(\"\u0423 \u043a\u0440\u0443\u0433\u0430 \u043d\u0435\u0442 \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432\")\n\n# \u041b\u0438\u0441\u0442 (\u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442)\nclass Square(Graphic):\n    def draw(self):\n        print(\"\u0420\u0438\u0441\u0443\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\")\n\n    def add(self, graphic):\n        raise NotImplementedError(\"\u041d\u0435\u043b\u044c\u0437\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0443\")\n\n    def remove(self, graphic):\n        raise NotImplementedError(\"\u041d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430\")\n\n    def get_child(self, index):\n        raise NotImplementedError(\"\u0423 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u043d\u0435\u0442 \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432\")\n\n# \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0442 (\u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442)\nclass CompositeGraphic(Graphic):\n    def __init__(self):\n        self._children: List[Graphic] = []\n\n    def draw(self):\n        print(\"\u0420\u0438\u0441\u0443\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0442\u043d\u0443\u044e \u0433\u0440\u0430\u0444\u0438\u043a\u0443:\")\n        for child in self._children:\n            child.draw()\n\n    def add(self, graphic):\n        self._children.append(graphic)\n\n    def remove(self, graphic):\n        self._children.remove(graphic)\n\n    def get_child(self, index):\n        return self._children[index]\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ncircle1 = Circle()\ncircle2 = Circle()\nsquare = Square()\n\ncomposite1 = CompositeGraphic()\ncomposite1.add(circle1)\ncomposite1.add(circle2)\n\ncomposite2 = CompositeGraphic()\ncomposite2.add(square)\ncomposite2.add(composite1)\n\ncomposite2.draw()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430","text":"<pre><code>from abc import ABC, abstractmethod\nfrom typing import List\n\n# \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\nclass FileSystemComponent(ABC):\n    @abstractmethod\n    def show_info(self):\n        pass\n\n# \u041b\u0438\u0441\u0442 (\u0444\u0430\u0439\u043b)\nclass File(FileSystemComponent):\n    def __init__(self, name, size):\n        self.name = name\n        self.size = size\n\n    def show_info(self):\n        print(f\"\u0424\u0430\u0439\u043b: {self.name}, \u0420\u0430\u0437\u043c\u0435\u0440: {self.size} KB\")\n\n# \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0442 (\u043f\u0430\u043f\u043a\u0430)\nclass Directory(FileSystemComponent):\n    def __init__(self, name):\n        self.name = name\n        self.children: List[FileSystemComponent] = []\n\n    def add(self, component):\n        self.children.append(component)\n\n    def remove(self, component):\n        self.children.remove(component)\n\n    def show_info(self):\n        print(f\"\u041f\u0430\u043f\u043a\u0430: {self.name}\")\n        print(\"\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435:\")\n        for child in self.children:\n            child.show_info()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nfile1 = File(\"document.txt\", 100)\nfile2 = File(\"image.jpg\", 500)\nfile3 = File(\"data.csv\", 50)\n\ndir1 = Directory(\"Documents\")\ndir1.add(file1)\ndir1.add(file2)\n\ndir2 = Directory(\"Project\")\ndir2.add(file3)\ndir2.add(dir1)\n\ndir2.show_info()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u041c\u0435\u043d\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","text":"<pre><code>from abc import ABC, abstractmethod\nfrom typing import List\n\n# \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\nclass MenuComponent(ABC):\n    @abstractmethod\n    def print(self):\n        pass\n\n# \u041b\u0438\u0441\u0442 (\u043f\u0443\u043d\u043a\u0442 \u043c\u0435\u043d\u044e)\nclass MenuItem(MenuComponent):\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def print(self):\n        print(f\"  {self.name} - ${self.price}\")\n\n# \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0442 (\u043c\u0435\u043d\u044e)\nclass Menu(MenuComponent):\n    def __init__(self, name):\n        self.name = name\n        self.children: List[MenuComponent] = []\n\n    def add(self, component):\n        self.children.append(component)\n\n    def print(self):\n        print(f\"\\n{self.name}\")\n        print(\"----------------\")\n        for child in self.children:\n            child.print()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nbreakfast_menu = Menu(\"\u0417\u0430\u0432\u0442\u0440\u0430\u043a\")\nbreakfast_menu.add(MenuItem(\"\u041e\u043c\u043b\u0435\u0442\", 5.99))\nbreakfast_menu.add(MenuItem(\"\u0411\u043b\u0438\u043d\u0447\u0438\u043a\u0438\", 4.50))\n\ndinner_menu = Menu(\"\u041e\u0431\u0435\u0434\")\ndinner_menu.add(MenuItem(\"\u0421\u0442\u0435\u0439\u043a\", 12.99))\ndinner_menu.add(MenuItem(\"\u0421\u0430\u043b\u0430\u0442\", 7.50))\n\ndessert_menu = Menu(\"\u0414\u0435\u0441\u0435\u0440\u0442\u044b\")\ndessert_menu.add(MenuItem(\"\u0427\u0438\u0437\u043a\u0435\u0439\u043a\", 4.99))\ndessert_menu.add(MenuItem(\"\u041c\u043e\u0440\u043e\u0436\u0435\u043d\u043e\u0435\", 3.50))\n\nmain_menu = Menu(\"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e\")\nmain_menu.add(breakfast_menu)\nmain_menu.add(dinner_menu)\nmain_menu.add(dessert_menu)\n\nmain_menu.print()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430</li> <li>\u041e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438</li> </ul> <p>\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:</p> <ul> <li>\u041c\u043e\u0436\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0438\u0437\u0430\u0439\u043d \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043e\u0431\u0449\u0438\u043c (\u0438\u043d\u043e\u0433\u0434\u0430 \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b)</li> <li>\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043b\u0438\u0441\u0442\u044c\u0435\u0432</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/composite/#_4","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Composite \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043a\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438, \u0433\u0434\u0435 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b \u043a\u0430\u043a \u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c, \u0442\u0430\u043a \u0438 \u043a \u0438\u0445 \u0433\u0440\u0443\u043f\u043f\u0430\u043c. \u0412 Python \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u0430 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0445 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/","title":"CQRS (Command Query Responsibility Segregation)","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs","title":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 CQRS?","text":"<p>CQRS (Command Query Responsibility Segregation) - \u044d\u0442\u043e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0447\u0442\u0435\u043d\u0438\u044f (<code>queries</code>) \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 (<code>commands</code>) \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c\u0438, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043d\u0438\u0445 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b CQRS","text":"<ol> <li> <p>\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:</p> </li> <li> <p>\u041a\u043e\u043c\u0430\u043d\u0434\u044b (Commands) - \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (CREATE, UPDATE, DELETE)</p> </li> <li> <p>\u0417\u0430\u043f\u0440\u043e\u0441\u044b (Queries) - \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f (READ)</p> </li> <li> <p>\u0420\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:</p> </li> <li> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u043f\u0438\u0441\u0438 (Write Model) - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0434\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438</p> </li> <li> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0447\u0442\u0435\u043d\u0438\u044f (Read Model) - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</p> </li> <li> <p>\u0420\u0430\u0437\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e):</p> </li> <li>\u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u0447\u0442\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u043d\u044b\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 CQRS","text":"<ul> <li>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u0438 (\u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e)</li> <li>\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u043a\u0430\u0436\u0434\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0448\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443)</li> <li>\u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0432 \u0432\u044b\u0431\u043e\u0440\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449</li> <li>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0434 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438)</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs_3","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 CQRS","text":"<ul> <li>\u0423\u0441\u043b\u043e\u0436\u043d\u0435\u043d\u0438\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b</li> <li>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (eventual consistency)</li> <li>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs-python","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 CQRS \u043d\u0430 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#1","title":"1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449","text":"<pre><code>class UserWriteModel:\n    def __init__(self):\n        self.users = {}\n\n    def create_user(self, user_id, name, email):\n        if user_id in self.users:\n            raise ValueError(\"User already exists\")\n        # \u0421\u043b\u043e\u0436\u043d\u0430\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n        if not email or \"@\" not in email:\n            raise ValueError(\"Invalid email\")\n        self.users[user_id] = {\"name\": name, \"email\": email}\n\n    def update_user(self, user_id, name=None, email=None):\n        if user_id not in self.users:\n            raise ValueError(\"User not found\")\n        if email is not None:\n            if not email or \"@\" not in email:\n                raise ValueError(\"Invalid email\")\n            self.users[user_id][\"email\"] = email\n        if name is not None:\n            self.users[user_id][\"name\"] = name\n\n\nclass UserReadModel:\n    def __init__(self, write_model):\n        self.write_model = write_model\n\n    def get_user(self, user_id):\n        user = self.write_model.users.get(user_id)\n        if not user:\n            return None\n        # \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\n        return {\n            \"user_id\": user_id,\n            \"user_name\": user[\"name\"],\n            \"user_email\": user[\"email\"],\n            \"email_provider\": user[\"email\"].split(\"@\")[-1]\n        }\n\n    def list_users(self):\n        return [\n            {\"user_id\": uid, \"name\": data[\"name\"]}\n            for uid, data in self.write_model.users.items()\n        ]\n\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nwrite_model = UserWriteModel()\nread_model = UserReadModel(write_model)\n\n# \u041a\u043e\u043c\u0430\u043d\u0434\u044b (\u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435)\nwrite_model.create_user(1, \"Alice\", \"alice@example.com\")\nwrite_model.create_user(2, \"Bob\", \"bob@example.org\")\n\n# \u0417\u0430\u043f\u0440\u043e\u0441\u044b (\u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435)\nprint(read_model.get_user(1))  # {'user_id': 1, 'user_name': 'Alice', ...}\nprint(read_model.list_users())  # [{'user_id': 1, 'name': 'Alice'}, ...]\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#2","title":"2. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449 \u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439","text":"<pre><code>from typing import Dict, List\nimport json\n\n# \u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u043f\u0438\u0441\u0438\nclass UserWriteModel:\n    def __init__(self, event_store):\n        self.event_store = event_store\n\n    def create_user(self, user_id, name, email):\n        # \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n        if not email or \"@\" not in email:\n            raise ValueError(\"Invalid email\")\n\n        # \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u0435\n        event = {\n            \"type\": \"UserCreated\",\n            \"data\": {\n                \"user_id\": user_id,\n                \"name\": name,\n                \"email\": email\n            }\n        }\n        self.event_store.publish(event)\n\n    def update_email(self, user_id, new_email):\n        # \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0434\u0435\u0441\u044c \u0431\u044b\u043b\u0430 \u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        event = {\n            \"type\": \"UserEmailUpdated\",\n            \"data\": {\n                \"user_id\": user_id,\n                \"new_email\": new_email\n            }\n        }\n        self.event_store.publish(event)\n\n\n# \u041c\u043e\u0434\u0435\u043b\u044c \u0447\u0442\u0435\u043d\u0438\u044f\nclass UserReadModel:\n    def __init__(self):\n        self.users = {}\n        self.email_provider_stats = {}\n\n    def apply_event(self, event):\n        event_type = event[\"type\"]\n        data = event[\"data\"]\n\n        if event_type == \"UserCreated\":\n            user_id = data[\"user_id\"]\n            self.users[user_id] = {\n                \"name\": data[\"name\"],\n                \"email\": data[\"email\"]\n            }\n            provider = data[\"email\"].split(\"@\")[-1]\n            self.email_provider_stats[provider] = self.email_provider_stats.get(provider, 0) + 1\n\n        elif event_type == \"UserEmailUpdated\":\n            user_id = data[\"user_id\"]\n            old_email = self.users[user_id][\"email\"]\n            old_provider = old_email.split(\"@\")[-1]\n            new_provider = data[\"new_email\"].split(\"@\")[-1]\n\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n            self.users[user_id][\"email\"] = data[\"new_email\"]\n\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\n            self.email_provider_stats[old_provider] -= 1\n            if self.email_provider_stats[old_provider] == 0:\n                del self.email_provider_stats[old_provider]\n            self.email_provider_stats[new_provider] = self.email_provider_stats.get(new_provider, 0) + 1\n\n    def get_user(self, user_id):\n        user = self.users.get(user_id)\n        if not user:\n            return None\n        return {\n            \"user_id\": user_id,\n            \"name\": user[\"name\"],\n            \"email\": user[\"email\"],\n            \"email_provider\": user[\"email\"].split(\"@\")[-1]\n        }\n\n    def get_email_providers_stats(self):\n        return self.email_provider_stats\n\n\n# \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439\nclass EventStore:\n    def __init__(self):\n        self.events = []\n        self.subscribers = []\n\n    def publish(self, event):\n        self.events.append(event)\n        for subscriber in self.subscribers:\n            subscriber.apply_event(event)\n\n    def subscribe(self, subscriber):\n        self.subscribers.append(subscriber)\n        # \u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a\u0430\n        for event in self.events:\n            subscriber.apply_event(event)\n\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nevent_store = EventStore()\nwrite_model = UserWriteModel(event_store)\nread_model = UserReadModel()\nevent_store.subscribe(read_model)\n\n# \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b\nwrite_model.create_user(1, \"Alice\", \"alice@example.com\")\nwrite_model.create_user(2, \"Bob\", \"bob@example.org\")\nwrite_model.create_user(3, \"Charlie\", \"charlie@example.com\")\n\n# \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c email\nwrite_model.update_email(1, \"alice@newdomain.com\")\n\n# \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b\nprint(read_model.get_user(1))\n# {'user_id': 1, 'name': 'Alice', 'email': 'alice@newdomain.com', 'email_provider': 'newdomain.com'}\n\nprint(read_model.get_email_providers_stats())\n# {'example.org': 1, 'example.com': 1, 'newdomain.com': 1}\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#3","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0445 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code># \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c:\n# - PostgreSQL \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 (\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c)\n# - MongoDB \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f (\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c)\n\nimport psycopg2\nfrom pymongo import MongoClient\nfrom datetime import datetime\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\npg_conn = psycopg2.connect(\"dbname=write_db user=postgres\")\nmongo_client = MongoClient(\"mongodb://localhost:27017/\")\nread_db = mongo_client[\"read_db\"]\n\nclass UserCommandHandler:\n    def __init__(self, pg_conn, event_bus):\n        self.pg_conn = pg_conn\n        self.event_bus = event_bus\n\n    def create_user(self, name, email):\n        # \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n        if not email or \"@\" not in email:\n            raise ValueError(\"Invalid email\")\n\n        # \u0417\u0430\u043f\u0438\u0441\u044c \u0432 PostgreSQL\n        with self.pg_conn.cursor() as cur:\n            cur.execute(\n                \"INSERT INTO users (name, email, created_at) VALUES (%s, %s, %s) RETURNING id\",\n                (name, email, datetime.utcnow())\n            )\n            user_id = cur.fetchone()[0]\n            self.pg_conn.commit()\n\n        # \u041f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u0435\n        self.event_bus.publish({\n            \"type\": \"UserCreated\",\n            \"data\": {\n                \"user_id\": user_id,\n                \"name\": name,\n                \"email\": email,\n                \"created_at\": datetime.utcnow().isoformat()\n            }\n        })\n\n        return user_id\n\n\nclass UserReadModel:\n    def __init__(self, mongo_db):\n        self.users = mongo_db[\"users\"]\n\n    def handle_event(self, event):\n        event_type = event[\"type\"]\n        data = event[\"data\"]\n\n        if event_type == \"UserCreated\":\n            # \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0432 MongoDB\n            self.users.insert_one({\n                \"user_id\": data[\"user_id\"],\n                \"name\": data[\"name\"],\n                \"email\": data[\"email\"],\n                \"email_provider\": data[\"email\"].split(\"@\")[-1],\n                \"created_at\": data[\"created_at\"],\n                \"search_terms\": [data[\"name\"].lower(), data[\"email\"].lower()]\n            })\n\n    def get_user(self, user_id):\n        return self.users.find_one({\"user_id\": user_id}, {\"_id\": 0})\n\n    def search_users(self, term):\n        term = term.lower()\n        return list(self.users.find({\n            \"search_terms\": term\n        }, {\"_id\": 0}))\n\n\nclass EventBus:\n    def __init__(self):\n        self.subscribers = []\n\n    def publish(self, event):\n        for subscriber in self.subscribers:\n            subscriber.handle_event(event)\n\n    def subscribe(self, subscriber):\n        self.subscribers.append(subscriber)\n\n\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nevent_bus = EventBus()\ncommand_handler = UserCommandHandler(pg_conn, event_bus)\nread_model = UserReadModel(read_db)\nevent_bus.subscribe(read_model)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (Command)\nuser_id = command_handler.create_user(\"Alice\", \"alice@example.com\")\n\n# \u0427\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 (Query)\nprint(read_model.get_user(user_id))\nprint(read_model.search_users(\"alice\"))\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs_4","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c CQRS?","text":"<p>CQRS \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f:</p> <ul> <li>\u0421\u0438\u0441\u0442\u0435\u043c \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u044c</li> <li>\u0421\u043b\u043e\u0436\u043d\u044b\u0445 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439</li> <li>\u0421\u0438\u0441\u0442\u0435\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0447\u0442\u0435\u043d\u0438\u044e \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f</li> <li>\u0421\u0438\u0441\u0442\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445 event sourcing</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#cqrs_5","title":"\u041a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c CQRS?","text":"<ul> <li>\u041f\u0440\u043e\u0441\u0442\u044b\u0435 CRUD-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li>\u041a\u043e\u0433\u0434\u0430 eventual consistency \u043d\u0435\u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u0430</li> <li>\u0412 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445, \u0433\u0434\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u0430</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/cqrs/#_1","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>CQRS - \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c, \u043d\u043e \u043e\u043d \u0432\u0432\u043e\u0434\u0438\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043e \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u044b\u043c \u0438 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 CQRS, \u043d\u043e \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a:</p> <ul> <li>\u041a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438</li> <li>\u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439</li> <li>\u0411\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438</li> <li>\u041e\u043f\u0442\u0438\u043c\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0438</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/data_transformations/","title":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438","text":"<p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0439 \u044d\u0442\u0430\u043f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041e\u043d\u0438 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u043a \u0432\u0438\u0434\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u0438 \u0447\u0430\u0441\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u044b\u0448\u0430\u044e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u2014 \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430, \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f, \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u044f  </li> <li>\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435 \u2014 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432  </li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b \u2014 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439  </li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 \u2014 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432  </li> <li>\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u2014 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043b\u0430\u0433\u043e\u0432, \u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 </li> </ol>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#_3","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","text":"","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#1","title":"1. \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#z-score-normalization","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f (Z-score normalization)","text":"<pre><code>from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", data)\nprint(\"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", scaled_data)\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\", scaler.mean_)\nprint(\"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f:\", scaler.scale_)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#min-max","title":"Min-Max \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<pre><code>from sklearn.preprocessing import MinMaxScaler\n\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", data)\nprint(\"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", scaled_data)\nprint(\"\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\", scaler.data_min_)\nprint(\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\", scaler.data_max_)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#2","title":"2. \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","text":"","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#one-hot-encoding","title":"One-Hot Encoding","text":"<pre><code>from sklearn.preprocessing import OneHotEncoder\nimport pandas as pd\n\ndata = pd.DataFrame({'color': ['red', 'blue', 'green', 'blue', 'red']})\nencoder = OneHotEncoder(sparse=False)\nencoded_data = encoder.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", data)\nprint(\"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", encoded_data)\nprint(\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:\", encoder.categories_)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#label-encoding","title":"Label Encoding","text":"<pre><code>from sklearn.preprocessing import LabelEncoder\n\ndata = ['cat', 'dog', 'bird', 'dog', 'cat']\nencoder = LabelEncoder()\nencoded_data = encoder.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\", data)\nprint(\"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\", encoded_data)\nprint(\"\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432:\", list(encoder.classes_))\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#3","title":"3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#tf-idf","title":"TF-IDF","text":"<pre><code>from sklearn.feature_extraction.text import TfidfVectorizer\n\ncorpus = [\n    'this is the first document',\n    'this document is the second document',\n    'and this is the third one',\n    'is this the first document'\n]\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\n\nprint(\"\u0421\u043b\u043e\u0432\u0430\u0440\u044c:\", vectorizer.get_feature_names_out())\nprint(\"TF-IDF \u043c\u0430\u0442\u0440\u0438\u0446\u0430:\\n\", X.toarray())\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#4","title":"4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","text":"<pre><code>from sklearn.impute import SimpleImputer\nimport numpy as np\n\ndata = np.array([[1, np.nan, 3], [4, 5, np.nan], [7, 8, 9]])\nimputer = SimpleImputer(strategy='mean')\nimputed_data = imputer.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", data)\nprint(\"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432:\\n\", imputed_data)\nprint(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b:\", imputer.statistics_)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#5","title":"5. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f (\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)","text":"","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#_4","title":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":"<pre><code>import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\ndata = np.array([1, 10, 100, 1000]).reshape(-1, 1)\ntransformer = FunctionTransformer(np.log1p)\ntransformed_data = transformer.transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\", data.flatten())\nprint(\"\u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:\", transformed_data.flatten())\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#-","title":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0411\u043e\u043a\u0441\u0430-\u041a\u043e\u043a\u0441\u0430","text":"<pre><code>from sklearn.preprocessing import PowerTransformer\n\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)\ntransformer = PowerTransformer(method='box-cox', standardize=False)\ntransformed_data = transformer.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\", data.flatten())\nprint(\"\u041f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0411\u043e\u043a\u0441\u0430-\u041a\u043e\u043a\u0441\u0430:\", transformed_data.flatten())\nprint(\"\u041b\u044f\u043c\u0431\u0434\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440:\", transformer.lambdas_)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#6","title":"6. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","text":"<pre><code>from sklearn.preprocessing import PolynomialFeatures\n\ndata = np.array([[1, 2], [3, 4]])\npoly = PolynomialFeatures(degree=2)\npoly_data = poly.fit_transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", data)\nprint(\"\u041f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\\n\", poly_data)\nprint(\"\u0418\u043c\u0435\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\", poly.get_feature_names_out())\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#7","title":"7. \u0414\u0438\u0441\u043a\u0440\u0435\u0442\u0438\u0437\u0430\u0446\u0438\u044f (\u0431\u0438\u043d\u043d\u0438\u043d\u0433)","text":"<pre><code>from sklearn.preprocessing import KBinsDiscretizer\n\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)\nest = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')\nest.fit(data)\ndiscretized = est.transform(data)\n\nprint(\"\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\", data.flatten())\nprint(\"\u041f\u043e\u0441\u043b\u0435 \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u0438\u0437\u0430\u0446\u0438\u0438:\", discretized.flatten())\nprint(\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0431\u0438\u043d\u043e\u0432:\", est.bin_edges_)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#_5","title":"\u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439","text":"<p>\u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e:</p> <pre><code>from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndata = pd.DataFrame({\n    'age': [25, 30, np.nan, 35, 40],\n    'salary': [50000, 60000, 70000, np.nan, 90000],\n    'department': ['IT', 'HR', 'IT', 'Finance', 'HR']\n})\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnumeric_features = ['age', 'salary']\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_features = ['department']\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nprocessed_data = preprocessor.fit_transform(data)\nprint(\"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\\n\", processed_data)\n</code></pre>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/data_transformations/#_6","title":"\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ol> <li> <p>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u041c\u043d\u043e\u0433\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, SVM, k-NN, \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438) \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u043a \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> </li> <li> <p>\u0423\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f: \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c \u0441\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435.</p> </li> <li> <p>\u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c: \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430.</p> </li> <li> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u044e\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.</p> </li> <li> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c: \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, PCA \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> </li> </ol> <p>\u0412\u044b\u0431\u043e\u0440 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u0440\u0438\u0440\u043e\u0434\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u0427\u0430\u0441\u0442\u043e \u043f\u0440\u043e\u0431\u0443\u044e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442 \u0442\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p>","tags":["\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u0437\u0440\u0435\u043d\u0438\u0435","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/decorator/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Decorator (\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440)","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Decorator (\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440) \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u044f \u0438\u0445 \u0432 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \"\u043e\u0431\u0451\u0440\u0442\u043a\u0438\". \u042d\u0442\u043e \u0433\u0438\u0431\u043a\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#decorator_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 Decorator","text":"<ul> <li>\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0430</li> <li>\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e: \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u043e\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438</li> <li>\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#_1","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430","text":"<ul> <li>\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (Component): \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438</li> <li>\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (ConcreteComponent): \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u0451\u0440\u043d\u0443\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438</li> <li>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 (Decorator): \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441</li> <li>\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b (ConcreteDecorators): \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430","text":"<ul> <li>\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c, \u0447\u0435\u043c \u0443 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u0438\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438</li> <li>\u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> <li>\u041c\u043e\u0436\u043d\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#_3","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<ul> <li>\u041c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432</li> <li>\u0422\u0440\u0443\u0434\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432</li> <li>\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0438\u0437-\u0437\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u0451\u0440\u0442\u043e\u043a</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#1","title":"1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\nclass TextComponent(ABC):\n    @abstractmethod\n    def render(self) -&gt; str:\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\nclass PlainText(TextComponent):\n    def __init__(self, text):\n        self._text = text\n\n    def render(self) -&gt; str:\n        return self._text\n\n# \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\nclass TextDecorator(TextComponent):\n    def __init__(self, component: TextComponent):\n        self._component = component\n\n    def render(self) -&gt; str:\n        return self._component.render()\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b\nclass BoldDecorator(TextDecorator):\n    def render(self) -&gt; str:\n        return f\"&lt;b&gt;{self._component.render()}&lt;/b&gt;\"\n\nclass ItalicDecorator(TextDecorator):\n    def render(self) -&gt; str:\n        return f\"&lt;i&gt;{self._component.render()}&lt;/i&gt;\"\n\nclass UnderlineDecorator(TextDecorator):\n    def render(self) -&gt; str:\n        return f\"&lt;u&gt;{self._component.render()}&lt;/u&gt;\"\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ntext = PlainText(\"Hello, World!\")\ndecorated_text = BoldDecorator(ItalicDecorator(UnderlineDecorator(text)))\n\nprint(decorated_text.render())  # &lt;b&gt;&lt;i&gt;&lt;u&gt;Hello, World!&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#2","title":"2. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043a\u043e\u0444\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u043a\u0430\u043c\u0438","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 - \u043d\u0430\u043f\u0438\u0442\u043e\u043a\nclass Beverage(ABC):\n    @abstractmethod\n    def get_description(self) -&gt; str:\n        pass\n\n    @abstractmethod\n    def cost(self) -&gt; float:\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b - \u0432\u0438\u0434\u044b \u043a\u043e\u0444\u0435\nclass Espresso(Beverage):\n    def get_description(self) -&gt; str:\n        return \"Espresso\"\n\n    def cost(self) -&gt; float:\n        return 1.99\n\nclass DarkRoast(Beverage):\n    def get_description(self) -&gt; str:\n        return \"Dark Roast Coffee\"\n\n    def cost(self) -&gt; float:\n        return 0.99\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 - \u0434\u043e\u0431\u0430\u0432\u043a\u0430\nclass CondimentDecorator(Beverage, ABC):\n    def __init__(self, beverage: Beverage):\n        self._beverage = beverage\n\n    @abstractmethod\n    def get_description(self) -&gt; str:\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b - \u0432\u0438\u0434\u044b \u0434\u043e\u0431\u0430\u0432\u043e\u043a\nclass Milk(CondimentDecorator):\n    def get_description(self) -&gt; str:\n        return self._beverage.get_description() + \", Milk\"\n\n    def cost(self) -&gt; float:\n        return self._beverage.cost() + 0.20\n\nclass Mocha(CondimentDecorator):\n    def get_description(self) -&gt; str:\n        return self._beverage.get_description() + \", Mocha\"\n\n    def cost(self) -&gt; float:\n        return self._beverage.cost() + 0.30\n\nclass Whip(CondimentDecorator):\n    def get_description(self) -&gt; str:\n        return self._beverage.get_description() + \", Whip\"\n\n    def cost(self) -&gt; float:\n        return self._beverage.cost() + 0.15\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nbeverage = Espresso()\nprint(f\"{beverage.get_description()} ${beverage.cost()}\")\n\nbeverage2 = DarkRoast()\nbeverage2 = Mocha(beverage2)\nbeverage2 = Mocha(beverage2)\nbeverage2 = Whip(beverage2)\nprint(f\"{beverage2.get_description()} ${beverage2.cost()}\")\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#3-python","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (\u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432 Python)","text":"<p>Python \u0438\u043c\u0435\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439:</p> <pre><code>def make_bold(func):\n    def wrapper(*args, **kwargs):\n        return f\"&lt;b&gt;{func(*args, **kwargs)}&lt;/b&gt;\"\n    return wrapper\n\ndef make_italic(func):\n    def wrapper(*args, **kwargs):\n        return f\"&lt;i&gt;{func(*args, **kwargs)}&lt;/i&gt;\"\n    return wrapper\n\ndef make_underline(func):\n    def wrapper(*args, **kwargs):\n        return f\"&lt;u&gt;{func(*args, **kwargs)}&lt;/u&gt;\"\n    return wrapper\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432\n@make_bold\n@make_italic\n@make_underline\ndef hello(name):\n    return f\"Hello, {name}!\"\n\nprint(hello(\"World\"))  # &lt;b&gt;&lt;i&gt;&lt;u&gt;Hello, World!&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;\n\n# \u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e:\n# hello = make_bold(make_italic(make_underline(hello)))\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/decorator/#decorator_2","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Decorator?","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0438 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0435\u043b\u044c\u0437\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> </ul> <p>Decorator \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445, \u0433\u0434\u0435 \u0432\u0430\u0436\u043d\u043e \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438/\u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0441\u0442\u0438 (\u043a\u043b\u0430\u0441\u0441\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f, \u043d\u043e \u0437\u0430\u043a\u0440\u044b\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438).</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/deep_q_networks/","title":"Deep Q-Networks (DQN)","text":"<p>Deep Q-Networks (DQN) \u2014 \u044d\u0442\u043e \u0433\u0438\u0431\u0440\u0438\u0434 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 Q-learning, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0442\u0430\u043b \u043f\u0440\u043e\u0440\u044b\u0432\u043e\u043c \u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0438 RL \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0437\u0431\u0435\u0440\u0451\u043c \u0435\u0433\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 (\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0438\u0433\u0440\u044b \u0432 Atari, Go \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0438\u0433\u0440\u044b)</li> <li>\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430 (\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u0430\u0445)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u0435\u043c)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)</li> <li>\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 (\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438)</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#1-deep-q-networks-dqn","title":"1. \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Deep Q-Networks (DQN)?","text":"<p>DQN \u2014 \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c (RL), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u0434\u043b\u044f \u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0430\u0446\u0438\u0438 Q-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439).</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#_2","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0438\u0434\u0435\u0438","text":"<ul> <li>$ Q-learning$ \u2192 \u041e\u0446\u0435\u043d\u043a\u0430 \"\u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0438\" \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438:</li> </ul> <p>$$ Q(s, a) = \\mathbb{E}[r + \\gamma \\max_{a'} Q(s', a')] $$</p> <p>\u0433\u0434\u0435:</p> <ul> <li>$ s $ \u2014 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435,</li> <li>$ a $ \u2014 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f),</li> <li>$ r $ \u2014 \u043d\u0430\u0433\u0440\u0430\u0434\u0430 (\u043a\u043b\u0438\u043a, \u043f\u043e\u043a\u0443\u043f\u043a\u0430),</li> <li> <p>$ \\gamma $ \u2014 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0438\u0441\u043a\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> </li> <li> <p>\u041d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u044b Q-values \u2192 \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u043c\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f).</p> </li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#2-dqn","title":"2. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 DQN","text":"","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#_3","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":"<ol> <li>\u0412\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439 \u2192 \u0412\u0435\u043a\u0442\u043e\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f + \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439).</li> <li>\u0421\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u043b\u043e\u0438 \u2192 \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0435 \u0438\u043b\u0438 CNN/LSTM \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0412\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439 \u2192 Q-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435).</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#_4","title":"\u0414\u0432\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>Experience Replay \u2192 \u0411\u0443\u0444\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432 \\((s, a, r, s')\\). \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0434\u0451\u0442 \u043d\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0431\u0430\u0442\u0447\u0430\u0445 \u0438\u0437 \u0431\u0443\u0444\u0435\u0440\u0430, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c\u0438.</li> <li>Target Network \u2192 \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0446\u0435\u043b\u0435\u0432\u044b\u0445 Q-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438).</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#3-dqn","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440 DQN \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439","text":"","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#_5","title":"\u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u043c\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0435\u0433\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#_6","title":"\u0414\u0430\u043d\u043d\u044b\u0435","text":"<ul> <li>\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (State) \u2192 \u042d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f + \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 5 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u043c\u043e\u0432.</li> <li>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 (Action) \u2192 \u0412\u044b\u0431\u043e\u0440 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 10 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438.</li> <li>\u041d\u0430\u0433\u0440\u0430\u0434\u0430 (Reward) \u2192</li> <li>+1 \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043a\u043b\u0438\u043a\u043d\u0443\u043b,</li> <li>+10 \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0434\u043e \u043a\u043e\u043d\u0446\u0430,</li> <li>-0.1 \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043b.</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#pytorch","title":"\u041a\u043e\u0434 \u043d\u0430 PyTorch","text":"<pre><code>import torch\nimport torch.nn as nn\nimport numpy as np\nfrom collections import deque\nimport random\n\nclass DQN(nn.Module):\n    def __init__(self, state_dim, action_dim):\n        super(DQN, self).__init__()\n        self.fc1 = nn.Linear(state_dim, 64)\n        self.fc2 = nn.Linear(64, 64)\n        self.fc3 = nn.Linear(64, action_dim)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        return self.fc3(x)\n\nclass DQNAgent:\n    def __init__(self, state_dim, action_dim):\n        self.model = DQN(state_dim, action_dim)\n        self.target_model = DQN(state_dim, action_dim)\n        self.target_model.load_state_dict(self.model.state_dict())\n        self.optimizer = torch.optim.Adam(self.model.parameters(), lr=0.001)\n        self.memory = deque(maxlen=10000)\n        self.gamma = 0.95\n        self.epsilon = 1.0\n        self.epsilon_min = 0.01\n        self.epsilon_decay = 0.995\n\n    def act(self, state):\n        if np.random.rand() &lt;= self.epsilon:\n            return np.random.randint(0, action_dim)\n        state = torch.FloatTensor(state).unsqueeze(0)\n        q_values = self.model(state)\n        return torch.argmax(q_values).item()\n\n    def remember(self, state, action, reward, next_state, done):\n        self.memory.append((state, action, reward, next_state, done))\n\n    def replay(self, batch_size):\n        if len(self.memory) &lt; batch_size:\n            return\n        batch = random.sample(self.memory, batch_size)\n        states, actions, rewards, next_states, dones = zip(*batch)\n\n        states = torch.FloatTensor(np.array(states))\n        next_states = torch.FloatTensor(np.array(next_states))\n        actions = torch.LongTensor(actions)\n        rewards = torch.FloatTensor(rewards)\n        dones = torch.FloatTensor(dones)\n\n        current_q = self.model(states).gather(1, actions.unsqueeze(1))\n        next_q = self.target_model(next_states).max(1)[0].detach()\n        target_q = rewards + (1 - dones) * self.gamma * next_q\n\n        loss = nn.MSELoss()(current_q.squeeze(), target_q)\n        self.optimizer.zero_grad()\n        loss.backward()\n        self.optimizer.step()\n\n        # Decay epsilon\n        if self.epsilon &gt; self.epsilon_min:\n            self.epsilon *= self.epsilon_decay\n\n    def update_target_model(self):\n        self.target_model.load_state_dict(self.model.state_dict())\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nstate_dim = 100  # \u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\naction_dim = 10  # 10 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\nagent = DQNAgent(state_dim, action_dim)\n\n# \u0426\u0438\u043a\u043b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nfor episode in range(1000):\n    state = np.random.randn(state_dim)  # \u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    for step in range(100):\n        action = agent.act(state)\n        next_state = np.random.randn(state_dim)  # \u041d\u043e\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n        reward = np.random.choice([-0.1, 1, 10])  # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0430\u0434\u0430\n        done = step == 99\n        agent.remember(state, action, reward, next_state, done)\n        state = next_state\n        agent.replay(32)  # \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0431\u0430\u0442\u0447\u0435 \u0438\u0437 32 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432\n    if episode % 10 == 0:\n        agent.update_target_model()\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#4-dqn","title":"4. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b DQN \u0438 \u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f","text":"","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#a-q-","title":"a. \u041f\u0435\u0440\u0435\u043e\u0446\u0435\u043d\u043a\u0430 Q-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","text":"<ul> <li>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: DQN \u0441\u043a\u043b\u043e\u043d\u0435\u043d \u0437\u0430\u0432\u044b\u0448\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438.</li> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: Double DQN (\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438 \u043e\u0446\u0435\u043d\u043a\u0438).</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#b","title":"b. \u041d\u0435\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432","text":"<ul> <li>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0415\u0441\u043b\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0442\u044b\u0441\u044f\u0447\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0441\u0435 \u0442\u043e\u0432\u0430\u0440\u044b Amazon), \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439.</li> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435:</li> <li>Action Embeddings \u2192 \u0421\u0432\u043e\u0434\u044f\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u043d\u0438\u0437\u043a\u043e\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e.</li> <li>DQN \u0441 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435\u043c \u2192 \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, DRN (Deep Reinforcement Learning for Recommendations).</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#c","title":"c. \u0425\u043e\u043b\u043e\u0434\u043d\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<ul> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0433\u0438\u0431\u0440\u0438\u0434 \u0441 collaborative filtering.</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#5-dqn","title":"5. \u0413\u0434\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f DQN \u0432 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u0445?","text":"<ul> <li>YouTube (\u0440\u0430\u043d\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439).</li> <li>Alibaba \u2192 \u0414\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0442\u0430\u0440\u0433\u0435\u0442\u0438\u043d\u0433\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432.</li> <li>\u041d\u043e\u0432\u043e\u0441\u0442\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0440\u044b \u2192 \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043b\u0435\u043d\u0442\u044b.</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/deep_q_networks/#6-dqn","title":"6. \u0411\u0443\u0434\u0443\u0449\u0435\u0435 DQN","text":"<ul> <li>\u041a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0441 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u0430\u043c\u0438 \u2192 \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Decision Transformer \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.</li> <li>\u041c\u0435\u0442\u0430-\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u2192 \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0430\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u043a \u043d\u043e\u0432\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c.</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/diophantine_equation/","title":"\u0414\u0438\u043e\u0444\u0430\u043d\u0442\u043e\u0432\u044b \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f","text":"<p>\u0414\u0438\u043e\u0444\u0430\u043d\u0442\u043e\u0432\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u2014 \u044d\u0442\u043e \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u0446\u0435\u043b\u044b\u043c\u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\u043c\u0438, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u0449\u0443\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u041d\u0430\u0437\u0432\u0430\u043d\u044b \u0432 \u0447\u0435\u0441\u0442\u044c \u0434\u0440\u0435\u0432\u043d\u0435\u0433\u0440\u0435\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0414\u0438\u043e\u0444\u0430\u043d\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0438\u0439\u0441\u043a\u043e\u0433\u043e. \u042d\u0442\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u044f\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0441\u0430\u043c\u044b\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445 \u2014 \u043e\u0442 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0434\u043e \u0444\u0438\u0437\u0438\u043a\u0438.</p>"},{"location":"md/diophantine_equation/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0414\u0438\u043e\u0444\u0430\u043d\u0442\u043e\u0432\u044b\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439","text":"<ol> <li> <p>\u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f:    $ ( a_1x_1 + a_2x_2 + \\dots + a_nx_n = c ) $, \u0433\u0434\u0435 \\(( a_i, c )\\) \u2014 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.</p> </li> <li> <p>\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u041f\u0435\u043b\u043b\u044f: \\(( x^2 - Dy^2 = 1 )\\), \u0433\u0434\u0435 \\(( D )\\) \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0449\u0435\u0435\u0441\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u043c.</p> </li> <li> <p>\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u0430 \\( x^n + y^n = z^n \\):    \u0414\u043b\u044f \\(( n &gt; 2 )\\) \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 (\u0412\u0435\u043b\u0438\u043a\u0430\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u0424\u0435\u0440\u043c\u0430).</p> </li> </ol>"},{"location":"md/diophantine_equation/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043d\u0430 Python","text":""},{"location":"md/diophantine_equation/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u0434\u0432\u0443\u043c\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438","text":"<p>\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435: \\(( ax + by = c )\\)</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u043c\u043e\u0441\u0442\u0438: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0435\u0441\u043b\u0438 \\(( \\gcd(a, b) )\\) \u0434\u0435\u043b\u0438\u0442 \\(( c )\\).</p> <pre><code>def extended_gcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, x, y = extended_gcd(b % a, a)\n        return (g, y - (b // a) * x, x)\n\ndef solve_diophantine(a, b, c):\n    g, x0, y0 = extended_gcd(a, b)\n    if c % g != 0:\n        return None\n    x0 *= c // g\n    y0 *= c // g\n    return (x0, y0)\n\n# \u041f\u0440\u0438\u043c\u0435\u0440: 3x + 6y = 9\na, b, c = 3, 6, 9\nprint(f\"\u0420\u0435\u0448\u0435\u043d\u0438\u0435: {solve_diophantine(a, b, c)}\")  # \u0412\u044b\u0432\u043e\u0434: (3, 0)\n</code></pre>"},{"location":"md/diophantine_equation/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u041f\u0435\u043b\u043b\u044f","text":"<p>\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435: \\(( x^2 - Dy^2 = 1 )\\)</p> <pre><code>import math\n\ndef solve_pell(D):\n    a0 = int(math.isqrt(D))\n    if a0 * a0 == D:\n        return None\n    x, y = a0, 1\n    x_prev, y_prev = 1, 0\n    while True:\n        m = x * y_prev - x_prev * y\n        d = (D - m * m) // (x * x_prev - D * y * y_prev)\n        a = (a0 + m) // d\n        x, x_prev = a * x + x_prev, x\n        y, y_prev = a * y + y_prev, y\n        if x * x - D * y * y == 1:\n            return (x, y)\n\nprint(f\"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 x\u00b2-2y\u00b2=1: {solve_pell(2)}\")  # \u0412\u044b\u0432\u043e\u0434: (3, 2)\n</code></pre>"},{"location":"md/diophantine_equation/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430","text":"<p>\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435: \\(( x^2 + y^2 = z^2 )\\)</p> <pre><code>from math import gcd\n\ndef pythagorean_triples(limit):\n    return [(m*m-n*n, 2*m*n, m*m+n*n)\n            for m in range(1, int(limit**0.5)+1)\n            for n in range(1, m)\n            if (m-n)%2 and gcd(m,n)==1 and m*m+n*n&lt;=limit]\n\nprint(\"\u0422\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f z\u226420:\", pythagorean_triples(20))\n# \u0412\u044b\u0432\u043e\u0434: [(3, 4, 5), (15, 8, 17), (5, 12, 13)]\n</code></pre>"},{"location":"md/diophantine_equation/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0414\u0438\u043e\u0444\u0430\u043d\u0442\u043e\u0432\u044b\u0445 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0439","text":""},{"location":"md/diophantine_equation/#1_1","title":"1. \u041a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f","text":"<ul> <li>RSA-\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u044f \\(( n = p \\cdot q )\\)</li> <li>\u042d\u043b\u043b\u0438\u043f\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0440\u0438\u0432\u044b\u0435: \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u0430 \\(( y^2 = x^3 + ax + b )\\)</li> </ul> <pre><code>def factorize(n):\n    return next((i, n//i) for i in range(2, int(n**0.5)+1) if n%i == 0)\n\nprint(f\"\u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 3233: {factorize(3233)}\")  # \u0412\u044b\u0432\u043e\u0434: (61, 53)\n</code></pre>"},{"location":"md/diophantine_equation/#2_1","title":"2. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f","text":"<ul> <li>\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u0440\u044e\u043a\u0437\u0430\u043a\u0435: \u043f\u043e\u0438\u0441\u043a \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439</li> </ul> <pre><code>def knapsack(items, target):\n    from itertools import combinations\n    for r in range(1, len(items)+1):\n        for combo in combinations(items, r):\n            if sum(combo) == target:\n                return combo\n    return None\n\nprint(f\"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f [3,5,7,9] \u0438 target=12: {knapsack([3,5,7,9], 12)}\")\n# \u0412\u044b\u0432\u043e\u0434: (3, 9)\n</code></pre>"},{"location":"md/diophantine_equation/#3_1","title":"3. \u0424\u0438\u0437\u0438\u043a\u0430 \u0438 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u0438\u044f","text":"<ul> <li>\u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f: ( E = n^2 \\cdot E_0 )$</li> </ul> <pre><code>def quantum_states(max_E):\n    return [n for n in range(1, int(max_E**0.5)+1)]\n\nprint(f\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0434\u043b\u044f E\u226420: {quantum_states(20)}\")  # \u0412\u044b\u0432\u043e\u0434: [1, 2, 3, 4]\n</code></pre>"},{"location":"md/diophantine_equation/#4","title":"4. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0430\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430","text":"<ul> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0411\u0440\u0435\u0437\u0435\u043d\u0445\u0435\u043c\u0430 \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043b\u0438\u043d\u0438\u0439</li> </ul> <pre><code>def bresenham(x0, y0, x1, y1):\n    points = []\n    dx, dy = abs(x1-x0), abs(y1-y0)\n    x, y, sx, sy = x0, y0, 1 if x0&lt;x1 else -1, 1 if y0&lt;y1 else -1\n    err = dx - dy\n    while True:\n        points.append((x, y))\n        if x == x1 and y == y1: break\n        e2 = 2*err\n        if e2 &gt; -dy: err -= dy; x += sx\n        if e2 &lt; dx: err += dx; y += sy\n    return points\n\nprint(\"\u041b\u0438\u043d\u0438\u044f (0,0)-(5,3):\", bresenham(0,0,5,3))\n# \u0412\u044b\u0432\u043e\u0434: [(0,0), (1,1), (2,1), (3,2), (4,2), (5,3)]\n</code></pre>"},{"location":"md/equated_monthly_installments/","title":"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0420\u0430\u0432\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0415\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0412\u0437\u043d\u043e\u0441\u0430 (EMI)","text":"<p>\u0420\u0430\u0432\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0451\u0436 (EMI) \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0437\u0430\u0451\u043c\u0449\u0438\u043a \u043e\u0431\u044f\u0437\u0430\u043d \u0432\u044b\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0440\u0443 \u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430. \u042d\u0442\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0433\u0430\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432, \u0442\u0430\u043a \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0434\u043e\u043b\u0433\u0430, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p> <p>\u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e\u043c \u0432\u0438\u0434\u043e\u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0438\u043f\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u044c, \u0437\u0430\u0451\u043c\u0449\u0438\u043a \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0440\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043b\u0435\u0442. EMI \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u043b\u0430\u043d\u043e\u0432 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u043c\u0438, \u0433\u0434\u0435 \u0437\u0430\u0451\u043c\u0449\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u0441\u0432\u043e\u0435\u043c\u0443 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044e. \u0412 \u043f\u043b\u0430\u043d\u0430\u0445 EMI \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430\u043c \u043e\u0431\u044b\u0447\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0432 \u043c\u0435\u0441\u044f\u0446.</p>"},{"location":"md/equated_monthly_installments/#1-emi","title":"1. \u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 EMI","text":"<p>\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 EMI \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0430\u043d\u043d\u0443\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u0435 (\u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u0440\u0430\u0432\u043d\u044b \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u0432\u0441\u0435\u0433\u043e \u0441\u0440\u043e\u043a\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430):</p> \\[ [ EMI = P \\times \\frac{r \\times (1 + r)^n}{(1 + r)^n - 1} ] \\] <p>\u0413\u0434\u0435:</p> <ul> <li>P \u2014 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (Principal)</li> <li>r \u2014 \u043c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0442\u0430\u0432\u043a\u0430 (\u0433\u043e\u0434\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0432\u043a\u0430 / 12 / 100)</li> <li>n \u2014 \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445</li> </ul>"},{"location":"md/equated_monthly_installments/#2-emi","title":"2. \u041e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f EMI","text":"<p>EMI \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u0445:</p> <ul> <li>\u041f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u044b (\u043d\u0430 \u0431\u044b\u0442\u043e\u0432\u0443\u044e \u0442\u0435\u0445\u043d\u0438\u043a\u0443, \u0440\u0435\u043c\u043e\u043d\u0442)</li> <li>\u0418\u043f\u043e\u0442\u0435\u043a\u0430 (\u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0435 \u0436\u0438\u043b\u0438\u0449\u043d\u044b\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u044b)</li> <li>\u0410\u0432\u0442\u043e\u043a\u0440\u0435\u0434\u0438\u0442\u044b (\u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0432 \u0440\u0430\u0441\u0441\u0440\u043e\u0447\u043a\u0443)</li> <li>\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u044b</li> <li>\u041a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u044b (\u043f\u0440\u0438 \u043f\u043e\u0433\u0430\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0447\u0430\u0441\u0442\u044f\u043c\u0438)</li> </ul>"},{"location":"md/equated_monthly_installments/#3-emi-python","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0441\u0447\u0435\u0442\u0430 EMI \u043d\u0430 Python","text":""},{"location":"md/equated_monthly_installments/#1-emi_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u0420\u0430\u0441\u0447\u0435\u0442 EMI","text":"<pre><code>def calculate_emi(principal, annual_rate, years):\n    n = years * 12  # \u0441\u0440\u043e\u043a \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445\n    r = annual_rate / 12 / 100  # \u043c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0432\u043a\u0430\n    emi = principal * (r * (1 + r)**n) / ((1 + r)**n - 1)\n    return emi\n\nprincipal = 1_000_000  # 1 \u043c\u043b\u043d \u0440\u0443\u0431.\nannual_rate = 12  # 12% \u0433\u043e\u0434\u043e\u0432\u044b\u0445\nyears = 5  # 5 \u043b\u0435\u0442\n\nemi = calculate_emi(principal, annual_rate, years)\nprint(f\"\u0415\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0451\u0436 (EMI): {emi:.2f} \u0440\u0443\u0431.\")\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>\u0415\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0451\u0436 (EMI): 22244.45 \u0440\u0443\u0431.\n</code></pre>"},{"location":"md/equated_monthly_installments/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 (\u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f)","text":"<p>\u041c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c EMI \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u043e\u043b\u0433 \u0438 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u044b:</p> <pre><code>def emi_breakdown(principal, annual_rate, years):\n    n = years * 12\n    r = annual_rate / 12 / 100\n    emi = calculate_emi(principal, annual_rate, years)\n\n    print(f\"EMI: {emi:.2f} \u0440\u0443\u0431. (\u0432 \u043c\u0435\u0441\u044f\u0446)\\n\")\n    print(\"\u041c\u0435\u0441\u044f\u0446 | \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u043e\u043b\u0433 | \u041f\u0440\u043e\u0446\u0435\u043d\u0442\u044b | \u041e\u0441\u0442\u0430\u0442\u043e\u043a \u0434\u043e\u043b\u0433\u0430\")\n    print(\"-\" * 45)\n\n    balance = principal\n    for month in range(1, n + 1):\n        interest = balance * r\n        principal_paid = emi - interest\n        balance -= principal_paid\n\n        print(f\"{month:3} | {principal_paid:10.2f} | {interest:8.2f} | {balance:10.2f}\")\n\nemi_breakdown(1_000_000, 12, 5)\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 (\u043f\u0435\u0440\u0432\u044b\u0435 3 \u043c\u0435\u0441\u044f\u0446\u0430):</p> <pre><code>\u041c\u0435\u0441\u044f\u0446 | \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u043e\u043b\u0433 | \u041f\u0440\u043e\u0446\u0435\u043d\u0442\u044b | \u041e\u0441\u0442\u0430\u0442\u043e\u043a \u0434\u043e\u043b\u0433\u0430\n---------------------------------------------\n  1 |    12244.45 |  10000.00 |  987755.55\n  2 |    12366.89 |   9877.56 |  975388.66\n  3 |    12490.56 |   9753.89 |  962898.10\n...\n</code></pre>"},{"location":"md/equated_monthly_installments/#3-emi","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0441\u0440\u043e\u043a\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043d\u0430 EMI","text":"<pre><code>import matplotlib.pyplot as plt\n\nprincipal = 1_000_000\nannual_rate = 12\nyears_range = range(1, 11)  # \u043e\u0442 1 \u0434\u043e 10 \u043b\u0435\u0442\n\nemis = [calculate_emi(principal, annual_rate, years) for years in years_range]\n\nplt.plot(years_range, emis, marker='o')\nplt.xlabel(\"\u0421\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (\u043b\u0435\u0442)\")\nplt.ylabel(\"EMI (\u0440\u0443\u0431.)\")\nplt.title(\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c EMI \u043e\u0442 \u0441\u0440\u043e\u043a\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\")\nplt.grid(True)\nplt.show()\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434: \u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u043a\u0430\u0436\u0435\u0442, \u0447\u0442\u043e \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 EMI, \u043d\u043e \u043e\u0431\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u043f\u043b\u0430\u0442\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442.</p>"},{"location":"md/even_tree/","title":"Even Tree","text":"<p>Even Tree \u2014 \u044d\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0443 \u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0440\u0451\u0431\u0435\u0440 \u0438\u0437 \u0434\u0435\u0440\u0435\u0432\u0430 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438 \u0431\u044b\u043b\u043e \u0447\u0451\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u0435\u0440\u0448\u0438\u043d. \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043d\u0430 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u044c\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0442\u0435\u0439.</p>","tags":["\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438"]},{"location":"md/even_tree/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 (\u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u043e\u0432 \u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0441 \u0447\u0451\u0442\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0443\u0437\u043b\u043e\u0432 \u0432 \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u044f\u0445)</li> <li>\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438 (\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438 \u0441 \u0447\u0451\u0442\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439)</li> <li>\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 (\u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432 \u0441 \u0447\u0451\u0442\u043a\u0438\u043c\u0438 \u043f\u0430\u0440\u043d\u044b\u043c\u0438 \u0441\u0432\u044f\u0437\u044f\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u0430\u0440\u044b \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u043b\u0435\u043a\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0441 \u0447\u0451\u0442\u043d\u044b\u043c\u0438 \u0441\u0432\u044f\u0437\u044f\u043c\u0438)</li> <li>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u043d\u0430 \u0447\u0451\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u044b \u0434\u043b\u044f \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f)</li> </ol>","tags":["\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438"]},{"location":"md/even_tree/#_2","title":"\u0424\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<p>\u0414\u0430\u043d\u043e:</p> <ul> <li>\u0414\u0435\u0440\u0435\u0432\u043e (\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0430\u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u0440\u0430\u0444) \u0438\u0437 N \u0432\u0435\u0440\u0448\u0438\u043d (\u0433\u0434\u0435 N \u0447\u0451\u0442\u043d\u043e).</li> </ul> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e:</p> <ul> <li>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0451\u0431\u0435\u0440 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u0435 \u0431\u044b\u043b\u043e \u0447\u0451\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u0435\u0440\u0448\u0438\u043d.</li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>      1\n    / | \\\n   2  3  4\n     / \\\n    5   6\n</code></pre> <p>\u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0440\u0451\u0431\u0440\u0430 (1, 3) \u0438 (3, 5), \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u0442\u0440\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u0430 \u0441 \u0447\u0451\u0442\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u0432\u0435\u0440\u0448\u0438\u043d: [1, 2, 4], [3, 6], [5] (\u043d\u043e [5] \u043d\u0435\u0447\u0451\u0442\u043d\u043e\u0435 \u2192 \u043e\u0448\u0438\u0431\u043a\u0430). \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u2014 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e (1, 3), \u043f\u043e\u043b\u0443\u0447\u0438\u0432 [1, 2, 4] \u0438 [3, 5, 6] (\u043e\u0431\u0430 \u0447\u0451\u0442\u043d\u044b\u0435).</p>","tags":["\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438"]},{"location":"md/even_tree/#python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Python","text":"<pre><code>from collections import defaultdict\n\ndef even_tree(graph, n):\n    visited = [False] * (n + 1)\n    count = [0] * (n + 1)\n    removable_edges = 0\n\n    def dfs(node):\n        nonlocal removable_edges\n        visited[node] = True\n        count[node] = 1  # \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u0430\u043c\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u0443\n\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                count[node] += dfs(neighbor)\n\n        # \u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u0435 \u0447\u0451\u0442\u043d\u043e\u0435, \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0440\u0435\u0431\u0440\u043e\n        if count[node] % 2 == 0 and node != 1:\n            removable_edges += 1\n            count[node] = 0  # \"\u043e\u0442\u0440\u0435\u0437\u0430\u0435\u043c\" \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u043e\n\n        return count[node]\n\n    dfs(1)  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043e\u0431\u0445\u043e\u0434 \u0438\u0437 \u043a\u043e\u0440\u043d\u044f (1)\n    return removable_edges\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nif __name__ == \"__main__\":\n    # \u0414\u0435\u0440\u0435\u0432\u043e: 1 - {2, 3, 4}, 3 - {5, 6}\n    edges = [(1, 2), (1, 3), (1, 4), (3, 5), (3, 6)]\n    n = 6  # \u0427\u0438\u0441\u043b\u043e \u0432\u0435\u0440\u0448\u0438\u043d\n\n    # \u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    print(\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u044b\u0445 \u0440\u0451\u0431\u0435\u0440:\", even_tree(graph, n))\n</code></pre>","tags":["\u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438"]},{"location":"md/facade/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Facade (\u0424\u0430\u0441\u0430\u0434)","text":"<p>Facade (\u0424\u0430\u0441\u0430\u0434) - \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438\u043b\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0443. \u0424\u0430\u0441\u0430\u0434 \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#facade_1","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Facade?","text":"<ul> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438\u043b\u0438 \u0443\u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0435</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0440\u0430\u0437\u043b\u043e\u0436\u0438\u0442\u044c \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 (\u0441\u043b\u043e\u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438)</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#facade_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Facade","text":"<ul> <li>\u0418\u0437\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b</li> <li>\u0423\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 coupling (\u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c) \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0438 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439</li> <li>\u0414\u0435\u043b\u0430\u0435\u0442 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u0440\u043e\u0449\u0435 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0438</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#facade_3","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 Facade","text":"<ul> <li>\u0424\u0430\u0441\u0430\u0434 \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0430\u0442\u044c \"\u0431\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c\", \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043a\u043e \u0432\u0441\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0439\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439","text":"<pre><code># \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b\nclass VideoFile:\n    def __init__(self, filename):\n        self.filename = filename\n\nclass CodecFactory:\n    @staticmethod\n    def extract(file):\n        print(f\"Extracting codec from {file.filename}\")\n        return \"codec\"\n\nclass BitrateReader:\n    @staticmethod\n    def read(file, codec):\n        print(f\"Reading file {file.filename} with {codec}\")\n        return \"buffer\"\n\nclass AudioMixer:\n    @staticmethod\n    def fix(buffer):\n        print(\"Fixing audio\")\n        return \"fixed_audio\"\n\n# \u0424\u0430\u0441\u0430\u0434\nclass VideoConverter:\n    def convert(self, filename, format):\n        print(\"VideoConversionFacade: conversion started.\")\n        file = VideoFile(filename)\n        codec = CodecFactory.extract(file)\n        buffer = BitrateReader.read(file, codec)\n\n        if format == \"mp4\":\n            print(\"Converting to MP4 format\")\n        else:\n            print(\"Converting to OGG format\")\n\n        result = AudioMixer.fix(buffer)\n        print(\"VideoConversionFacade: conversion completed.\")\n        return result\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\nif __name__ == \"__main__\":\n    converter = VideoConverter()\n    mp4 = converter.convert(\"youtubevideo.ogg\", \"mp4\")\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u043c","text":"<pre><code># \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b\nclass CPU:\n    def execute(self):\n        print(\"CPU: Executing instructions\")\n\n    def halt(self):\n        print(\"CPU: Halting\")\n\nclass Memory:\n    def load(self, position, data):\n        print(f\"Memory: Loading data '{data}' at position {position}\")\n\nclass HardDrive:\n    def read(self, lba, size):\n        print(f\"HardDrive: Reading sector {lba} with size {size}\")\n        return \"boot_data\"\n\n# \u0424\u0430\u0441\u0430\u0434\nclass Computer:\n    def __init__(self):\n        self.cpu = CPU()\n        self.memory = Memory()\n        self.hard_drive = HardDrive()\n\n    def start(self):\n        print(\"Computer: Starting...\")\n        boot_data = self.hard_drive.read(0, 1024)\n        self.memory.load(0, boot_data)\n        self.cpu.execute()\n        print(\"Computer: Started successfully\")\n\n    def shutdown(self):\n        print(\"Computer: Shutting down...\")\n        self.cpu.halt()\n        print(\"Computer: Shutdown complete\")\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\nif __name__ == \"__main__\":\n    computer = Computer()\n    computer.start()\n    print(\"\\nUsing computer...\\n\")\n    computer.shutdown()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439","text":"<pre><code># \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b\nclass AccountManager:\n    def check_account(self, account_id):\n        print(f\"Checking account {account_id} exists\")\n        return True\n\nclass BalanceChecker:\n    def get_balance(self, account_id):\n        print(f\"Getting balance for account {account_id}\")\n        return 1000.0\n\nclass TransactionProcessor:\n    def deposit(self, account_id, amount):\n        print(f\"Depositing {amount} to account {account_id}\")\n\n    def withdraw(self, account_id, amount):\n        print(f\"Withdrawing {amount} from account {account_id}\")\n\nclass SecurityManager:\n    def verify_pin(self, account_id, pin):\n        print(f\"Verifying PIN for account {account_id}\")\n        return pin == \"1234\"\n\n# \u0424\u0430\u0441\u0430\u0434\nclass BankFacade:\n    def __init__(self):\n        self.account_manager = AccountManager()\n        self.balance_checker = BalanceChecker()\n        self.transaction_processor = TransactionProcessor()\n        self.security_manager = SecurityManager()\n\n    def deposit_money(self, account_id, pin, amount):\n        if not self.security_manager.verify_pin(account_id, pin):\n            print(\"Invalid PIN\")\n            return False\n\n        if not self.account_manager.check_account(account_id):\n            print(\"Account not found\")\n            return False\n\n        self.transaction_processor.deposit(account_id, amount)\n        print(f\"Successfully deposited {amount} to account {account_id}\")\n        return True\n\n    def withdraw_money(self, account_id, pin, amount):\n        if not self.security_manager.verify_pin(account_id, pin):\n            print(\"Invalid PIN\")\n            return False\n\n        if not self.account_manager.check_account(account_id):\n            print(\"Account not found\")\n            return False\n\n        balance = self.balance_checker.get_balance(account_id)\n        if balance &lt; amount:\n            print(\"Insufficient funds\")\n            return False\n\n        self.transaction_processor.withdraw(account_id, amount)\n        print(f\"Successfully withdrew {amount} from account {account_id}\")\n        return True\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\nif __name__ == \"__main__\":\n    bank = BankFacade()\n\n    # \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0441\u043d\u044f\u0442\u0438\u0435 \u0434\u0435\u043d\u0435\u0433\n    bank.withdraw_money(\"acc123\", \"1234\", 500)\n\n    print(\"\\n\")\n\n    # \u041d\u0435\u0443\u0434\u0430\u0447\u043d\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 (\u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 PIN)\n    bank.deposit_money(\"acc123\", \"1111\", 200)\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/facade/#_1","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Facade \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043a\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e:</p> <ul> <li>\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435</li> <li>\u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0438 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439</li> <li>\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0432 \u0441\u043b\u043e\u0438</li> </ul> <p>\u0424\u0430\u0441\u0430\u0434 \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Factory Method (\u0424\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434)","text":"<p>\u0424\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u2014 \u044d\u0442\u043e \u043f\u043e\u0440\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043d\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u043c \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f","text":"<ul> <li>\u041a\u043b\u0430\u0441\u0441 \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441\u0432\u043e\u0438\u043c \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u043c.</li> <li>\u0418\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434 \u043e\u0442 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c.</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/#_2","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430","text":"<ol> <li> <p>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c (<code>Creator</code>)</p> </li> <li> <p>\u041e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u0442 \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 (<code>factory_method()</code>), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430.</p> </li> <li> <p>\u041c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b.</p> </li> <li> <p>\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0438 (<code>ConcreteCreator</code>)</p> </li> <li> <p>\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b.</p> </li> <li> <p>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 (<code>Product</code>)</p> </li> <li> <p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c.</p> </li> <li> <p>\u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b (<code>ConcreteProduct</code>)</p> </li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430.</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\nclass Transport(ABC):\n    @abstractmethod\n    def deliver(self):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b\nclass Truck(Transport):\n    def deliver(self):\n        return \"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0433\u0440\u0443\u0437\u0430 \u043f\u043e \u0437\u0435\u043c\u043b\u0435\"\n\nclass Ship(Transport):\n    def deliver(self):\n        return \"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0433\u0440\u0443\u0437\u0430 \u043f\u043e \u043c\u043e\u0440\u044e\"\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c\nclass Logistics(ABC):\n    @abstractmethod\n    def create_transport(self) -&gt; Transport:\n        pass\n\n    def plan_delivery(self) -&gt; str:\n        transport = self.create_transport()\n        return f\"\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430: {transport.deliver()}\"\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0438\nclass RoadLogistics(Logistics):\n    def create_transport(self) -&gt; Transport:\n        return Truck()\n\nclass SeaLogistics(Logistics):\n    def create_transport(self) -&gt; Transport:\n        return Ship()\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\ndef client_code(logistics: Logistics):\n    print(logistics.plan_delivery())\n\nif __name__ == \"__main__\":\n    client_code(RoadLogistics())  # \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430: \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0433\u0440\u0443\u0437\u0430 \u043f\u043e \u0437\u0435\u043c\u043b\u0435\n    client_code(SeaLogistics())   # \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430: \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0433\u0440\u0443\u0437\u0430 \u043f\u043e \u043c\u043e\u0440\u044e\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/#2-word-pdf","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 (Word, PDF)","text":"<pre><code>from abc import ABC, abstractmethod\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\nclass Document(ABC):\n    @abstractmethod\n    def save(self):\n        pass\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b\nclass PDFDocument(Document):\n    def save(self):\n        return \"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PDF\"\n\nclass WordDocument(Document):\n    def save(self):\n        return \"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Word\"\n\n# \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c\nclass Application(ABC):\n    @abstractmethod\n    def create_document(self) -&gt; Document:\n        pass\n\n    def save_document(self):\n        doc = self.create_document()\n        return doc.save()\n\n# \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0438\nclass PDFApplication(Application):\n    def create_document(self) -&gt; Document:\n        return PDFDocument()\n\nclass WordApplication(Application):\n    def create_document(self) -&gt; Document:\n        return WordDocument()\n\n# \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043a\u043e\u0434\napp1 = PDFApplication()\nprint(app1.save_document())  # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PDF\n\napp2 = WordApplication()\nprint(app2.save_document())  # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Word\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/#factory-method_1","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Factory Method","text":"<ul> <li>\u0418\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u043e\u0442 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432.</li> <li>\u0412\u044b\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e.</li> <li>\u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432.</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/factory_method/#_3","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<ul> <li>\u041c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432.</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Flyweight (\u041f\u0440\u0438\u0441\u043f\u043e\u0441\u043e\u0431\u043b\u0435\u043d\u0435\u0446)","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Flyweight - \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u043e\u0431\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f","text":"<p>Flyweight \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u0438\u043b\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u043f\u0443\u0442\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438. \u041e\u043d \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043a\u043e\u0433\u0434\u0430:</p> <ul> <li>\u0412 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0430\u043c\u044f\u0442\u0438</li> <li>\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u0430 \u0432\u043e\u0432\u043d\u0435</li> <li>\u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043d\u043e\u0441\u0430 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u0438\u0435 \u0433\u0440\u0443\u043f\u043f\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#_2","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430","text":"<ul> <li>Flyweight - \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435</li> <li>ConcreteFlyweight - \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Flyweight \u0438 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430)</li> <li>UnsharedConcreteFlyweight - \u043d\u0435 \u0432\u0441\u0435 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b Flyweight \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u043c\u0438</li> <li>FlyweightFactory - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 flyweight-\u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 flyweight-\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>Client - \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u043d\u0435\u0448\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 flyweight-\u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440","text":"<p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b - \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442. \u0412\u043c\u0435\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u044b\u0441\u044f\u0447\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c flyweight \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>import weakref\n\nclass CharacterFlyweight:\n    _pool = weakref.WeakValueDictionary()\n\n    def __new__(cls, char):\n        # \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0432 \u043f\u0443\u043b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0433\u043e\n        obj = cls._pool.get(char)\n        if obj is None:\n            obj = super().__new__(cls)\n            cls._pool[char] = obj\n            obj.char = char\n        return obj\n\n    def render(self, font, size):\n        print(f\"\u0421\u0438\u043c\u0432\u043e\u043b '{self.char}' \u0441 \u0448\u0440\u0438\u0444\u0442\u043e\u043c {font} \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c {size}\")\n\nclass TextEditor:\n    def __init__(self):\n        self.chars = []\n\n    def add_char(self, char, font, size):\n        flyweight = CharacterFlyweight(char)\n        self.chars.append((flyweight, font, size))\n\n    def render(self):\n        for flyweight, font, size in self.chars:\n            flyweight.render(font, size)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\neditor = TextEditor()\neditor.add_char('H', 'Arial', 12)\neditor.add_char('e', 'Arial', 12)\neditor.add_char('l', 'Times New Roman', 14)\neditor.add_char('l', 'Times New Roman', 14)\neditor.add_char('o', 'Arial', 12)\n\neditor.render()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0418\u0433\u0440\u0430 \u0441 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u043c\u0438","text":"<p>\u0412 \u0438\u0433\u0440\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430\u043c\u0438, \u043d\u043e \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u043c\u0438.</p> <pre><code>class TreeType:\n    def __init__(self, name, color, texture):\n        self.name = name\n        self.color = color\n        self.texture = texture\n\n    def draw(self, x, y):\n        print(f\"\u0420\u0438\u0441\u0443\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e {self.name} \u0446\u0432\u0435\u0442\u0430 {self.color} \u0432 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 ({x}, {y})\")\n\nclass TreeFactory:\n    tree_types = {}\n\n    @classmethod\n    def get_tree_type(cls, name, color, texture):\n        key = (name, color, texture)\n        if key not in cls.tree_types:\n            cls.tree_types[key] = TreeType(name, color, texture)\n        return cls.tree_types[key]\n\nclass Tree:\n    def __init__(self, x, y, tree_type):\n        self.x = x\n        self.y = y\n        self.type = tree_type\n\n    def draw(self):\n        self.type.draw(self.x, self.y)\n\nclass Forest:\n    def __init__(self):\n        self.trees = []\n\n    def plant_tree(self, x, y, name, color, texture):\n        tree_type = TreeFactory.get_tree_type(name, color, texture)\n        tree = Tree(x, y, tree_type)\n        self.trees.append(tree)\n\n    def draw(self):\n        for tree in self.trees:\n            tree.draw()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nforest = Forest()\nforest.plant_tree(1, 2, \"\u0414\u0443\u0431\", \"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\", \"\u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430_\u0434\u0443\u0431\u0430.png\")\nforest.plant_tree(3, 4, \"\u0414\u0443\u0431\", \"\u0437\u0435\u043b\u0435\u043d\u044b\u0439\", \"\u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430_\u0434\u0443\u0431\u0430.png\")\nforest.plant_tree(5, 6, \"\u0411\u0435\u0440\u0435\u0437\u0430\", \"\u0431\u0435\u043b\u044b\u0439\", \"\u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0430_\u0431\u0435\u0440\u0435\u0437\u044b.png\")\n\nforest.draw()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430","text":"<pre><code>class TextStyleFlyweight:\n    _pool = {}\n\n    def __new__(cls, font, size, color):\n        key = (font, size, color)\n        if key not in cls._pool:\n            cls._pool[key] = super().__new__(cls)\n            cls._pool[key].font = font\n            cls._pool[key].size = size\n            cls._pool[key].color = color\n        return cls._pool[key]\n\n    def apply_style(self, text):\n        print(f\"\u0422\u0435\u043a\u0441\u0442: '{text}' | \u0428\u0440\u0438\u0444\u0442: {self.font}, \u0420\u0430\u0437\u043c\u0435\u0440: {self.size}, \u0426\u0432\u0435\u0442: {self.color}\")\n\nclass FormattedText:\n    def __init__(self):\n        self.text = []\n        self.styles = []\n\n    def add_text(self, text, font=None, size=None, color=None):\n        self.text.append(text)\n        if font or size or color:\n            style = TextStyleFlyweight(font or \"Arial\", size or 12, color or \"black\")\n            self.styles.append((len(self.text)-1, style))\n        else:\n            self.styles.append((len(self.text)-1, None))\n\n    def display(self):\n        for i, text in enumerate(self.text):\n            for pos, style in self.styles:\n                if pos == i and style:\n                    style.apply_style(text)\n                    break\n            else:\n                print(f\"\u0422\u0435\u043a\u0441\u0442: '{text}' | (\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435)\")\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ndoc = FormattedText()\ndoc.add_text(\"\u041f\u0440\u0438\u0432\u0435\u0442, \", \"Times New Roman\", 14, \"red\")\ndoc.add_text(\"\u043c\u0438\u0440!\", \"Arial\", 16, \"blue\")\ndoc.add_text(\" \u042d\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442.\")\ndoc.add_text(\" \u0410 \u044d\u0442\u043e \u0441\u043d\u043e\u0432\u0430 \u0441\u0442\u0438\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439\", \"Courier New\", 12, \"green\")\n\ndoc.display()\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/flyweight/#_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u043f\u0430\u043c\u044f\u0442\u044c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f</li> <li>\u0423\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> </ul> <p>\u041d\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438:</p> <ul> <li>\u041c\u043e\u0436\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430</li> <li>\u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f</li> <li>\u041c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u043c \u0441 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e, \u0435\u0441\u043b\u0438 flyweight-\u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b</li> </ul> <p>Flyweight \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430\u0445, \u0438\u0433\u0440\u0430\u0445, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430\u0445 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/fp_growth/","title":"FP-Growth","text":"<p>FP-Growth (Frequent Pattern Growth) \u2014 \u043c\u043e\u0449\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (itemsets) \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0431\u0430\u0437\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u043a\u043e\u0440\u0437\u0438\u043d \u043f\u043e\u043a\u0443\u043f\u043e\u043a (Market Basket Analysis), \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u0438\u0441\u043a\u043e\u043c \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b.</p>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f (\u0430\u043d\u0430\u043b\u0438\u0437 \u043a\u043e\u0440\u0437\u0438\u043d \u043f\u043e\u043a\u0443\u043f\u043e\u043a, \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u0442\u0438\u043f\u0430 \"\u0435\u0441\u043b\u0438 X, \u0442\u043e Y\")</li> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043f\u043e\u0434\u0431\u043e\u0440 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043a\u0430\u043a \u0432 Amazon \u0438\u043b\u0438 Netflix)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u043f\u043e\u0438\u0441\u043a \u0447\u0430\u0441\u0442\u044b\u0445 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0439 \u0441\u0438\u043c\u043f\u0442\u043e\u043c\u043e\u0432 \u0438 \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0441\u0444\u0435\u0440\u0435)</li> <li>\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 (\u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446)</li> </ol>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u041f\u043e\u043d\u044f\u0442\u0438\u044f","text":"","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#frequent-itemsets","title":"\u0427\u0430\u0441\u0442\u044b\u0435 \u041d\u0430\u0431\u043e\u0440\u044b (Frequent Itemsets)","text":"<p>\u041d\u0430\u0431\u043e\u0440 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044b\u043c, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445 \u043d\u0435 \u0440\u0435\u0436\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 (min_support).</p>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#fp-fp-tree","title":"\u0414\u0435\u0440\u0435\u0432\u043e FP (FP-Tree)","text":"<p>FP-Growth \u0441\u0442\u0440\u043e\u0438\u0442 \u0441\u0436\u0430\u0442\u043e\u0435 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e (FP-Tree), \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0430\u0431\u043e\u0440\u0430\u0445.</p>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#conditional-pattern-bases","title":"\u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u0411\u0430\u0437\u044b (Conditional Pattern Bases)","text":"<p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0441\u0442\u0440\u043e\u0438\u0442 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 FP-\u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0447\u0430\u0441\u0442\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432.</p>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443:</p> <pre><code>pip install mlxtend\n</code></pre>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#fp-growth_1","title":"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0441 FP-Growth","text":"<pre><code>import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import fpgrowth\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0441\u0443\u043f\u0435\u0440\u043c\u0430\u0440\u043a\u0435\u0442\u0435)\ntransactions = [\n    ['\u0445\u043b\u0435\u0431', '\u043c\u043e\u043b\u043e\u043a\u043e', '\u044f\u0439\u0446\u0430'],\n    ['\u0445\u043b\u0435\u0431', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u043c\u043e\u043b\u043e\u043a\u043e', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u0445\u043b\u0435\u0431', '\u043c\u043e\u043b\u043e\u043a\u043e', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u043a\u043e\u043b\u0430'],\n    ['\u0445\u043b\u0435\u0431', '\u043c\u043e\u043b\u043e\u043a\u043e', '\u043f\u0435\u0447\u0435\u043d\u044c\u0435']\n]\n\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\nte = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\n\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0447\u0430\u0441\u0442\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b (min_support = 0.4)\nfrequent_itemsets = fpgrowth(df, min_support=0.4, use_colnames=True)\nprint(frequent_itemsets)\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>   support              itemsets\n0      0.8               [\u0445\u043b\u0435\u0431]\n1      0.8              [\u043c\u043e\u043b\u043e\u043a\u043e]\n2      0.8            [\u043f\u0435\u0447\u0435\u043d\u044c\u0435]\n3      0.6               [\u043a\u043e\u043b\u0430]\n4      0.6        [\u0445\u043b\u0435\u0431, \u043c\u043e\u043b\u043e\u043a\u043e]\n5      0.6      [\u0445\u043b\u0435\u0431, \u043f\u0435\u0447\u0435\u043d\u044c\u0435]\n6      0.6     [\u043c\u043e\u043b\u043e\u043a\u043e, \u043f\u0435\u0447\u0435\u043d\u044c\u0435]\n7      0.6  [\u0445\u043b\u0435\u0431, \u043c\u043e\u043b\u043e\u043a\u043e, \u043f\u0435\u0447\u0435\u043d\u044c\u0435]\n</code></pre>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#_3","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b","text":"<pre><code>from mlxtend.frequent_patterns import association_rules\n\n# \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u043e\u0432\u0435\u0440\u0438\u0435\u043c 0.7\nrules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.7)\nprint(rules[['antecedents', 'consequents', 'support', 'confidence']])\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434:</p> <pre><code>        antecedents     consequents  support  confidence\n0        (\u0445\u043b\u0435\u0431)         (\u043c\u043e\u043b\u043e\u043a\u043e)      0.6    0.75\n1        (\u043c\u043e\u043b\u043e\u043a\u043e)        (\u0445\u043b\u0435\u0431)       0.6    0.75\n2  (\u0445\u043b\u0435\u0431, \u043f\u0435\u0447\u0435\u043d\u044c\u0435)      (\u043c\u043e\u043b\u043e\u043a\u043e)      0.6    1.00\n3  (\u043c\u043e\u043b\u043e\u043a\u043e, \u043f\u0435\u0447\u0435\u043d\u044c\u0435)     (\u0445\u043b\u0435\u0431)       0.6    1.00\n</code></pre> <p>\u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f:</p> <ul> <li>\u0415\u0441\u043b\u0438 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0431\u0435\u0440\u0435\u0442 <code>\u0445\u043b\u0435\u0431</code> \u0438 <code>\u043f\u0435\u0447\u0435\u043d\u044c\u0435</code>, \u0442\u043e \u0441 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e 100% \u043e\u043d \u043a\u0443\u043f\u0438\u0442 \u0438 <code>\u043c\u043e\u043b\u043e\u043a\u043e</code> (confidence = 1.0).</li> </ul>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#fp-growth_2","title":"\u041f\u043b\u044e\u0441\u044b \u0438 \u041c\u0438\u043d\u0443\u0441\u044b FP-Growth","text":"","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#_4","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:","text":"<ul> <li>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 Apriori (\u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432).</li> <li>\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0425\u043e\u0440\u043e\u0448\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f.</li> </ul>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/fp_growth/#_5","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:","text":"<ul> <li>\u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f FP-\u0434\u0435\u0440\u0435\u0432\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e \u043f\u043e \u043f\u0430\u043c\u044f\u0442\u0438.</li> <li>\u0427\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u043a \u0432\u044b\u0431\u043e\u0440\u0443 <code>min_support</code>.</li> </ul>","tags":["\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f","\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0412\u0435\u0431-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430"]},{"location":"md/jump_point_search/","title":"Jump Point Search (JPS)","text":"<p>Jump Point Search (JPS) - \u044d\u0442\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0443\u0442\u0438 \u043d\u0430 \u0441\u0435\u0442\u043a\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 A*. \u041e\u043d \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f uniform-cost grid environments (\u0441\u0435\u0442\u043e\u043a \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0435\u0442\u043a\u0430\u043c\u0438).</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 (\u043f\u043e\u0438\u0441\u043a \u043f\u0443\u0442\u0438 \u0434\u043b\u044f NPC \u0432 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f\u0445 \u0438\u043b\u0438 RPG \u0441 \u043a\u0440\u0443\u043f\u043d\u044b\u043c\u0438 \u043a\u0430\u0440\u0442\u0430\u043c\u0438, \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u0445)</li> <li>\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430 (\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432 \u0432 \u0441\u0442\u0430\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435)</li> <li>\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0432 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0435 \u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445)</li> <li>\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f (\u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0445 \u043f\u0443\u0442\u0435\u0439 \u0432 \u0441\u0435\u0442\u043e\u0447\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438)</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#jump-point-search","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b Jump Point Search","text":"<ol> <li> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439: JPS \u0438\u0437\u0431\u0435\u0433\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u0442\u043e\u0447\u043a\u0435 \u0441 \u0442\u043e\u0439 \u0436\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e.</p> </li> <li> <p>\u041f\u0440\u044b\u0436\u043a\u0438 (Jumping): \u0412\u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u0441\u0435\u0434\u0430, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \"\u043f\u0440\u044b\u0433\u0430\u0435\u0442\" \u0447\u0435\u0440\u0435\u0437 \u043a\u043b\u0435\u0442\u043a\u0438, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u0442 \"\u0442\u043e\u0447\u043a\u0443 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430\" (jump point) - \u043c\u0435\u0441\u0442\u043e, \u0433\u0434\u0435 \u043f\u0443\u0442\u044c \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u0440\u044f\u043c\u043e\u0439.</p> </li> <li> <p>\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430: \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 (forced neighbors) \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a.</p> </li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#a","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u043f\u0435\u0440\u0435\u0434 A*","text":"<ul> <li>\u0411\u044b\u0441\u0442\u0440\u0435\u0435: \u0412 \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 10-100 \u0440\u0430\u0437 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 A*</li> <li>\u041c\u0435\u043d\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438: \u041e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0443\u0437\u043b\u043e\u0432</li> <li>\u0422\u043e\u0442 \u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c, \u043a\u0430\u043a \u0438 A*</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#jps","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 JPS","text":"<pre><code>import heapq\nfrom typing import List, Tuple, Dict, Optional, Set\n\ndef heuristic(a: Tuple[int, int], b: Tuple[int, int]) -&gt; float:\n    \"\"\"\u042d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0427\u0435\u0431\u044b\u0448\u0435\u0432\u0430)\"\"\"\n    dx = abs(a[0] - b[0])\n    dy = abs(a[1] - b[1])\n    return dx + dy + (1.414 - 2) * min(dx, dy)\n\nclass Node:\n    def __init__(self, position: Tuple[int, int], parent: Optional['Node'] = None):\n        self.position = position\n        self.parent = parent\n        self.g = 0  # \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430\n        self.h = 0  # \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430\n        self.f = 0  # \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\n\n    def __eq__(self, other):\n        return self.position == other.position\n\n    def __lt__(self, other):\n        return self.f &lt; other.f\n\n    def __hash__(self):\n        return hash(self.position)\n\ndef is_valid(grid: List[List[int]], pos: Tuple[int, int]) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u0441\u0435\u0442\u043a\u0438 \u0438 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0430 \u043b\u0438 \u043e\u043d\u0430\"\"\"\n    x, y = pos\n    return 0 &lt;= x &lt; len(grid) and 0 &lt;= y &lt; len(grid[0]) and grid[x][y] == 0\n\ndef has_forced_neighbor(grid: List[List[int]], x: int, y: int, dx: int, dy: int) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\"\"\"\n    if dx != 0 and dy != 0:  # \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\n        # \u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043e\u0441\u0435\u0434\u0438\n        if (is_valid(grid, (x, y - dy)) and not is_valid(grid, (x - dx, y - dy)) or\n            is_valid(grid, (x, y + dy)) and not is_valid(grid, (x - dx, y + dy))):\n            return True\n        # \u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043e\u0441\u0435\u0434\u0438\n        if (is_valid(grid, (x - dx, y)) and not is_valid(grid, (x - dx, y - dy)) or\n            is_valid(grid, (x + dx, y)) and not is_valid(grid, (x + dx, y - dy))):\n            return True\n    else:  # \u043e\u0440\u0442\u043e\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\n        if dx == 0:  # \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\n            if (is_valid(grid, (x + 1, y + dy)) and not is_valid(grid, (x + 1, y)) or\n                is_valid(grid, (x - 1, y + dy)) and not is_valid(grid, (x - 1, y))):\n                return True\n        else:  # \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\n            if (is_valid(grid, (x + dx, y + 1)) and not is_valid(grid, (x, y + 1)) or\n                is_valid(grid, (x + dx, y - 1)) and not is_valid(grid, (x, y - 1))):\n                return True\n    return False\n\ndef jump(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int],\n          dx: int, dy: int) -&gt; Optional[Tuple[int, int]]:\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u044b\u0436\u043a\u0430: \u0438\u0449\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430\"\"\"\n    x, y = start\n    while True:\n        x += dx\n        y += dy\n\n        # \u0415\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0438\n        if (x, y) == end:\n            return (x, y)\n\n        # \u0415\u0441\u043b\u0438 \u043a\u043b\u0435\u0442\u043a\u0430 \u043d\u0435\u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0430 \u0438\u043b\u0438 \u0432\u043d\u0435 \u0441\u0435\u0442\u043a\u0438\n        if not is_valid(grid, (x, y)):\n            return None\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n        if has_forced_neighbor(grid, x, y, dx, dy):\n            return (x, y)\n\n        # \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u044b\u0436\u043a\u0438 \u043f\u043e \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n        if dx != 0 and dy != 0:\n            # \u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u044b\u0436\u043e\u043a\n            if jump(grid, (x, y), end, dx, 0) is not None:\n                return (x, y)\n            # \u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u044b\u0436\u043e\u043a\n            if jump(grid, (x, y), end, 0, dy) is not None:\n                return (x, y)\n\n    return None\n\ndef get_successors(grid: List[List[int]], node: Node, end: Tuple[int, int]) -&gt; List[Tuple[int, int]]:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u043e\u0447\u0435\u043a \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0443\u0437\u043b\u0430\"\"\"\n    successors = []\n    x, y = node.position\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u043e\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n    if node.parent is None:\n        # \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 - \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0441\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n        directions = [(dx, dy) for dx in (-1, 0, 1) for dy in (-1, 0, 1) if (dx, dy) != (0, 0)]\n    else:\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\n        px, py = node.parent.position\n        dx, dy = x - px, y - py\n        dx = max(-1, min(1, dx))\n        dy = max(-1, min(1, dy))\n\n        # \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n        if dx != 0 and dy != 0:  # \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\n            directions = [\n                (dx, dy),  # \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n                (dx, 0),   # \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435\n                (0, dy)    # \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435\n            ]\n        else:  # \u043e\u0440\u0442\u043e\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\n            if dx == 0:  # \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435\n                directions = [\n                    (0, dy),  # \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438\n                    (1, dy),  # \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n                    (-1, dy)\n                ]\n            else:  # \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435\n                directions = [\n                    (dx, 0),  # \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438\n                    (dx, 1),  # \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n                    (dx, -1)\n                ]\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0442\u043e\u0447\u0435\u043a \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430\n    for dx, dy in directions:\n        jx, jy = x + dx, y + dy\n        if is_valid(grid, (jx, jy)):\n            jump_point = jump(grid, (x, y), end, dx, dy)\n            if jump_point is not None:\n                successors.append(jump_point)\n\n    return successors\n\ndef jps(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -&gt; List[Tuple[int, int]]:\n    \"\"\"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 Jump Point Search\"\"\"\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u0443\u0437\u043b\u043e\u0432\n    start_node = Node(start)\n    end_node = Node(end)\n\n    # \u041e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u0441\u043f\u0438\u0441\u043a\u0438\n    open_list = []\n    closed_list = set()\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0437\u0435\u043b\n    heapq.heappush(open_list, start_node)\n\n    while open_list:\n        current_node = heapq.heappop(open_list)\n\n        # \u0415\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u0446\u0435\u043b\u0438\n        if current_node == end_node:\n            path = []\n            current = current_node\n            while current is not None:\n                path.append(current.position)\n                current = current.parent\n            return path[::-1]  # \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043f\u0443\u0442\u044c\n\n        closed_list.add(current_node.position)\n\n        # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u0447\u043a\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430\n        successors = get_successors(grid, current_node, end)\n\n        for successor in successors:\n            if successor in closed_list:\n                continue\n\n            # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0443\u0437\u0435\u043b\n            new_node = Node(successor, current_node)\n\n            # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438\n            dx = new_node.position[0] - current_node.position[0]\n            dy = new_node.position[1] - current_node.position[1]\n            step_cost = 1 if dx == 0 or dy == 0 else 1.414  # \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u0430\n\n            new_node.g = current_node.g + step_cost\n            new_node.h = heuristic(new_node.position, end)\n            new_node.f = new_node.g + new_node.h\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443\u0436\u0435 \u0442\u0430\u043a\u043e\u0439 \u0443\u0437\u0435\u043b \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u0441 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e\n            found = False\n            for node in open_list:\n                if node == new_node and node.g &lt;= new_node.g:\n                    found = True\n                    break\n\n            if not found:\n                heapq.heappush(open_list, new_node)\n\n    return []  # \u041f\u0443\u0442\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nif __name__ == \"__main__\":\n    # 0 - \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0430\u044f \u043a\u043b\u0435\u0442\u043a\u0430, 1 - \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0438\u0435\n    grid = [\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n\n    start = (0, 0)\n    end = (7, 6)\n\n    path = jps(grid, start, end)\n    print(\"\u041d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c JPS:\")\n    for position in path:\n        print(position)\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#jps_1","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0438 JPS","text":"<pre><code>def print_grid_with_path(grid, path):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if (i, j) == path[0]:\n                print(\"S\", end=\" \")  # Start\n            elif (i, j) == path[-1]:\n                print(\"E\", end=\" \")  # End\n            elif (i, j) in path:\n                print(\"*\", end=\" \")  # Path\n            else:\n                print(grid[i][j], end=\" \")\n        print()\n\nprint(\"\\n\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0438 JPS:\")\nprint_grid_with_path(grid, path)\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#_2","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ol> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f jump(): \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0438\u0449\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438.</p> </li> <li> <p>\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439: \u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>has_forced_neighbor</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u043e\u0441\u0435\u0434\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043b\u0435\u0442\u043a\u0443 \u0442\u043e\u0447\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430.</p> </li> <li> <p>\u0414\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f: \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e (\u221a2 \u2248 1.414).</p> </li> <li> <p>\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439: \u041f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043f\u0440\u0435\u0435\u043c\u043d\u0438\u043a\u043e\u0432 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u043e\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0437\u043b\u0430.</p> </li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/jump_point_search/#jps-a","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 JPS \u0438 A*","text":"<ol> <li>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: JPS \u043e\u0431\u044b\u0447\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u0445.</li> <li>\u041f\u0430\u043c\u044f\u0442\u044c: JPS \u0445\u0440\u0430\u043d\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0443\u0437\u043b\u043e\u0432 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435.</li> <li>\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438: JPS \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0437-\u0437\u0430 \u043f\u0440\u0430\u0432\u0438\u043b \u043f\u0440\u044b\u0436\u043a\u043e\u0432 \u0438 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439.</li> <li>\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e\u0441\u0442\u044c: JPS \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 uniform grids, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a A* \u0431\u043e\u043b\u0435\u0435 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u0435\u043d.</li> </ol> <p>Jump Point Search \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u0438\u0433\u0440\u0430\u0445 \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u0443\u0442\u0438 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u0435\u0442\u043a\u0430\u0445 \u0441 \u043e\u0434\u043d\u043e\u0440\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430","\u0413\u0418\u0421 \u0438 \u043a\u0430\u0440\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f"]},{"location":"md/linucb/","title":"Linear Upper Confidence Bound (LinUCB)","text":"<p>LinUCB \u2014 \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0445 \u043c\u043d\u043e\u0433\u043e\u0440\u0443\u043a\u0438\u0445 \u0431\u0430\u043d\u0434\u0438\u0442\u043e\u0432 (Contextual Bandits), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439, \u0433\u0434\u0435 \u0432\u0430\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0431\u0430\u043b\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0435\u0439.</p> <p>LinUCB \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.</p>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u0412\u044b\u0431\u043e\u0440 \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u0430\u043d\u043d\u0435\u0440\u0430 \u0438\u043b\u0438 \u0442\u043e\u0432\u0430\u0440\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0435\u0433\u043e \u0434\u0435\u043c\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432)</li> <li>\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f ( \u041f\u043e\u0434\u0431\u043e\u0440 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043d\u044b \u0434\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0438\u043c\u043f\u0442\u043e\u043c\u043e\u0432 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430)</li> <li>\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 (\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0441\u0442\u0430 \u0438\u043b\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0432\u043e\u0432\u043b\u0435\u0447\u0451\u043d\u043d\u043e\u0441\u0442\u044c)</li> </ol>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#1-linucb","title":"1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f LinUCB","text":"<p>LinUCB \u0441\u043e\u0447\u0435\u0442\u0430\u0435\u0442:</p> <ul> <li>\u041b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430\u0433\u0440\u0430\u0434\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043b\u0438\u043a\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</li> <li>\u041f\u0440\u0438\u043d\u0446\u0438\u043f UCB (Upper Confidence Bound) \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#_2","title":"\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f","text":"<p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \\( a \\) (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u043e\u0432\u0430\u0440\u0430) \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u0430 + \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b:</p> \\[ \\text{score}(a) = \\theta_a^T x + \\alpha \\sqrt{x^T A_a^{-1} x} \\] <p>\u0433\u0434\u0435:</p> <ul> <li>$ x $ \u2014 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432),</li> <li>$ \\theta_a $ \u2014 \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f $ a $,</li> <li>$ A_a $ \u2014 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f $ a $,</li> <li>$ \\alpha $ \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f (\u0447\u0435\u043c \u0432\u044b\u0448\u0435, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 exploration).</li> </ul> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c <code>score</code>.</p>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#2-linucb","title":"2. \u0413\u0434\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f LinUCB?","text":"<ul> <li>\u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 (\u043d\u043e\u0432\u043e\u0441\u0442\u0438, \u0442\u043e\u0432\u0430\u0440\u044b, \u043c\u0443\u0437\u044b\u043a\u0430).</li> <li>A/B-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430.</li> <li>\u041c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u043f\u043e\u0434\u0431\u043e\u0440 \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0438\u043c\u043f\u0442\u043e\u043c\u043e\u0432).</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#3-python","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Python","text":"<pre><code>import numpy as np\n\nclass LinUCB:\n    def __init__(self, n_actions, context_dim, alpha=1.0):\n        self.n_actions = n_actions\n        self.context_dim = context_dim\n        self.alpha = alpha\n\n        # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f:\n        # A_a = I_d (\u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438)\n        # b_a = \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0432\u0435\u043a\u0442\u043e\u0440\n        self.A = [np.identity(context_dim) for _ in range(n_actions)]\n        self.b = [np.zeros(context_dim) for _ in range(n_actions)]\n        self.theta = [np.zeros(context_dim) for _ in range(n_actions)]\n\n    def act(self, context):\n        scores = []\n\n        for a in range(self.n_actions):\n            # \u041e\u0446\u0435\u043d\u043a\u0430 theta_a: A_a^{-1} * b_a\n            self.theta[a] = np.linalg.inv(self.A[a]) @ self.b[a]\n\n            # \u0420\u0430\u0441\u0447\u0435\u0442 UCB-\u043e\u0446\u0435\u043d\u043a\u0438\n            score = self.theta[a].T @ context + \\\n                    self.alpha * np.sqrt(context.T @ np.linalg.inv(self.A[a]) @ context)\n            scores.append(score)\n\n        return np.argmax(scores)  # \u0412\u044b\u0431\u043e\u0440 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c UCB\n\n    def update(self, action, context, reward):\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c A_a \u0438 b_a \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n        self.A[action] += np.outer(context, context)\n        self.b[action] += reward * context\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nn_actions = 3  # 3 \u0441\u0442\u0430\u0442\u044c\u0438 \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\ncontext_dim = 2  # \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442: [\u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u0432\u0440\u0435\u043c\u044f \u0434\u043d\u044f]\nlinucb = LinUCB(n_actions, context_dim, alpha=1.0)\n\n# \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\nusers_contexts = [\n    np.array([25, 0.8]),  # \u041c\u043e\u043b\u043e\u0434\u043e\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0443\u0442\u0440\u043e\n    np.array([40, 0.3]),  # \u0412\u0437\u0440\u043e\u0441\u043b\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0432\u0435\u0447\u0435\u0440\n]\nrewards = [1, 0]  # \u041a\u043b\u0438\u043a (1) \u0438\u043b\u0438 \u043d\u0435\u0442 (0)\n\n# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\nfor _ in range(100):  # 100 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    for user_ctx, true_reward in zip(users_contexts, rewards):\n        action = linucb.act(user_ctx)\n        linucb.update(action, user_ctx, true_reward)\n\n# \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\nnew_user_ctx = np.array([30, 0.5])  # \u041d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\nbest_action = linucb.act(new_user_ctx)\nprint(f\"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f: {best_action}\")\n</code></pre>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#4","title":"4. \u0420\u0430\u0437\u0431\u043e\u0440 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432","text":"","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#a","title":"a) \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f $ a $ (\u0441\u0442\u0430\u0442\u044c\u0438) \u0445\u0440\u0430\u043d\u0438\u043c:</p> <ul> <li>$ A_a = I_d $ (\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438),</li> <li>$ b_a = \\vec{0} $ (\u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u043e\u0432).</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#b-act","title":"b) \u0412\u044b\u0431\u043e\u0440 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (act)","text":"<ol> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c:</li> <li>\u041e\u0446\u0435\u043d\u043a\u0443 $ \\theta_a = A_a^{-1} b_a $.</li> <li>UCB-\u043e\u0446\u0435\u043d\u043a\u0443 = \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 + \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b.</li> <li>\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c UCB.</li> </ol>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#c-update","title":"c) \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (update)","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0433\u0440\u0430\u0434\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043b\u0438\u043a\u0430) \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c:</p> <ul> <li>$ A_a \\leftarrow A_a + x x^T $,</li> <li>$ b_a \\leftarrow b_a + r x $.</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#5-alpha","title":"5. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>alpha</code> \u0438 \u0435\u0433\u043e \u0440\u043e\u043b\u044c","text":"<ul> <li><code>alpha = 0</code>: \u0422\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u044f (exploitation), \u043d\u0435\u0442 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li><code>alpha &gt; 0</code>: \u0411\u0430\u043b\u0430\u043d\u0441 \u043c\u0435\u0436\u0434\u0443 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0435\u0439.</li> <li>\u041a\u0430\u043a \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c <code>alpha</code>:</li> <li>\u041e\u0431\u044b\u0447\u043d\u043e $ \\alpha \\in [0.5, 2] $.</li> <li>\u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043d\u0430 A/B-\u0442\u0435\u0441\u0442\u0430\u0445.</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#6-linucb","title":"6. \u041f\u043b\u044e\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0441\u044b LinUCB","text":"","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430","text":"<ul> <li>\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c.</li> <li>\u041f\u0440\u043e\u0441\u0442 \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#_4","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<ul> <li>\u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446 ($ A_a^{-1} $), \u0447\u0442\u043e \u0434\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.</li> <li>\u041d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 (\u0440\u0435\u0448\u0435\u043d\u0438\u0435: KernelUCB \u0438\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b).</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#7","title":"7. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f","text":"","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#a_1","title":"a) \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0430\u043b\u0433\u0435\u0431\u0440\u0430","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 Cholesky decomposition \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446:   <pre><code>L = np.linalg.cholesky(A_a)\ninv_A = np.linalg.inv(L.T) @ np.linalg.inv(L)\n</code></pre></li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#b","title":"b) \u0413\u0438\u0431\u0440\u0438\u0434\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b","text":"<ul> <li>LinUCB + DQN: \u0414\u043b\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e bandit \u0438 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0433\u043e RL.</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#c-alpha","title":"c) \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 <code>alpha</code>","text":"<ul> <li>\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u0443\u0439\u0442\u0435 <code>alpha</code> \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u043e\u0446\u0435\u043d\u043e\u043a:   <pre><code>alpha = 1.0 / np.sqrt(1 + t)  # t \u2014 \u043d\u043e\u043c\u0435\u0440 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438\n</code></pre></li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/linucb/#8","title":"8. \u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":"<ul> <li>Vowpal Wabbit (<code>vw</code>): \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 LinUCB \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 bandit-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b.</li> <li>Scikit-learn: \u041c\u043e\u0436\u043d\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>LinearRegression</code> \u0434\u043b\u044f UCB.</li> </ul>","tags":["\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","\u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u0422\u043e\u0440\u0433\u043e\u0432\u043b\u044f"]},{"location":"md/merkle_patricia_trie/","title":"Merkle Patricia Trie (MPT)","text":""},{"location":"md/merkle_patricia_trie/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>Merkle Patricia Trie (MPT) - \u044d\u0442\u043e \u0433\u0438\u0431\u0440\u0438\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0447\u0435\u0442\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Patricia Trie (\u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430) \u0438 \u0445\u0435\u0448-\u0434\u0435\u0440\u0435\u0432\u0430 \u041c\u0435\u0440\u043a\u043b\u0430. \u042d\u0442\u043e \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d-\u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 Ethereum.</p> <p>Merkle Patricia Trie - \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0447\u0435\u0442\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u044b\u0445 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0445\u0435\u0448-\u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438. \u0415\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0435 Ethereum \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0431\u044a\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445.</p> <p>\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e\u0439. \u0412 production-\u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 (\u043a\u0430\u043a Ethereum) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p>"},{"location":"md/merkle_patricia_trie/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":""},{"location":"md/merkle_patricia_trie/#1-patricia-trie","title":"1. Patricia Trie (\u041f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e)","text":"<p>\u042d\u0442\u043e \u0441\u0436\u0430\u0442\u043e\u0435 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e, \u0433\u0434\u0435 \u0443\u0437\u043b\u044b \u0441 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0441 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u0443\u0437\u043b\u043e\u043c. \u042d\u0442\u043e \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0438 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u043f\u043e\u0438\u0441\u043a.</p>"},{"location":"md/merkle_patricia_trie/#2-","title":"2. \u0425\u0435\u0448-\u0434\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430","text":"<p>\u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0445\u0435\u0448 \u0441\u0432\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0445\u0435\u0448\u0435\u0439 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u0443\u0437\u043b\u043e\u0432, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"md/merkle_patricia_trie/#mpt","title":"\u0422\u0438\u043f\u044b \u0443\u0437\u043b\u043e\u0432 \u0432 MPT","text":"<ol> <li>\u041f\u0443\u0441\u0442\u043e\u0439 \u0443\u0437\u0435\u043b (Empty): \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.</li> <li>\u041b\u0438\u0441\u0442 (Leaf): \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043b\u044e\u0447 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.</li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 (Extension): \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0431\u0449\u0438\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0438 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0443\u0437\u0435\u043b.</li> <li>\u0412\u0435\u0442\u0432\u044c (Branch): \u0443\u0437\u0435\u043b \u0441 16 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0434\u043b\u044f 16-\u0440\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.</li> </ol>"},{"location":"md/merkle_patricia_trie/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435","text":"<ol> <li> <p>\u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d Ethereum:</p> </li> <li> <p>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f (\u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b, \u0431\u0430\u043b\u0430\u043d\u0441\u044b)</p> </li> <li>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u043a\u0432\u0438\u0442\u0430\u043d\u0446\u0438\u0439</li> <li> <p>\u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043f\u043e\u043b\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f</p> </li> <li> <p>\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b:</p> </li> <li> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445</p> </li> <li> <p>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f/\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f</p> </li> <li> <p>\u0421\u0438\u0441\u0442\u0435\u043c\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439:</p> </li> <li>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439</li> </ol>"},{"location":"md/merkle_patricia_trie/#python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Python","text":"<p>\u0412\u043e\u0442 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Merkle Patricia Trie \u043d\u0430 Python:</p> <pre><code>import rlp\nfrom hashlib import sha3_256\nfrom typing import Dict, List, Optional, Tuple\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0443\u0437\u043b\u043e\u0432\nNibbles = List[int]\nNode = List[bytes]\n\n# \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435/\u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 RLP\ndef encode_node(node: Node) -&gt; bytes:\n    return rlp.encode(node)\n\ndef decode_node(data: bytes) -&gt; Node:\n    return rlp.decode(data)\n\n# \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\ndef keccak256(data: bytes) -&gt; bytes:\n    return sha3_256(data).digest()\n\nclass MerklePatriciaTrie:\n    def __init__(self, storage: Dict[bytes, bytes], root_hash: Optional[bytes] = None):\n        self._storage = storage\n        self.root_hash = root_hash\n\n    def get(self, key: bytes) -&gt; Optional[bytes]:\n        return self._get(self.root_hash, self.bytes_to_nibbles(key))\n\n    def _get(self, node_hash: Optional[bytes], nibbles: Nibbles) -&gt; Optional[bytes]:\n        if node_hash is None:\n            return None\n\n        node = decode_node(self._storage[node_hash])\n\n        if len(node) == 2:  # \u041b\u0438\u0441\u0442 \u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n            path, rest = self.decode_path(node[0])\n            if nibbles[:len(path)] == path:\n                if self.is_leaf(node[0]):\n                    if len(nibbles) == len(path):\n                        return node[1]\n                else:  # \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n                    return self._get(node[1], nibbles[len(path):])\n        elif len(node) == 17:  # \u0412\u0435\u0442\u0432\u044c\n            if not nibbles:\n                return node[16] if node[16] else None\n            child_hash = node[nibbles[0]]\n            return self._get(child_hash, nibbles[1:])\n\n        return None\n\n    def put(self, key: bytes, value: bytes):\n        nibbles = self.bytes_to_nibbles(key)\n        self.root_hash, _ = self._put(self.root_hash, nibbles, value)\n\n    def _put(self, node_hash: Optional[bytes], nibbles: Nibbles, value: bytes) -&gt; Tuple[bytes, bool]:\n        if node_hash is None:\n            # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043b\u0438\u0441\u0442\n            new_node = [self.encode_path(nibbles, True), value]\n            new_node_encoded = encode_node(new_node)\n            new_node_hash = keccak256(new_node_encoded)\n            self._storage[new_node_hash] = new_node_encoded\n            return new_node_hash, True\n\n        node = decode_node(self._storage[node_hash])\n\n        if len(node) == 2:  # \u041b\u0438\u0441\u0442 \u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n            path, _ = self.decode_path(node[0])\n            common_prefix = self.find_common_prefix(nibbles, path)\n\n            if common_prefix == len(path):\n                if self.is_leaf(node[0]):\n                    # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043b\u0438\u0441\u0442\n                    new_node = [node[0], value]\n                    new_node_encoded = encode_node(new_node)\n                    new_node_hash = keccak256(new_node_encoded)\n                    self._storage[new_node_hash] = new_node_encoded\n                    return new_node_hash, True\n                else:  # \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n                    child_hash, updated = self._put(node[1], nibbles[len(path):], value)\n                    if updated:\n                        new_node = [node[0], child_hash]\n                        new_node_encoded = encode_node(new_node)\n                        new_node_hash = keccak256(new_node_encoded)\n                        self._storage[new_node_hash] = new_node_encoded\n                        return new_node_hash, True\n                    return node_hash, False\n            else:\n                # \u041d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0443\u0437\u0435\u043b\n                branch_node = [b''] * 17\n                if len(path) == common_prefix + 1:\n                    branch_node[path[common_prefix]] = node[1]\n                else:\n                    extension_path = path[common_prefix+1:]\n                    extension_node = [\n                        self.encode_path(extension_path, self.is_leaf(node[0])),\n                        node[1]\n                    ]\n                    extension_encoded = encode_node(extension_node)\n                    extension_hash = keccak256(extension_encoded)\n                    self._storage[extension_hash] = extension_encoded\n                    branch_node[path[common_prefix]] = extension_hash\n\n                if len(nibbles) == common_prefix:\n                    branch_node[16] = value\n                else:\n                    leaf_path = nibbles[common_prefix+1:]\n                    leaf_node = [\n                        self.encode_path(leaf_path, True),\n                        value\n                    ]\n                    leaf_encoded = encode_node(leaf_node)\n                    leaf_hash = keccak256(leaf_encoded)\n                    self._storage[leaf_hash] = leaf_encoded\n                    branch_node[nibbles[common_prefix]] = leaf_hash\n\n                if common_prefix == 0:\n                    branch_encoded = encode_node(branch_node)\n                    branch_hash = keccak256(branch_encoded)\n                    self._storage[branch_hash] = branch_encoded\n                    return branch_hash, True\n                else:\n                    extension_node = [\n                        self.encode_path(path[:common_prefix], False),\n                        branch_hash\n                    ]\n                    extension_encoded = encode_node(extension_node)\n                    extension_hash = keccak256(extension_encoded)\n                    self._storage[extension_hash] = extension_encoded\n                    return extension_hash, True\n        elif len(node) == 17:  # \u0412\u0435\u0442\u0432\u044c\n            if not nibbles:\n                if node[16] == value:\n                    return node_hash, False\n                new_node = node.copy()\n                new_node[16] = value\n                new_node_encoded = encode_node(new_node)\n                new_node_hash = keccak256(new_node_encoded)\n                self._storage[new_node_hash] = new_node_encoded\n                return new_node_hash, True\n            else:\n                child_hash, updated = self._put(node[nibbles[0]], nibbles[1:], value)\n                if updated:\n                    new_node = node.copy()\n                    new_node[nibbles[0]] = child_hash\n                    new_node_encoded = encode_node(new_node)\n                    new_node_hash = keccak256(new_node_encoded)\n                    self._storage[new_node_hash] = new_node_encoded\n                    return new_node_hash, True\n                return node_hash, False\n\n        raise Exception(\"Invalid node\")\n\n    @staticmethod\n    def bytes_to_nibbles(key: bytes) -&gt; Nibbles:\n        nibbles = []\n        for byte in key:\n            nibbles.append(byte &gt;&gt; 4)\n            nibbles.append(byte &amp; 0x0F)\n        return nibbles\n\n    @staticmethod\n    def nibbles_to_bytes(nibbles: Nibbles) -&gt; bytes:\n        if len(nibbles) % 2 != 0:\n            raise ValueError(\"Nibbles must be even length\")\n        bytes_list = []\n        for i in range(0, len(nibbles), 2):\n            byte = (nibbles[i] &lt;&lt; 4) | nibbles[i+1]\n            bytes_list.append(byte)\n        return bytes(bytes_list)\n\n    @staticmethod\n    def encode_path(path: Nibbles, is_leaf: bool) -&gt; bytes:\n        flags = 0x20 if is_leaf else 0x00\n        if len(path) % 2 != 0:\n            flags |= 0x10\n            first_nibble = path[0]\n            path = path[1:]\n        else:\n            first_nibble = 0\n\n        first_byte = flags | first_nibble\n        path_bytes = [first_byte] + path\n        return bytes(path_bytes)\n\n    @staticmethod\n    def decode_path(path: bytes) -&gt; Tuple[Nibbles, bool]:\n        if not path:\n            return [], False\n\n        first_byte = path[0]\n        is_leaf = (first_byte &amp; 0x20) != 0\n        has_odd_nibble = (first_byte &amp; 0x10) != 0\n\n        nibbles = []\n        if has_odd_nibble:\n            nibbles.append(first_byte &amp; 0x0F)\n\n        for byte in path[1:]:\n            nibbles.append(byte &gt;&gt; 4)\n            nibbles.append(byte &amp; 0x0F)\n\n        return nibbles, is_leaf\n\n    @staticmethod\n    def is_leaf(path: bytes) -&gt; bool:\n        return (path[0] &amp; 0x20) != 0\n\n    @staticmethod\n    def find_common_prefix(a: Nibbles, b: Nibbles) -&gt; int:\n        length = min(len(a), len(b))\n        for i in range(length):\n            if a[i] != b[i]:\n                return i\n        return length\n</code></pre>"},{"location":"md/merkle_patricia_trie/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code># \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0438 \u0434\u0435\u0440\u0435\u0432\u0430\nstorage = {}\ntrie = MerklePatriciaTrie(storage)\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\ntrie.put(b'key1', b'value1')\ntrie.put(b'key2', b'value2')\ntrie.put(b'key3', b'value3')\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(trie.get(b'key1'))  # b'value1'\nprint(trie.get(b'key2'))  # b'value2'\nprint(trie.get(b'key4'))  # None\n\n# \u041a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u0445\u0435\u0448 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nold_root = trie.root_hash\ntrie.put(b'key1', b'new_value1')\nprint(trie.root_hash != old_root)  # True\n</code></pre>"},{"location":"md/merkle_patricia_trie/#_5","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ol> <li>16-\u0440\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435: \u041a\u043b\u044e\u0447\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \"\u043d\u0438\u0431\u0431\u043b\u043e\u0432\" (4-\u0431\u0438\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439) \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f.</li> <li>\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0438: \u041f\u0443\u0442\u0438 \u0432 \u0443\u0437\u043b\u0430\u0445 \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u0444\u043b\u0430\u0433\u0430\u043c\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u043c\u0438 \u0442\u0438\u043f \u0443\u0437\u043b\u0430 (\u043b\u0438\u0441\u0442 \u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435) \u0438 \u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u0438\u043d\u044b.</li> <li>\u0421\u0436\u0430\u0442\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0443\u0437\u043b\u044b \u0441 \u043e\u0434\u043d\u0438\u043c \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f.</li> <li>\u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0422\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u0443\u0437\u043b\u044b \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c.</li> </ol>"},{"location":"md/merkle_tree/","title":"\u0414\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430 (Merkle Tree)","text":"<p>\u0414\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430 \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043d\u043e \u0448\u0438\u0440\u043e\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438, \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d-\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u0445, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445, \u0433\u0434\u0435 \u0432\u0430\u0436\u043d\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0414\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430 \u2014 \u043c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043d\u043e \u043b\u0435\u0436\u0438\u0442 \u0432 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043d\u043e\u0433\u0438\u0445 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Python \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u044c \u0435\u0433\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0440\u0430\u0431\u043e\u0442\u044b.</p>"},{"location":"md/merkle_tree/#1","title":"1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u0438\u044f","text":"<p>\u0414\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430 \u2014 \u044d\u0442\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c:</p> <ul> <li>\u041b\u0438\u0441\u0442\u044c\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0445\u0435\u0448-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0443\u0437\u043b\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0445\u0435\u0448-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0445\u0435\u0448\u0435\u0439 \u0438\u0445 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u0443\u0437\u043b\u043e\u0432.</li> <li>\u041a\u043e\u0440\u0435\u043d\u044c \u0434\u0435\u0440\u0435\u0432\u0430 (Merkle Root) \u2014 \u044d\u0442\u043e \u0445\u0435\u0448, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u043e\u0431\u043e\u0439 \u0441\u0432\u043e\u0434\u043a\u0443 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.</li> </ul>"},{"location":"md/merkle_tree/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b:","text":"<pre><code>        Root (Hash(H1 + H2))\n        /          \\\n   H1 (Hash(A+B))  H2 (Hash(C+D))\n   /      \\        /      \\\nHash(A) Hash(B) Hash(C) Hash(D)\n  A       B       C       D\n</code></pre> <p>\u0413\u0434\u0435 <code>A, B, C, D</code> \u2014 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 <code>+</code> \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044e.</p>"},{"location":"md/merkle_tree/#2","title":"2. \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 \u041c\u0435\u0440\u043a\u043b\u0430","text":""},{"location":"md/merkle_tree/#1-bitcoin-ethereum","title":"1) \u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d (Bitcoin, Ethereum)","text":"<ul> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0431\u0435\u0437 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u0441\u0435\u0433\u043e \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 (Simplified Payment Verification, SPV).</li> <li>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0431\u043b\u043e\u043a.</li> </ul>"},{"location":"md/merkle_tree/#2-p2p-","title":"2) \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 P2P-\u0441\u0435\u0442\u0438","text":"<ul> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 torrent-\u0441\u0435\u0442\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 BitTorrent).</li> <li>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0443\u0437\u043b\u0430\u043c\u0438.</li> </ul>"},{"location":"md/merkle_tree/#3","title":"3) \u041a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b","text":"<ul> <li>\u0426\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0445\u0435\u0448\u0435\u0439 (Merkle Signatures).</li> <li>\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Certificate Transparency.</li> </ul>"},{"location":"md/merkle_tree/#4","title":"4) \u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 Apache Cassandra).</li> </ul>"},{"location":"md/merkle_tree/#3-python","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 Python","text":"<p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u041c\u0435\u0440\u043a\u043b\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0445\u0435\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 SHA-256.</p>"},{"location":"md/merkle_tree/#_2","title":"\u041a\u043e\u0434:","text":"<pre><code>import hashlib\n\nclass MerkleTree:\n    def __init__(self, data):\n        self.data = data\n        self.tree = self.build_tree()\n\n    def hash(self, value):\n        return hashlib.sha256(value.encode()).hexdigest()\n\n    def build_tree(self):\n        # \u0425\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0434\u0430\u043d\u043d\u044b\u0445\n        leaf_nodes = [self.hash(item) for item in self.data]\n        tree = [leaf_nodes]\n\n        # \u0421\u0442\u0440\u043e\u0438\u043c \u0434\u0435\u0440\u0435\u0432\u043e \u043e\u0442 \u043b\u0438\u0441\u0442\u044c\u0435\u0432 \u043a \u043a\u043e\u0440\u043d\u044e\n        current_level = leaf_nodes\n        while len(current_level) &gt; 1:\n            next_level = []\n            for i in range(0, len(current_level), 2):\n                left = current_level[i]\n                right = current_level[i + 1] if (i + 1) &lt; len(current_level) else left\n                combined = left + right\n                next_level.append(self.hash(combined))\n            tree.append(next_level)\n            current_level = next_level\n\n        return tree\n\n    def get_root(self):\n        return self.tree[-1][0] if self.tree else None\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\ndata = [\"A\", \"B\", \"C\", \"D\"]\nmerkle_tree = MerkleTree(data)\nprint(\"\u0414\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430:\")\nfor level in merkle_tree.tree:\n    print(level)\nprint(\"\\nMerkle Root:\", merkle_tree.get_root())\n</code></pre>"},{"location":"md/merkle_tree/#_3","title":"\u0412\u044b\u0432\u043e\u0434:","text":"<pre><code>\u0414\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430:\n[\n    ['559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd', 'df7e70e5021544f4834bbee64a9e3789febc4be81470df629cad6ddb03320a5c', '6b23c0d5f35d1b11f9b683f0b0a617355deb11277d91ae091d399c655b87940d', '6b23c0d5f35d1b11f9b683f0b0a617355deb11277d91ae091d399c655b87940d'],\n    ['c4eaf19a7c8c0e85b69a0bdeb8a5f3c0a1b3c3e3e3e3e3e3e3e3e3e3e3e3e3e', 'a3f3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3'],\n    ['d3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3']\n]\n\nMerkle Root: d3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3\n</code></pre>"},{"location":"md/merkle_tree/#4_1","title":"4. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435 \u041c\u0435\u0440\u043a\u043b\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442 <code>A</code> \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0435\u0440\u0435\u0432\u043e, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0443\u0442\u044c \u041c\u0435\u0440\u043a\u043b\u0430 (Merkle Path) \u2014 \u0445\u0435\u0448\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u0440\u043d\u044f.</p>"},{"location":"md/merkle_tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438:","text":"<pre><code>def verify_inclusion(merkle_tree, element, merkle_path):\n    current_hash = merkle_tree.hash(element)\n    for sibling_hash in merkle_path:\n        current_hash = merkle_tree.hash(current_hash + sibling_hash)\n    return current_hash == merkle_tree.get_root()\n\n# \u041f\u0443\u0442\u044c \u0434\u043b\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \"A\" (\u043f\u0440\u0430\u0432\u044b\u0439 sibling \u0445\u0435\u0448\u0430 \"B\")\nmerkle_path = [\n    \"df7e70e5021544f4834bbee64a9e3789febc4be81470df629cad6ddb03320a5c\",  # \u0425\u0435\u0448 \"B\"\n    \"a3f3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3\"   # \u0425\u0435\u0448 \u0443\u0440\u043e\u0432\u043d\u044f \u0432\u044b\u0448\u0435\n]\n\nprint(\"\u042d\u043b\u0435\u043c\u0435\u043d\u0442 'A' \u0432 \u0434\u0435\u0440\u0435\u0432\u0435?\", verify_inclusion(merkle_tree, \"A\", merkle_path))  # True\n</code></pre>"},{"location":"md/merkle_tree/#5","title":"5. \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438","text":"<ol> <li>Merkle Patricia Trie (Ethereum) \u2014 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0435\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u041c\u0435\u0440\u043a\u043b\u0430 \u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e.</li> <li>Sparse Merkle Tree \u2014 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>Batch Updates \u2014 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043b\u0438\u0441\u0442\u044c\u0435\u0432.</li> </ol>"},{"location":"md/policy_gradient/","title":"Policy Gradient (PG)","text":"<p>Policy Gradient (PG) \u2014 \u044d\u0442\u043e \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c (RL), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u044e\u0442 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c Q-\u0444\u0443\u043d\u043a\u0446\u0438\u044e (\u043a\u0430\u043a \u0432 DQN). \u042d\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043a\u043e\u0433\u0434\u0430:</p> <ul> <li>\u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0432\u043d\u044b\u043c \u0441\u043a\u043e\u0440\u043e\u043c).</li> <li>\u041d\u0443\u0436\u043d\u0430 \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439).</li> </ul>"},{"location":"md/policy_gradient/#1-policy-gradient","title":"1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f Policy Gradient","text":""},{"location":"md/policy_gradient/#dqn","title":"\u0427\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 DQN?","text":"\u0410\u0441\u043f\u0435\u043a\u0442 DQN Policy Gradient (PG) \u0427\u0442\u043e \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f? Q-\u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439) \u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \\(\\pi(a \\| s)\\) \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0422\u0438\u043f \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 \u0416\u0451\u0441\u0442\u043a\u0430\u044f (greedy/\\(\\epsilon\\)-\u0436\u0430\u0434\u043d\u0430\u044f) \u0421\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f (\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u0430\u044f) \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0414\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0414\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u044b Deep Q-Learning REINFORCE, Actor-Critic, PPO"},{"location":"md/policy_gradient/#_1","title":"\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438","text":"<p>\u0426\u0435\u043b\u044c \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0443\u044e \u043d\u0430\u0433\u0440\u0430\u0434\u0443 \\( J(\\theta) \\):</p> \\[\\nabla_\\theta J(\\theta) = \\mathbb{E}_{\\pi_\\theta} \\left[ \\nabla_\\theta \\log \\pi_\\theta(a|s) \\cdot Q^\\pi(s, a) \\right]\\] <p>\u0433\u0434\u0435:</p> <ul> <li>$ \\pi_\\theta(a|s) $ \u2014 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f $ a $ \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 $ s $,</li> <li>$ Q^\\pi(s, a) $ \u2014 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u043c\u043e\u0436\u043d\u043e \u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c).</li> </ul>"},{"location":"md/policy_gradient/#2-policy-gradient","title":"2. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b Policy Gradient","text":""},{"location":"md/policy_gradient/#a-reinforce-monte-carlo-pg","title":"a) REINFORCE (Monte Carlo PG)","text":"<ul> <li>\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 (return) \u0437\u0430 \u044d\u043f\u0438\u0437\u043e\u0434.</li> <li>\u041f\u0440\u043e\u0441\u0442 \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e.</li> </ul>"},{"location":"md/policy_gradient/#b-actor-critic","title":"b) Actor-Critic","text":"<ul> <li>\u0410\u043a\u0442\u043e\u0440 (Actor) \u2014 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430).</li> <li>\u041a\u0440\u0438\u0442\u0438\u043a (Critic) \u2014 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 $ Q(s, a) $ \u0438\u043b\u0438 $ V(s) $.</li> <li>\u0421\u043d\u0438\u0436\u0430\u0435\u0442 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 REINFORCE.</li> </ul>"},{"location":"md/policy_gradient/#c-ppo-proximal-policy-optimization","title":"c) PPO (Proximal Policy Optimization)","text":"<ul> <li>\u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</li> </ul>"},{"location":"md/policy_gradient/#3-reinforce","title":"3. \u041f\u0440\u0438\u043c\u0435\u0440: REINFORCE \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439","text":""},{"location":"md/policy_gradient/#_2","title":"\u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 5 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0435\u0433\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u0438.</p>"},{"location":"md/policy_gradient/#pytorch","title":"\u041a\u043e\u0434 \u043d\u0430 PyTorch","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nfrom collections import deque\n\nclass PolicyNetwork(nn.Module):\n    def __init__(self, state_dim, action_dim):\n        super(PolicyNetwork, self).__init__()\n        self.fc1 = nn.Linear(state_dim, 64)\n        self.fc2 = nn.Linear(64, 64)\n        self.fc3 = nn.Linear(64, action_dim)\n        self.softmax = nn.Softmax(dim=-1)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        return self.softmax(self.fc3(x))\n\nclass REINFORCE:\n    def __init__(self, state_dim, action_dim, lr=0.01, gamma=0.99):\n        self.policy = PolicyNetwork(state_dim, action_dim)\n        self.optimizer = optim.Adam(self.policy.parameters(), lr=lr)\n        self.gamma = gamma\n        self.memory = []\n\n    def act(self, state):\n        state = torch.FloatTensor(state).unsqueeze(0)\n        probs = self.policy(state)\n        action = torch.multinomial(probs, 1).item()\n        return action\n\n    def remember(self, state, action, reward):\n        self.memory.append((state, action, reward))\n\n    def learn(self):\n        returns = []\n        G = 0\n        # \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0438\u0441\u043a\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u044b \u0441 \u043a\u043e\u043d\u0446\u0430 \u044d\u043f\u0438\u0437\u043e\u0434\u0430\n        for reward in reversed([x[2] for x in self.memory]):\n            G = reward + self.gamma * G\n            returns.insert(0, G)\n\n        returns = torch.FloatTensor(returns)\n        returns = (returns - returns.mean()) / (returns.std() + 1e-9)  # \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n\n        policy_loss = []\n        for (state, action, _), G in zip(self.memory, returns):\n            state = torch.FloatTensor(state).unsqueeze(0)\n            probs = self.policy(state)\n            log_prob = torch.log(probs.squeeze(0)[action])\n            policy_loss.append(-log_prob * G)\n\n        self.optimizer.zero_grad()\n        loss = torch.stack(policy_loss).sum()\n        loss.backward()\n        self.optimizer.step()\n        self.memory = []  # \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nstate_dim = 10  # \u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f)\naction_dim = 5  # 5 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438\nagent = REINFORCE(state_dim, action_dim)\n\n# \u0418\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u0437\u043e\u0434\u0430 (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0441\u0435\u0430\u043d\u0441)\nstates = [np.random.randn(state_dim) for _ in range(10)]  # 10 \u0448\u0430\u0433\u043e\u0432\nrewards = [np.random.choice([-0.1, 0.5, 1.0]) for _ in range(10)]  # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u044b\n\nfor state, reward in zip(states, rewards):\n    action = agent.act(state)\n    agent.remember(state, action, reward)\n\nagent.learn()  # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443\n</code></pre>"},{"location":"md/policy_gradient/#4-actor-critic","title":"4. \u041f\u0440\u0438\u043c\u0435\u0440: Actor-Critic \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439","text":""},{"location":"md/policy_gradient/#_3","title":"\u041a\u043e\u0434","text":"<pre><code>class ValueNetwork(nn.Module):\n    def __init__(self, state_dim):\n        super(ValueNetwork, self).__init__()\n        self.fc1 = nn.Linear(state_dim, 64)\n        self.fc2 = nn.Linear(64, 64)\n        self.fc3 = nn.Linear(64, 1)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        return self.fc3(x)\n\nclass ActorCritic:\n    def __init__(self, state_dim, action_dim, lr=0.001, gamma=0.99):\n        self.actor = PolicyNetwork(state_dim, action_dim)\n        self.critic = ValueNetwork(state_dim)\n        self.optimizer = optim.Adam(\n            list(self.actor.parameters()) + list(self.critic.parameters()),\n            lr=lr\n        )\n        self.gamma = gamma\n        self.memory = []\n\n    def act(self, state):\n        state = torch.FloatTensor(state).unsqueeze(0)\n        probs = self.actor(state)\n        action = torch.multinomial(probs, 1).item()\n        return action\n\n    def remember(self, state, action, reward, next_state, done):\n        self.memory.append((state, action, reward, next_state, done))\n\n    def learn(self):\n        states, actions, rewards, next_states, dones = zip(*self.memory)\n\n        states = torch.FloatTensor(np.array(states))\n        next_states = torch.FloatTensor(np.array(next_states))\n        actions = torch.LongTensor(actions)\n        rewards = torch.FloatTensor(rewards)\n        dones = torch.FloatTensor(dones)\n\n        # \u041a\u0440\u0438\u0442\u0438\u043a \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 V(s)\n        values = self.critic(states).squeeze()\n        next_values = self.critic(next_states).squeeze().detach()\n        targets = rewards + (1 - dones) * self.gamma * next_values\n        td_errors = targets - values\n\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0430\u043a\u0442\u043e\u0440\u0430\n        probs = self.actor(states)\n        log_probs = torch.log(probs.gather(1, actions.unsqueeze(1)).squeeze())\n        actor_loss = -(log_probs * td_errors).mean()\n\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043a\u0440\u0438\u0442\u0438\u043a\u0430\n        critic_loss = nn.MSELoss()(values, targets)\n\n        # \u041e\u0431\u0449\u0438\u0439 loss\n        loss = actor_loss + critic_loss\n        self.optimizer.zero_grad()\n        loss.backward()\n        self.optimizer.step()\n        self.memory = []\n</code></pre>"},{"location":"md/policy_gradient/#5-policy-gradient","title":"5. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b Policy Gradient \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f","text":""},{"location":"md/policy_gradient/#a","title":"a) \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438","text":"<ul> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u043b\u0438\u043d\u0438\u044e (baseline) \u0438\u043b\u0438 Actor-Critic.</li> </ul>"},{"location":"md/policy_gradient/#b","title":"b) \u041d\u0435\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435","text":"<ul> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u042d\u043d\u0442\u0440\u043e\u043f\u0438\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f (\u043f\u043e\u043e\u0449\u0440\u044f\u0435\u0442 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439).</li> </ul>"},{"location":"md/policy_gradient/#c","title":"c) \u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: PPO \u0438\u043b\u0438 TRPO (\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438).</li> </ul>"},{"location":"md/policy_gradient/#6","title":"6. \u0413\u0434\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f?","text":"<ul> <li>Spotify \u2192 \u0414\u043b\u044f \u0430\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u0438 \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432.</li> <li>Netflix \u2192 \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.</li> <li>\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u0435\u0434\u044b \u2192 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043b\u0435\u043d\u0442\u0435.</li> </ul>"},{"location":"md/policy_gradient/#7-pg","title":"7. \u0411\u0443\u0434\u0443\u0449\u0435\u0435 PG \u0432 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u0445","text":"<ul> <li>PPO + \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u044b \u2192 \u0423\u0447\u0451\u0442 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>\u041c\u0435\u0442\u0430-\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u2192 \u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0430\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u043a \u043d\u043e\u0432\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c.</li> </ul>"},{"location":"md/prototype/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Prototype (\u041f\u0440\u043e\u0442\u043e\u0442\u0438\u043f)","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Prototype (\u041f\u0440\u043e\u0442\u043e\u0442\u0438\u043f) \u2014 \u044d\u0442\u043e \u043f\u043e\u0440\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u0443\u0442\u0435\u043c \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 (\u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u043e\u0432), \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440. \u042d\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f, \u043a\u043e\u043c\u043f\u043e\u043d\u0443\u044e\u0442\u0441\u044f \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0435\u0451 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/prototype/#prototype_1","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Prototype","text":"<ol> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0439 \u0444\u0430\u0431\u0440\u0438\u043a \u0438\u043b\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u0432</li> <li>\u041a\u043e\u0433\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0434\u043e\u0440\u043e\u0436\u0435, \u0447\u0435\u043c \u0435\u0433\u043e \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> <li>\u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/prototype/#python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432 Python","text":"<p>\u0412 Python \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f <code>copy</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>copy()</code> (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u043d\u043e\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) \u0438 <code>deepcopy()</code> (\u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435).</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/prototype/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>import copy\n\nclass Prototype:\n    def __init__(self):\n        self._objects = {}\n\n    def register_object(self, name, obj):\n        \"\"\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\"\"\"\n        self._objects[name] = obj\n\n    def unregister_object(self, name):\n        \"\"\"\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\"\"\"\n        del self._objects[name]\n\n    def clone(self, name, **attrs):\n        \"\"\"\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b\"\"\"\n        obj = copy.deepcopy(self._objects[name])\n        obj.__dict__.update(attrs)\n        return obj\n\nclass Car:\n    def __init__(self):\n        self.make = \"Toyota\"\n        self.model = \"Camry\"\n        self.color = \"Silver\"\n\n    def __str__(self):\n        return f\"{self.color} {self.make} {self.model}\"\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nprototype = Prototype()\ncar = Car()\nprototype.register_object(\"basic_car\", car)\n\n# \u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\ncar1 = prototype.clone(\"basic_car\")\nprint(car1)  # Silver Toyota Camry\n\n# \u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\ncar2 = prototype.clone(\"basic_car\", color=\"Red\", model=\"Corolla\")\nprint(car2)  # Red Toyota Corolla\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/prototype/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438","text":"<pre><code>import copy\n\nclass Shape:\n    def __init__(self):\n        self.id = None\n        self.type = None\n\n    def clone(self):\n        return copy.deepcopy(self)\n\n    def get_type(self):\n        return self.type\n\n    def get_id(self):\n        return self.id\n\n    def set_id(self, id):\n        self.id = id\n\nclass Rectangle(Shape):\n    def __init__(self):\n        super().__init__()\n        self.type = \"Rectangle\"\n\nclass Circle(Shape):\n    def __init__(self):\n        super().__init__()\n        self.type = \"Circle\"\n\nclass ShapeCache:\n    _shape_map = {}\n\n    @staticmethod\n    def get_shape(shape_id):\n        cached_shape = ShapeCache._shape_map.get(shape_id, None)\n        return cached_shape.clone() if cached_shape else None\n\n    @staticmethod\n    def load():\n        circle = Circle()\n        circle.set_id(\"1\")\n        ShapeCache._shape_map[circle.get_id()] = circle\n\n        rectangle = Rectangle()\n        rectangle.set_id(\"2\")\n        ShapeCache._shape_map[rectangle.get_id()] = rectangle\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nShapeCache.load()\n\ncircle = ShapeCache.get_shape(\"1\")\nprint(f\"Shape: {circle.get_type()}\")  # Shape: Circle\n\nrectangle = ShapeCache.get_shape(\"2\")\nprint(f\"Shape: {rectangle.get_type()}\")  # Shape: Rectangle\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/prototype/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430\u043c\u0438 \u0438\u0433\u0440\u044b","text":"<pre><code>import copy\n\nclass GameCharacter:\n    def __init__(self, health, speed, attack_power):\n        self.health = health\n        self.speed = speed\n        self.attack_power = attack_power\n\n    def clone(self):\n        return copy.deepcopy(self)\n\n    def __str__(self):\n        return f\"Health: {self.health}, Speed: {self.speed}, Attack: {self.attack_power}\"\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439\nwarrior_prototype = GameCharacter(100, 50, 80)\nmage_prototype = GameCharacter(60, 30, 120)\narcher_prototype = GameCharacter(80, 70, 60)\n\n# \u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439\nwarrior1 = warrior_prototype.clone()\nwarrior2 = warrior_prototype.clone()\nwarrior2.health = 120  # \u041c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u043e\u043d\n\nmage1 = mage_prototype.clone()\narcher1 = archer_prototype.clone()\n\nprint(warrior1)  # Health: 100, Speed: 50, Attack: 80\nprint(warrior2)  # Health: 120, Speed: 50, Attack: 80\nprint(mage1)     # Health: 60, Speed: 30, Attack: 120\nprint(archer1)   # Health: 80, Speed: 70, Attack: 60\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/prototype/#_4","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438","text":"<p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> <li>\u0421\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u0423\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u0432</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438</li> </ul> <p>\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:</p> <ul> <li>\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438\u043c\u0435\u044e\u0442 \u0446\u0438\u043a\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438</li> <li>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430</li> </ul> <p>Prototype \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 Python \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Proxy (\u0417\u0430\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c)","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Proxy (\u0417\u0430\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c) \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442-\u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c \u0438\u043b\u0438 placeholder \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u043e\u043a\u0441\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u043e \u0438\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043d\u0435\u043c\u0443.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#proxy_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0446\u0435\u043b\u0438 Proxy:","text":"<ul> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043f\u0435\u0440\u0435\u0434/\u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443</li> <li>\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f (\u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430)</li> <li>\u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432</li> <li>\u0423\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435)</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#_1","title":"\u0422\u0438\u043f\u044b \u043f\u0440\u043e\u043a\u0441\u0438:","text":"<ul> <li>Virtual Proxy - \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0451\u043c\u043a\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>Protection Proxy - \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443</li> <li>Remote Proxy - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435</li> <li>Smart Reference - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443</li> <li>Caching Proxy - \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#1-virtual-proxy","title":"1. Virtual Proxy (\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f)","text":"<pre><code>class LazyImage:\n    def __init__(self, filename):\n        self._filename = filename\n        self._image = None\n\n    def display(self):\n        if self._image is None:\n            print(f\"Loading image {self._filename}\")\n            self._image = f\"Image data for {self._filename}\"\n        print(f\"Displaying {self._filename}\")\n        return self._image\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nimage = LazyImage(\"photo.jpg\")\n# \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0435\u0449\u0451 \u043d\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e\nprint(image.display())  # \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f\nprint(image.display())  # \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f (\u0443\u0436\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e)\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#2-protection-proxy","title":"2. Protection Proxy (\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u0430)","text":"<pre><code>class SensitiveData:\n    def __init__(self):\n        self._data = \"Top Secret Data\"\n\n    def read(self):\n        return self._data\n\nclass DataProxy:\n    def __init__(self, user):\n        self._user = user\n        self._real_data = SensitiveData()\n\n    def read(self):\n        if self._user == \"admin\":\n            return self._real_data.read()\n        else:\n            return \"Access Denied\"\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nadmin_proxy = DataProxy(\"admin\")\nprint(admin_proxy.read())  # \"Top Secret Data\"\n\nuser_proxy = DataProxy(\"user\")\nprint(user_proxy.read())  # \"Access Denied\"\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#3-remote-proxy","title":"3. Remote Proxy (\u0423\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f)","text":"<pre><code>import json\nfrom abc import ABC, abstractmethod\n\nclass DatabaseService(ABC):\n    @abstractmethod\n    def get_data(self, query):\n        pass\n\nclass RealDatabaseService(DatabaseService):\n    def get_data(self, query):\n        # \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0434\u0435\u0441\u044c \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414\n        return {\"result\": f\"Data for query: {query}\"}\n\nclass DatabaseProxy(DatabaseService):\n    def __init__(self):\n        self._real_service = None\n        self._cache = {}\n\n    def get_data(self, query):\n        # \u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n        if self._real_service is None:\n            print(\"Connecting to remote database...\")\n            self._real_service = RealDatabaseService()\n\n        # \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n        if query in self._cache:\n            print(\"Returning cached result\")\n            return self._cache[query]\n\n        result = self._real_service.get_data(query)\n        self._cache[query] = result\n        return result\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nproxy = DatabaseProxy()\nprint(proxy.get_data(\"SELECT * FROM users\"))  # \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 + \u0437\u0430\u043f\u0440\u043e\u0441\nprint(proxy.get_data(\"SELECT * FROM users\"))  # \u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u0438\u0437 \u043a\u0435\u0448\u0430\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#4-smart-proxy","title":"4. Smart Proxy (\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430)","text":"<pre><code>class BankAccount:\n    def __init__(self, balance=0):\n        self._balance = balance\n\n    def deposit(self, amount):\n        self._balance += amount\n\n    def withdraw(self, amount):\n        if amount &gt; self._balance:\n            raise ValueError(\"Insufficient funds\")\n        self._balance -= amount\n\n    def get_balance(self):\n        return self._balance\n\nclass BankAccountProxy:\n    def __init__(self, real_account, owner):\n        self._real_account = real_account\n        self._owner = owner\n        self._access_count = 0\n\n    def deposit(self, amount):\n        self._access_count += 1\n        print(f\"Log: {self._owner} deposited {amount}\")\n        self._real_account.deposit(amount)\n\n    def withdraw(self, amount):\n        self._access_count += 1\n        print(f\"Log: {self._owner} tried to withdraw {amount}\")\n        self._real_account.withdraw(amount)\n\n    def get_balance(self):\n        self._access_count += 1\n        print(f\"Log: {self._owner} checked balance\")\n        return self._real_account.get_balance()\n\n    def get_access_count(self):\n        return self._access_count\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\naccount = BankAccount(100)\nproxy = BankAccountProxy(account, \"John Doe\")\n\nproxy.deposit(50)\nproxy.withdraw(30)\nprint(f\"Balance: {proxy.get_balance()}\")\nprint(f\"Access count: {proxy.get_access_count()}\")\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#proxy_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Proxy:","text":"<ul> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443</li> <li>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430</li> <li>\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0451\u043c\u043a\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432</li> <li>\u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432</li> <li>\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/proxy/#_2","title":"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:","text":"<ul> <li>\u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0442\u043a\u043b\u0438\u043a\u0430 \u0438\u0437-\u0437\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438</li> <li>\u0423\u0441\u043b\u043e\u0436\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 (\u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432)</li> </ul> <p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Proxy \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u043a\u043e\u0434\u0430 \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0451\u043c\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/rnd/","title":"Random Network Distillation (RND)","text":"<p>Random Network Distillation (RND) - \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432 reinforcement learning (RL), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0430\u0433\u0435\u043d\u0442\u0443 \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u0443 \u0447\u0435\u0440\u0435\u0437 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430 \u043d\u043e\u0432\u0438\u0437\u043d\u0443. \u041e\u043d \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438\u0437 OpenAI \u0432 2018 \u0433\u043e\u0434\u0443.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<p>\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c (Reinforcement Learning):</p> <ul> <li>\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u044b (RND \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0430\u0433\u0435\u043d\u0442\u0430\u043c \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u0441\u0440\u0435\u0434\u0430\u0445 \u0441 \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0430\u0433\u0440\u0430\u0434\u0430\u043c\u0438 (sparse rewards), \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440)</li> <li>\u0418\u0433\u0440\u044b (\u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439)</li> <li>\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430 (\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0431\u043e\u0442\u043e\u0432 \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\u043c \u0431\u0435\u0437 \u044f\u0432\u043d\u044b\u0445 reward-\u0444\u0443\u043d\u043a\u0446\u0438\u0439)</li> <li>\u0414\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (\u0412 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0433\u0434\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0431\u043e\u0440 \u0440\u0435\u0434\u043a\u0438\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432))</li> </ul> <p>\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u0440\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430</p> <ul> <li>\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0431\u043e\u0442\u043e\u0432</li> <li>\u0411\u0435\u0441\u043f\u0438\u043b\u043e\u0442\u043d\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#rnd","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f RND","text":"<p>RND \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439:</p> <ol> <li>\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0441\u0435\u0442\u044c (target network) - \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0438 \u0437\u0430\u043c\u043e\u0440\u043e\u0436\u0435\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c</li> <li>\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0441\u0435\u0442\u044c (predictor network) - \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u044b\u0445\u043e\u0434 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0441\u0435\u0442\u0438</li> </ol> <p>\u041a\u043e\u0433\u0434\u0430 \u0430\u0433\u0435\u043d\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, predictor \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u043b\u043e\u0445\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435). \u041f\u043e \u043c\u0435\u0440\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u044b\u043c, \u043e\u0448\u0438\u0431\u043a\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#rnd_1","title":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 RND","text":"<p>RND \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432:</p> <ul> <li>\u0420\u0430\u0437\u0432\u0435\u0434\u044b\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 (exploration)</li> <li>\u0421\u0440\u0435\u0434\u0430\u0445 \u0441 \u0440\u0435\u0434\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438</li> <li>\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c \u0432 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0430\u0445</li> </ul>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Python","text":"<p>\u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 RND \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c PyTorch:</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\n\nclass RNDNetwork(nn.Module):\n    def __init__(self, input_dim, hidden_dim=64):\n        super(RNDNetwork, self).__init__()\n        self.net = nn.Sequential(\n            nn.Linear(input_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim)\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\nclass RND:\n    def __init__(self, input_dim, lr=1e-4, device='cpu'):\n        self.device = device\n        self.target = RNDNetwork(input_dim).to(device)\n        self.predictor = RNDNetwork(input_dim).to(device)\n\n        # \u0417\u0430\u043c\u043e\u0440\u0430\u0436\u0438\u0432\u0430\u0435\u043c \u0432\u0435\u0441\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0441\u0435\u0442\u0438\n        for param in self.target.parameters():\n            param.requires_grad = False\n\n        self.optimizer = optim.Adam(self.predictor.parameters(), lr=lr)\n        self.loss_fn = nn.MSELoss()\n\n    def compute_intrinsic_reward(self, state):\n        \"\"\"\n        \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\n        \"\"\"\n        state_tensor = torch.FloatTensor(state).to(self.device)\n\n        with torch.no_grad():\n            target_features = self.target(state_tensor)\n\n        predicted_features = self.predictor(state_tensor)\n        reward = torch.mean((predicted_features - target_features)**2, dim=1)\n        return reward.cpu().detach().numpy()\n\n    def update(self, states):\n        \"\"\"\n        \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0441\u0435\u0442\u044c\n        \"\"\"\n        states_tensor = torch.FloatTensor(np.array(states)).to(self.device)\n\n        # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u0444\u0438\u0447\u0438\n        with torch.no_grad():\n            target_features = self.target(states_tensor)\n\n        # \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0438\u0447\u0438\n        predicted_features = self.predictor(states_tensor)\n\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043e\u0442\u0435\u0440\u0438 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\n        loss = self.loss_fn(predicted_features, target_features)\n\n        self.optimizer.zero_grad()\n        loss.backward()\n        self.optimizer.step()\n\n        return loss.item()\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nif __name__ == \"__main__\":\n    # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n    state_dim = 10  # \u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\n    batch_size = 32\n\n    # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f RND\n    rnd = RND(state_dim)\n\n    # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439\n    states = np.random.randn(batch_size, state_dim)\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f\n    intrinsic_rewards = rnd.compute_intrinsic_reward(states)\n    print(\"Intrinsic rewards for new states:\", intrinsic_rewards)\n\n    # \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u0442\u0438\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u0445\n    for _ in range(100):\n        loss = rnd.update(states)\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    intrinsic_rewards_after = rnd.compute_intrinsic_reward(states)\n    print(\"Intrinsic rewards after training:\", intrinsic_rewards_after)\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#rnd_2","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f RND \u0441 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c","text":"<p>\u0412\u043e\u0442 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c RND \u0441 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c PPO:</p> <pre><code>import gym\nfrom stable_baselines3 import PPO\nfrom stable_baselines3.common.vec_env import DummyVecEnv\nfrom stable_baselines3.common.callbacks import BaseCallback\n\nclass RNDPPO(PPO):\n    def __init__(self, *args, rnd_kwargs=None, intrinsic_weight=1.0, **kwargs):\n        super(RNDPPO, self).__init__(*args, **kwargs)\n        self.rnd = RND(self.observation_space.shape[0], **rnd_kwargs or {})\n        self.intrinsic_weight = intrinsic_weight\n\n    def collect_rollouts(self, *args, **kwargs):\n        # \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0431\u043e\u0440 rollout \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0433\u043e \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f\n        rollout_data = super().collect_rollouts(*args, **kwargs)\n\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435\n        intrinsic_rewards = self.rnd.compute_intrinsic_reward(rollout_data.observations)\n\n        # \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0435 \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435\n        rollout_data.rewards += self.intrinsic_weight * intrinsic_rewards\n\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c RND\n        self.rnd.update(rollout_data.observations)\n\n        return rollout_data\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\u043c\nenv = DummyVecEnv([lambda: gym.make(\"MountainCarContinuous-v0\")])\n\nmodel = RNDPPO(\n    \"MlpPolicy\",\n    env,\n    rnd_kwargs={\"hidden_dim\": 64, \"lr\": 1e-4},\n    intrinsic_weight=0.1,\n    verbose=1\n)\n\nmodel.learn(total_timesteps=10000)\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#rnd_3","title":"\u0412\u0430\u0436\u043d\u044b\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b RND","text":"<ol> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0441\u0435\u0442\u0438: \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0441\u0435\u0442\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f.</li> <li>\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0441\u0435\u0442\u0438: \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0441\u0435\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c MSE \u043c\u0435\u0436\u0434\u0443 \u0441\u0432\u043e\u0438\u043c \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u0438 \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0441\u0435\u0442\u0438.</li> <li>\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435: \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043c\u0435\u0440\u0430 \u043d\u043e\u0432\u0438\u0437\u043d\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f.</li> <li>\u0413\u0438\u0431\u0440\u0438\u0434\u043d\u043e\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435: \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0447\u0430\u0441\u0442\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u044e\u0442 \u0432\u043d\u0435\u0448\u043d\u0435\u0435 \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435.</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/rnd/#rnd_4","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 RND","text":"<ul> <li>\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 (\u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 count-based \u043c\u0435\u0442\u043e\u0434\u043e\u0432)</li> <li>\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u044b\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439</li> <li>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0432 \u0441\u0440\u0435\u0434\u0430\u0445 \u0441 \u0440\u0435\u0434\u043a\u0438\u043c\u0438 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438</li> </ul> <p>RND \u0441\u0442\u0430\u043b \u0432\u0430\u0436\u043d\u044b\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u043c \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0433\u0434\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u044b \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u043e.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430"]},{"location":"md/sac_rnd/","title":"SAC-RND","text":"<p>SAC-RND (Soft Actor-Critic with Random Network Distillation) - \u044d\u0442\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 Soft Actor-Critic, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 \u0442\u0435\u0445\u043d\u0438\u043a\u0443 Random Network Distillation (RND) \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0440\u0435\u0434\u0430\u0445 \u0441 \u0440\u0435\u0434\u043a\u0438\u043c\u0438 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438. SAC-RND \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u0441\u043e\u0447\u0435\u0442\u0430\u044e\u0449\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044e (SAC) \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u0438 (RND), \u043d\u0430\u0445\u043e\u0434\u044f\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u044b \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0440\u0435\u0434\u043a\u0438\u0445 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0439.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<ol> <li>\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430 (\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0431\u043e\u0442\u043e\u0432 \u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434)</li> <li>\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 (\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u043d\u0443\u043b\u044f (\u0431\u0435\u0437 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f)</li> <li>\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (\u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438)</li> <li>\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (\u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0445/\u0445\u0438\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432)</li> <li>\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430 (\u0430\u043d\u0430\u043b\u0438\u0437 \u0431\u0435\u043b\u043a\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440)</li> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b (\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432)</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#sac-rnd_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b SAC-RND","text":"<ol> <li> <p>Soft Actor-Critic (SAC): \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0430\u043a\u0442\u043e\u0440-\u043a\u0440\u0438\u0442\u0438\u043a \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u044d\u043d\u0442\u0440\u043e\u043f\u0438\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0433\u0440\u0430\u0434\u0443, \u043d\u043e \u0438 \u0441\u0442\u043e\u0445\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438.</p> </li> <li> <p>Random Network Distillation (RND): \u041c\u0435\u0442\u043e\u0434 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435:</p> </li> <li>\u0424\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c (target) \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \"\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435\" \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439</li> <li>\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0442\u044c (predictor) \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u044b\u0445\u043e\u0434 target \u0441\u0435\u0442\u0438</li> <li>\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043d\u0430\u0433\u0440\u0430\u0434\u0430 \u0437\u0430 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#sac-rnd_2","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0431\u043e\u0442\u044b SAC-RND","text":"<ol> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f RND</li> <li>\u042d\u0442\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u043d\u0430\u0433\u0440\u0430\u0434\u0435 \u043a\u0430\u043a \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u044f</li> <li>\u0410\u0433\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u043e\u043d\u0443\u0441 \u0437\u0430 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043b\u043e\u0445\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f</li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Python","text":"<p>\u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 SAC-RND \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c PyTorch:</p> <pre><code>import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nfrom sac import SAC  # \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SAC\n\nclass RNDNetwork(nn.Module):\n    def __init__(self, state_dim, hidden_dim=256):\n        super(RNDNetwork, self).__init__()\n        # Target network (fixed)\n        self.target = nn.Sequential(\n            nn.Linear(state_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim)\n\n        # Predictor network (trainable)\n        self.predictor = nn.Sequential(\n            nn.Linear(state_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim),\n            nn.ReLU(),\n            nn.Linear(hidden_dim, hidden_dim))\n\n        # Freeze target network\n        for param in self.target.parameters():\n            param.requires_grad = False\n\n    def forward(self, state):\n        with torch.no_grad():\n            target_features = self.target(state)\n        predicted_features = self.predictor(state)\n        return target_features, predicted_features\n\nclass SAC_RND(SAC):\n    def __init__(self, state_dim, action_dim, rnd_scale=0.1, **kwargs):\n        super(SAC_RND, self).__init__(state_dim, action_dim, **kwargs)\n        self.rnd = RNDNetwork(state_dim)\n        self.rnd_optimizer = optim.Adam(self.rnd.predictor.parameters(), lr=1e-4)\n        self.rnd_scale = rnd_scale\n\n    def compute_intrinsic_reward(self, state):\n        state = torch.FloatTensor(state).unsqueeze(0).to(self.device)\n        target, predicted = self.rnd(state)\n        intrinsic_reward = torch.mean((target - predicted)**2, dim=1).item()\n        return intrinsic_reward * self.rnd_scale\n\n    def update_rnd(self, batch):\n        states = torch.FloatTensor(batch['states']).to(self.device)\n        target, predicted = self.rnd(states)\n\n        # Update predictor\n        rnd_loss = torch.mean((target.detach() - predicted)**2)\n        self.rnd_optimizer.zero_grad()\n        rnd_loss.backward()\n        self.rnd_optimizer.step()\n\n        return rnd_loss.item()\n\n    def train(self, batch):\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c RND\n        rnd_loss = self.update_rnd(batch)\n\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u043d\u0430\u0433\u0440\u0430\u0434\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u0432 \u0431\u0430\u0442\u0447\u0435\n        intrinsic_rewards = np.array([self.compute_intrinsic_reward(s) for s in batch['states']])\n        batch['rewards'] += intrinsic_rewards\n\n        # \u041e\u0431\u044b\u0447\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 SAC\n        sac_losses = super().train(batch)\n\n        return {**sac_losses, 'rnd_loss': rnd_loss}\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>import gym\nfrom collections import deque\nimport random\n\nenv = gym.make('MountainCarContinuous-v0')\nstate_dim = env.observation_space.shape[0]\naction_dim = env.action_space.shape[0]\n\nagent = SAC_RND(state_dim, action_dim, rnd_scale=0.1)\n\nepisodes = 1000\nbatch_size = 256\nreplay_buffer = deque(maxlen=100000)\n\nfor episode in range(episodes):\n    state = env.reset()\n    episode_reward = 0\n    done = False\n\n    while not done:\n        action = agent.select_action(state)\n        next_state, reward, done, _ = env.step(action)\n\n        # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0432 \u0431\u0443\u0444\u0435\u0440\u0435\n        replay_buffer.append((state, action, reward, next_state, done))\n        episode_reward += reward\n        state = next_state\n\n        # \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0431\u0440\u0430\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432\n        if len(replay_buffer) &gt; batch_size:\n            batch = random.sample(replay_buffer, batch_size)\n            batch = {\n                'states': np.array([x[0] for x in batch]),\n                'actions': np.array([x[1] for x in batch]),\n                'rewards': np.array([x[2] for x in batch]),\n                'next_states': np.array([x[3] for x in batch]),\n                'dones': np.array([x[4] for x in batch])\n            }\n            losses = agent.train(batch)\n\n    print(f\"Episode {episode}, Reward: {episode_reward}, RND Loss: {losses.get('rnd_loss', 0)}\")\n</code></pre>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#_3","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":"<ol> <li> <p>\u0414\u0432\u0435 \u0441\u0435\u0442\u0438 \u0432 RND: Target \u0441\u0435\u0442\u044c \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0441\u043b\u0443\u0436\u0438\u0442 \u044d\u0442\u0430\u043b\u043e\u043d\u043e\u043c, predictor \u0441\u0435\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0451 \u0432\u044b\u0445\u043e\u0434.</p> </li> <li> <p>\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043d\u0430\u0433\u0440\u0430\u0434\u0430: \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a MSE \u043c\u0435\u0436\u0434\u0443 \u0432\u044b\u0445\u043e\u0434\u0430\u043c\u0438 target \u0438 predictor \u0441\u0435\u0442\u0435\u0439.</p> </li> <li> <p>\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>rnd_scale</code> \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043d\u0430\u0433\u0440\u0430\u0434\u044b.</p> </li> <li> <p>\u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435: RND \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c SAC.</p> </li> </ol>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/sac_rnd/#sac-rnd_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 SAC-RND","text":"<ol> <li>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0441\u0440\u0435\u0434\u0430\u0445 \u0441 \u0440\u0435\u0434\u043a\u0438\u043c\u0438 \u043d\u0430\u0433\u0440\u0430\u0434\u0430\u043c\u0438</li> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0430\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u0443\u0440\u043e\u0432\u043d\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 SAC (\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c, \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c)</li> <li>\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u043d\u0438\u0439 \u043e \u0441\u0440\u0435\u0434\u0435</li> </ol> <p>SAC-RND \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u0433\u0434\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u044b \u0440\u0435\u0434\u043a\u0438 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434 \u0438\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c \u0441 \u043d\u0443\u043b\u044f.</p>","tags":["\u0418\u0433\u0440\u043e\u0432\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","\u0420\u043e\u0431\u043e\u0442\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430","\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u044b","\u0411\u0438\u043e\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430","\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f","\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"]},{"location":"md/singleton/","title":"\u041f\u0430\u0442\u0442\u0435\u0440\u043d Singleton (\u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430)","text":"<p>Singleton (\u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430) - \u044d\u0442\u043e \u043f\u043e\u0440\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0443 \u043a\u043b\u0430\u0441\u0441\u0430 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440, \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u044d\u0442\u043e\u043c\u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0443.</p>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#singleton_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 Singleton","text":"<ol> <li>\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440: \u041a\u043b\u0430\u0441\u0441 \u0438\u043c\u0435\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440</li> <li>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f: \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0438\u0437 \u043b\u044e\u0431\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b</li> <li>\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438</li> <li>\u041f\u043e\u0442\u043e\u043a\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: \u0412 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#singleton_2","title":"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Singleton?","text":"<p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d Singleton \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:</p> <ol> <li> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0438\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438:</p> </li> <li> <p>\u041b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</p> </li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445</li> <li> <p>\u0424\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b</p> </li> <li> <p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b:</p> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</p> </li> <li> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0440\u0435\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</p> </li> <li> <p>\u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:</p> </li> <li> <p>\u041e\u0431\u0449\u0438\u0439 \u043a\u0435\u0448 \u0434\u0430\u043d\u043d\u044b\u0445</p> </li> <li> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0441\u0435\u0441\u0441\u0438\u0439</p> </li> <li> <p>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438:</p> </li> <li>\u041f\u0440\u0438\u043d\u0442\u0435\u0440\u044b</li> <li>\u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#singleton-python","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Singleton \u0432 Python","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#1","title":"1. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 (\u043d\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439)","text":"<pre><code>class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ns1 = Singleton()\ns2 = Singleton()\nprint(s1 is s2)  # \u0412\u044b\u0432\u0435\u0434\u0435\u0442: True\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#2","title":"2. \u041f\u043e\u0442\u043e\u043a\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442","text":"<pre><code>from threading import Lock\n\nclass ThreadSafeSingleton:\n    _instance = None\n    _lock = Lock()\n\n    def __new__(cls):\n        if cls._instance is None:\n            with cls._lock:\n                if cls._instance is None:\n                    cls._instance = super().__new__(cls)\n        return cls._instance\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nts1 = ThreadSafeSingleton()\nts2 = ThreadSafeSingleton()\nprint(ts1 is ts2)  # \u0412\u044b\u0432\u0435\u0434\u0435\u0442: True\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#3-singleton","title":"3. Singleton \u043a\u0430\u043a \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440","text":"<pre><code>def singleton(cls):\n    instances = {}\n\n    def get_instance(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n\n    return get_instance\n\n@singleton\nclass DatabaseConnection:\n    def __init__(self):\n        print(\"\u0421\u043e\u0437\u0434\u0430\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414\")\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ndb1 = DatabaseConnection()\ndb2 = DatabaseConnection()\nprint(db1 is db2)  # \u0412\u044b\u0432\u0435\u0434\u0435\u0442: True\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#4-singleton","title":"4. Singleton \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u0430\u043a\u043b\u0430\u0441\u0441","text":"<pre><code>class SingletonMeta(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Logger(metaclass=SingletonMeta):\n    def __init__(self):\n        self.logs = []\n\n    def add_log(self, message):\n        self.logs.append(message)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nlogger1 = Logger()\nlogger2 = Logger()\nlogger1.add_log(\"\u041f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\")\nprint(logger2.logs)  # \u0412\u044b\u0432\u0435\u0434\u0435\u0442: ['\u041f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435']\nprint(logger1 is logger2)  # \u0412\u044b\u0432\u0435\u0434\u0435\u0442: True\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#1_1","title":"1. \u041b\u043e\u0433\u0433\u0435\u0440","text":"<pre><code>class Logger:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            cls._instance.log_file = open('app.log', 'a')\n        return cls._instance\n\n    def log(self, message):\n        self.log_file.write(f\"{message}\\n\")\n        self.log_file.flush()\n\n    def __del__(self):\n        if hasattr(self, 'log_file'):\n            self.log_file.close()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nlogger = Logger()\nlogger.log(\"\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\")\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#2_1","title":"2. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>class AppConfig:\n    _instance = None\n    _config = {}\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\n            cls._instance._config = {\n                'database': 'localhost:5432',\n                'debug': True,\n                'timeout': 30\n            }\n        return cls._instance\n\n    def get(self, key):\n        return self._config.get(key)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nconfig = AppConfig()\nprint(config.get('database'))  # \u0412\u044b\u0432\u0435\u0434\u0435\u0442: localhost:5432\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#3","title":"3. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>import sqlite3\n\nclass DatabaseConnection:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            cls._instance.connection = sqlite3.connect('mydatabase.db')\n        return cls._instance\n\n    def execute(self, query):\n        cursor = self.connection.cursor()\n        cursor.execute(query)\n        return cursor.fetchall()\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\ndb = DatabaseConnection()\nresults = db.execute(\"SELECT * FROM users\")\n</code></pre>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#singleton_3","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 Singleton","text":"<p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0443</li> <li>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445</li> <li>\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f (\u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438)</li> </ul> <p>\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:</p> <ul> <li>\u041d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 (\u0440\u0435\u0448\u0430\u0435\u0442 \u0434\u0432\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0438\u043c \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c)</li> <li>\u0423\u0441\u043b\u043e\u0436\u043d\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435)</li> <li>\u041c\u043e\u0436\u0435\u0442 \u0441\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043f\u043b\u043e\u0445\u043e\u0439 \u0434\u0438\u0437\u0430\u0439\u043d (\u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0437\u043d\u0430\u044e\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433 \u043e \u0434\u0440\u0443\u0433\u0435)</li> <li>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0430\u0445 (\u0435\u0441\u043b\u0438 \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e)</li> </ul>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/singleton/#singleton_4","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b Singleton","text":"<ol> <li>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 (Dependency Injection)</li> <li>\u041c\u043e\u043d\u0430\u0434\u044b (\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438)</li> <li>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u044f\u0432\u043d\u043e)</li> </ol>","tags":["\u041f\u0430\u0442\u0435\u0440\u043d\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"]},{"location":"md/thompson_sampling/","title":"Thompson Sampling","text":"<p>Thompson Sampling (TS) \u2014 \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043c\u043d\u043e\u0433\u043e\u0440\u0443\u043a\u043e\u0433\u043e \u0431\u0430\u043d\u0434\u0438\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c:</p> <ul> <li>\u0412 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0441\u0442\u0438</li> <li>\u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043c\u0435\u0436\u0434\u0443 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0435\u0439</li> <li>\u0412 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.</li> </ul>"},{"location":"md/thompson_sampling/#thompson-sampling_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f Thompson Sampling","text":"<p>Thompson Sampling \u2014 \u044d\u0442\u043e \u0431\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439:</p> <ol> <li>\u041c\u043e\u0434\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0441\u0442\u044c \u0432 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043d\u0430\u0433\u0440\u0430\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f</li> <li>\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0443\u0442\u0451\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u0430\u043f\u043e\u0441\u0442\u0435\u0440\u0438\u043e\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f</li> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430\u0433\u0440\u0430\u0434</li> </ol>"},{"location":"md/thompson_sampling/#_1","title":"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0441\u043d\u043e\u0432\u0430","text":"<p>\u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043d\u0430\u0433\u0440\u0430\u0434 (\u043a\u043b\u0438\u043a/\u043d\u0435 \u043a\u043b\u0438\u043a) TS \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0431\u0435\u0442\u0430-\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435:</p> <ul> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f Beta(\u03b1\u2090, \u03b2\u2090)</li> <li>\u03b1\u2090 \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0441\u043f\u0435\u0445\u043e\u0432 (\u043a\u043b\u0438\u043a\u043e\u0432)</li> <li>\u03b2\u2090 \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0443\u0434\u0430\u0447 (\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432)</li> </ul> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c:</p> <ol> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f a \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u03b8\u2090 ~ Beta(\u03b1\u2090, \u03b2\u2090)</li> <li>\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u03b8\u2090</li> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0433\u0440\u0430\u0434\u0443 r (0 \u0438\u043b\u0438 1)</li> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:</li> <li>\u0415\u0441\u043b\u0438 r=1: \u03b1\u2090 \u2190 \u03b1\u2090 + 1</li> <li>\u0415\u0441\u043b\u0438 r=0: \u03b2\u2090 \u2190 \u03b2\u2090 + 1</li> </ol>"},{"location":"md/thompson_sampling/#thompson-sampling_2","title":"\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 Thompson Sampling","text":"<ol> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 exploration/exploitation: \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0441\u0442\u044c\u044e</li> <li>\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c: \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f</li> <li>\u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438: \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044f</li> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438</li> </ol>"},{"location":"md/thompson_sampling/#python","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 Python","text":"<p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439, \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432.</p> <pre><code>import numpy as np\nfrom scipy.stats import beta\nimport matplotlib.pyplot as plt\n\nclass ThompsonSampling:\n    def __init__(self, n_arms):\n        self.n_arms = n_arms\n        self.alpha = np.ones(n_arms)  # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0441\u043f\u0435\u0445\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n        self.beta = np.ones(n_arms)   # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0443\u0434\u0430\u0447 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n\n    def select_arm(self):\n        # \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0438\u0437 \u0431\u0435\u0442\u0430-\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n        samples = [beta.rvs(a, b) for a, b in zip(self.alpha, self.beta)]\n        return np.argmax(samples)\n\n    def update(self, chosen_arm, reward):\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n        self.alpha[chosen_arm] += reward\n        self.beta[chosen_arm] += (1 - reward)\n\n    def plot_distributions(self):\n        x = np.linspace(0, 1, 100)\n        for arm in range(self.n_arms):\n            y = beta.pdf(x, self.alpha[arm], self.beta[arm])\n            plt.plot(x, y, label=f'Action {arm}')\n        plt.legend()\n        plt.title('Posterior Distributions')\n        plt.show()\n</code></pre>"},{"location":"md/thompson_sampling/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code># \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u0438\nn_arms = 3  # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439\ntrue_means = [0.3, 0.5, 0.7]  # \u0418\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0438\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\nn_trials = 1000  # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0430\u0437\u043e\u0432\n\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nts = ThompsonSampling(n_arms)\nrewards = []\n\nfor t in range(n_trials):\n    # \u0412\u044b\u0431\u043e\u0440 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    chosen_arm = ts.select_arm()\n\n    # \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043d\u0430\u0433\u0440\u0430\u0434\u044b (\u043a\u043b\u0438\u043a \u0438\u043b\u0438 \u043d\u0435\u0442)\n    reward = np.random.binomial(1, true_means[chosen_arm])\n\n    # \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n    ts.update(chosen_arm, reward)\n    rewards.append(reward)\n\n    # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u044b\u0435 200 \u0448\u0430\u0433\u043e\u0432\n    if t in [50, 200, 500, 999]:\n        print(f\"Step {t}: Alpha = {ts.alpha}, Beta = {ts.beta}\")\n        ts.plot_distributions()\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u0443\u043c\u0443\u043b\u044f\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044f\noptimal_rewards = [max(true_means) for _ in range(n_trials)]\ncumulative_regret = np.cumsum(optimal_rewards - np.array(rewards))\n\nplt.plot(cumulative_regret)\nplt.xlabel('Trials')\nplt.ylabel('Cumulative Regret')\nplt.title('Performance of Thompson Sampling')\nplt.show()\n</code></pre>"},{"location":"md/thompson_sampling/#_3","title":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","text":"<ol> <li> <p>\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439:</p> </li> <li> <p>\u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0432\u0441\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b (\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435)</p> </li> <li>\u0421\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0443\u0436\u0435 \u0438 \u0441\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432\u043f\u0440\u0430\u0432\u043e</li> <li> <p>\u0414\u043b\u044f \u043f\u043b\u043e\u0445\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0448\u0438\u0440\u043e\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u0441\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432\u043b\u0435\u0432\u043e</p> </li> <li> <p>\u041a\u0443\u043c\u0443\u043b\u044f\u0442\u0438\u0432\u043d\u043e\u0435 \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u0435:</p> </li> <li>\u0412 \u0438\u0434\u0435\u0430\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0441\u0442\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438</li> <li>\u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e</li> </ol>"},{"location":"md/thompson_sampling/#thompson-sampling_3","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f Thompson Sampling","text":""},{"location":"md/thompson_sampling/#1-thompson-sampling-linear-thompson-sampling","title":"1. \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 Thompson Sampling (Linear Thompson Sampling)","text":"<p>\u0414\u043b\u044f \u0443\u0447\u0451\u0442\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c:</p> <pre><code>class LinearThompsonSampling:\n    def __init__(self, n_arms, context_dim, lambda_=1.0):\n        self.n_arms = n_arms\n        self.context_dim = context_dim\n        self.lambda_ = lambda_\n\n        # \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n        self.B = [np.identity(context_dim) for _ in range(n_arms)]\n        self.mu = [np.zeros(context_dim) for _ in range(n_arms)]\n        self.f = [np.zeros(context_dim) for _ in range(n_arms)]\n\n    def select_arm(self, context):\n        samples = []\n        for a in range(self.n_arms):\n            # \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0438\u0437 \u043c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n            mu_hat = self.mu[a]\n            B_inv = np.linalg.inv(self.B[a])\n            sample = np.random.multivariate_normal(mu_hat, B_inv)\n            samples.append(np.dot(sample, context))\n\n        return np.argmax(samples)\n\n    def update(self, chosen_arm, context, reward):\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n        self.B[chosen_arm] += np.outer(context, context)\n        self.f[chosen_arm] += reward * context\n        self.mu[chosen_arm] = np.linalg.solve(self.B[chosen_arm], self.f[chosen_arm])\n</code></pre>"},{"location":"md/thompson_sampling/#2-thompson-sampling","title":"2. \u041d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 Thompson Sampling","text":"<p>\u0414\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u0441 dropout \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0430\u0446\u0438\u0438 \u0431\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438.</p>"},{"location":"md/thompson_sampling/#_4","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043e\u0432\u0435\u0442\u044b","text":"<ol> <li> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f:</p> </li> <li> <p>\u041c\u043e\u0436\u043d\u043e \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u0441 \u03b1=1, \u03b2=1 (\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435)</p> </li> <li> <p>\u0414\u043b\u044f \"\u0442\u0451\u043f\u043b\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430\" \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435</p> </li> <li> <p>\u041d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435 \u043d\u0430\u0433\u0440\u0430\u0434\u044b:</p> </li> <li> <p>\u0414\u043b\u044f \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043d\u0430\u0433\u0440\u0430\u0434 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0440\u0435\u043c\u044f \u0447\u0442\u0435\u043d\u0438\u044f) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u043c\u0435\u0441\u0442\u043e \u0431\u0435\u0442\u0430</p> </li> <li> <p>\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:</p> </li> <li>\u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439</li> <li>\u0418\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430</li> </ol>"},{"location":"md/thompson_sampling/#_5","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438","text":"\u041c\u0435\u0442\u043e\u0434 \u041f\u043b\u044e\u0441\u044b \u041c\u0438\u043d\u0443\u0441\u044b Thompson Sampling \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 exploration, \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f LinUCB \u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c, \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u0416\u0451\u0441\u0442\u043a\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 exploration/exploitation \u03b5-\u0436\u0430\u0434\u043d\u044b\u0439 \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u041d\u0435\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435"}]}